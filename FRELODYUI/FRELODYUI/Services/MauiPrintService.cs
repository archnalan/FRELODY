using FRELODYAPP.Dtos;
using FRELODYSHRD.Dtos;
using FRELODYSHRD.Interfaces;
using FRELODYUI.Shared.Services;
using Microsoft.Extensions.Logging;
using Microsoft.Maui.ApplicationModel.DataTransfer; // Added for Share & ShareTextRequest

namespace FRELODYUI.Services
{
    public class MauiPrintService : IPrintService
    {
        private readonly ILogger<MauiPrintService> _logger;

        public MauiPrintService(ILogger<MauiPrintService> logger)
        {
            _logger = logger;
        }

        public async Task PrintSongAsync(SongDto song)
        {
            try
            {
#if ANDROID
                await PrintOnAndroid(song);
#elif IOS
                await PrintOnIOS(song);
#elif WINDOWS
                await PrintOnWindows(song);
#else
                throw new PlatformNotSupportedException("Printing is not supported on this platform");
#endif
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Error printing song {SongTitle}", song.Title);
                throw;
            }
        }

        public Task<bool> IsPrintAvailableAsync()
        {
#if ANDROID || IOS || WINDOWS
            return Task.FromResult(true);
#else
            return Task.FromResult(false);
#endif
        }

#if ANDROID
        private async Task PrintOnAndroid(SongDto song)
        {
            var printContent = GeneratePrintableHtml(song);

            await Share.Default.RequestAsync(new ShareTextRequest
            {
                Text = $"Song: {song.Title}\n\nGenerated by FRELODY App",
                Title = song.Title
            });
        }
#endif

#if IOS
        private async Task PrintOnIOS(SongDto song)
        {
            var printContent = GeneratePrintableHtml(song);

            await Share.Default.RequestAsync(new ShareTextRequest
            {
                Text = $"Song: {song.Title}\n\nGenerated by FRELODY App",
                Title = song.Title
            });
        }
#endif

#if WINDOWS
        private async Task PrintOnWindows(SongDto song)
        {
            var printContent = GeneratePrintableHtml(song);

            await Share.Default.RequestAsync(new ShareTextRequest
            {
                Text = $"Song: {song.Title}\n\nGenerated by FRELODY App",
                Title = song.Title
            });
        }
#endif

        private string GeneratePrintableHtml(SongDto song)
        {
            var content = $@"
<!DOCTYPE html>
<html>
<head>
    <title>{song.Title}</title>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    <style>
        body {{ 
            font-family: Arial, sans-serif; 
            font-size: 14px; 
            margin: 20px;
            color: black;
            background: white;
        }}
        .song-header {{
            text-align: center;
            margin-bottom: 30px;
            border-bottom: 2px solid #333;
            padding-bottom: 15px;
        }}
        .song-number {{
            font-size: 16px;
            color: #666;
            margin-right: 15px;
        }}
        .song-title {{
            font-size: 20px;
            font-weight: bold;
        }}
        .verse-section {{
            margin-bottom: 25px;
        }}
        .verse-title {{
            font-weight: bold;
            margin-bottom: 12px;
            font-size: 14px;
            color: #333;
        }}
        .lyric-line {{
            display: flex;
            flex-wrap: wrap;
            margin-bottom: 10px;
            min-height: 20px;
        }}
        .lyric-segment {{
            display: inline-block;
            vertical-align: bottom;
            margin-right: 10px;
        }}
        .chord {{
            font-size: 12px;
            font-weight: bold;
            color: #000;
            display: block;
            height: 14px;
            line-height: 14px;
        }}
        .lyric {{
            font-size: 13px;
            display: block;
            line-height: 16px;
        }}
    </style>
</head>
<body>
    <div class='song-header'>
        {(song.SongNumber.HasValue ? $"<span class='song-number'>{song.SongNumber.Value:D3}</span>" : "")}
        <span class='song-title'>{song.Title}</span>
    </div>
    <div class='song-content'>";

            if (song.SongParts?.Any() == true)
            {
                foreach (var verse in song.SongParts.OrderBy(v => v.PartNumber))
                {
                    content += $@"
        <div class='verse-section'>
            <div class='verse-title'>Verse {verse.PartNumber:D2}</div>";

                    if (verse.LyricLines?.Any() == true)
                    {
                        foreach (var line in verse.LyricLines.OrderBy(l => l.LyricLineOrder))
                        {
                            content += @"
            <div class='lyric-line'>";

                            if (line.LyricSegments?.Any() == true)
                            {
                                foreach (var segment in line.LyricSegments.OrderBy(s => s.LyricOrder))
                                {
                                    content += $@"
                <div class='lyric-segment'>
                    <div class='chord'>{segment.Chord?.ChordName ?? ""}</div>
                    <div class='lyric'>{segment.Lyric}</div>
                </div>";
                                }
                            }

                            content += @"
            </div>";
                        }
                    }

                    content += @"
        </div>";
                }
            }

            content += @"
    </div>
</body>
</html>";

            return content;
        }
    }
}
