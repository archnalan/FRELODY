@inherits LayoutComponentBase

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <article class="h-100 content bg-light px-4">
            <GlobalErrorBoundary @ref="errorBoundaryRef">
                <ChildContent>
                    @Body
                </ChildContent>
                <ErrorContent Context="ex">
                    @{
                        var errorId = GenerateErrorId();
                        var details = GetErrorDetails(ex);
                    }
                    <ErrorDialog Visible="true"
                                 Title="@details.Title"
                                 Message="@details.Message"
                                 ErrorId="@errorId"
                                 CanRetry="@details.CanRetry"
                                 Exception="@ex"
                                 OnRetry="RecoverPage"
                                 OnReload="HardReload" />
                </ErrorContent>
            </GlobalErrorBoundary>
        </article>
    </main>
</div>

<!-- Global Error Fallback -->
<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code{
    private GlobalErrorBoundary errorBoundaryRef = default!;
    [Inject] private IJSRuntime JS { get; set; } = default!;

    private void RecoverPage()
    {
        errorBoundaryRef?.Recover();
    }

    private async Task HardReload()
    {
#if ANDROID || IOS || MACCATALYST || WINDOWS
        await Task.CompletedTask; // platform-specific restart handled elsewhere
#else
        await JS.InvokeVoidAsync("location.reload");
#endif
    }

    private (string Title, string Message, bool CanRetry) GetErrorDetails(Exception ex) =>
        ex switch
        {
            HttpRequestException => ("Network Error", "Unable to reach the server.", true),
            TimeoutException => ("Timeout", "The request took too long.", true),
            UnauthorizedAccessException => ("Access Denied", "You are not authorized.", false),
            ArgumentException => ("Invalid Input", "Please verify your input.", true),
            InvalidOperationException => ("Operation Failed", "Cannot complete the operation now.", true),
            _ => ("Unexpected Error", "Something went wrong on this page.", true)
        };

    private string GenerateErrorId() =>
        $"ERR-{DateTime.UtcNow:yyyyMMdd}-{Guid.NewGuid().ToString("N")[..8].ToUpper()}";
}