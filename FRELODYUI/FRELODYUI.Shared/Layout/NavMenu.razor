<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">FRELODY</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler" />

<div class="nav-scrollable">
    <nav class="h-100 d-flex flex-column">
        <CascadingAuthenticationState>
        <AuthorizeView>
            <Authorized>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/dashboard" Match="NavLinkMatch.All">
                        <span class="bi bi-card-list-nav-menu" aria-hidden="true"></span> Dashboard
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link align-items-center" href="/songs-library" Match="NavLinkMatch.Prefix">
                        <span class="bi bi-collection-play-fill-nav-menu" aria-hidden="true"></span> Library
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="compose" Match="NavLinkMatch.Prefix">
                        <span class="bi bi-pencil-square-nav-menu" aria-hidden="true"></span> Compose
                    </NavLink>
                </div>
                <div class="nav-item px-3">
                    <NavLink class="nav-link" href="/chords" Match="NavLinkMatch.Prefix">
                        <span class="bi bi-music-note-list-nav-menu" aria-hidden="true"></span> Chords
                    </NavLink>
                </div>
                @{
                    var firstName = context.User.FindFirst("FirstName")?.Value;
                    var lastName = context.User.FindFirst("LastName")?.Value;
                    var fullName = firstName + " " + lastName;
                    var displayName = fullName.Length > 10 ? fullName.Substring(0, 10) + "..." : fullName;
                }
                <div class="nav-item px-3 dropdown dropup mt-auto">
                    <button class="nav-link dropdown-toggle w-100 text-start d-flex align-items-center" data-bs-toggle="dropdown" aria-expanded="false">
                        <div class="rounded-circle bg-primary d-flex align-items-center justify-content-center me-2" style="width: 24px; height: 24px;">
                            <span class="text-white fw-bold" style="font-size: 0.7rem;">
                                    @(firstName?.FirstOrDefault())@(lastName?.FirstOrDefault())
                                </span>
                        </div>                           
                            @displayName
                    </button>
                    <ul class="dropdown-menu">
                        <li>
                            <a class="dropdown-item" href="/">
                                <span class="bi bi-house-door" aria-hidden="true"></span> Home
                            </a>
                        </li>
                        <li><hr class="dropdown-divider"></li>
                        <li>
                            <a class="dropdown-item" href="/user-profile/@(context.User.FindFirst("UserId")?.Value)">
                                <i class="bi bi-person me-2"></i>View Profile
                            </a>
                        </li>
                        <li><hr class="dropdown-divider"></li>
                        <li>
                            <a class="dropdown-item" href="/users">
                                <span class="bi bi-people" aria-hidden="true"></span> Accounts
                            </a>
                        </li>
                        <li><hr class="dropdown-divider"></li>
                        <li class="form-check form-switch mx-3">
                            <input class="form-check-input" type="checkbox" role="switch" id="switchCheckChecked"
                                   checked="@(!isDarkTheme)" @onchange="ToggleTheme">
                            <label class="form-check-label" for="switchCheckChecked">Theme</label>
                        </li>
                        <li><hr class="dropdown-divider"></li>
                        <li><button class="dropdown-item text-danger border-0 bg-transparent w-100 text-start" @onclick="LogoutUser">
                            <i class="bi bi-box-arrow-right me-2"></i>Log out
                        </button></li>
                    </ul>
                </div>
            </Authorized>
            <NotAuthorized>
                <div class="nav-item px-3 mt-auto">
                    <NavLink class="nav-link" href="/login">
                        <span class="bi bi-box-arrow-in-right-nav-menu" aria-hidden="true"></span> Login
                    </NavLink>
                </div>
            </NotAuthorized>
        </AuthorizeView>
        </CascadingAuthenticationState>
    </nav>
</div>

@code {
    private bool isDarkTheme = false;

    protected override async Task OnInitializedAsync()
    {
        var savedTheme = await _storageService.GetItemAsync<string>("Theme");
        if (!string.IsNullOrEmpty(savedTheme))
        {
            isDarkTheme = savedTheme == "dark";
            await ApplyTheme(savedTheme);
        }
    }

    private async Task LogoutUser()
    {
        await _globalAuth.MarkUserAsLoggedOutAsync();
        _navManager.NavigateTo("/login", replace: true);
    }

    private async Task ToggleTheme()
    {
        isDarkTheme = !isDarkTheme;
        var theme = isDarkTheme ? "dark" : "light";
        await ApplyTheme(theme);
        await _storageService.SetItemAsync("Theme", theme);
    }

    private async Task ApplyTheme(string theme)
    {
        await JsRt.InvokeVoidAsync("eval",
            $"document.documentElement.setAttribute('data-bs-theme', '{theme}')");
    }

}

<script>
    //Replacing onclick="document.querySelector('.navbar-toggler').click()"
    document.addEventListener('click', e => {
      const toggler = document.querySelector('.navbar-toggler');
      if (!toggler) return;
      // Only act on small screens where the checkbox controls visibility
      if (window.matchMedia('(max-width: 640px)').matches) {
          // Check if it's a NavLink or a dropdown item
          const navLink = e.target.closest('.nav-item a.nav-link');
          const dropdownItem = e.target.closest('.dropdown-item');

          if (navLink || dropdownItem) {
              toggler.checked = false;
          }
      }
  });
</script>
