@using static FRELODYUI.Shared.Pages.Common.SearchModal
@inherits LayoutComponentBase

<div class="landing-container d-flex flex-column vh-100">
    <!-- Header -->
    <header class="landing-header bg-primary sticky-top border-bottom shadow-sm">
            <nav class="navbar navbar-expand-lg px-3 px-lg-5" data-bs-theme="light">
                <div class="container-fluid">
                    <!-- Brand -->
                    <a class="navbar-brand fw-bold fs-4" href="/">
                        <span class="text-secondary me-1">FRE</span><span class="text-warning">LODY</span>
                    </a>

                    <!-- Mobile Toggle -->
                    <button class="navbar-toggler border-0" type="button" data-bs-toggle="collapse" 
                            data-bs-target="#navbarContent" aria-controls="navbarContent" 
                            aria-expanded="false" aria-label="Toggle navigation">
                        <span class="navbar-toggler-icon"></span>
                    </button>

                    <!-- Navbar Content -->
                    <div class="collapse navbar-collapse" id="navbarContent">
                        <div class="d-none d-lg-flex justify-content-center flex-grow-1 mx-4">
                            <div class="search-trigger" @onclick="OpenSearchModal">
                                <div class="trigger-input-wrapper" style="max-width: 750px; cursor: pointer;">
                                    <i class="bi bi-search text-muted trigger-icon"></i>
                                    <input type="text"
                                           class="trigger-input"
                                           placeholder="Search songs..."
                                           readonly />
                                <span class="trigger-kbd">
                                        <kbd class="small p-1">Ctrl+K</kbd>
                                    </span>
                                </div>
                            </div>
                        </div>
                        <!-- Right Side Actions -->
                        <div class="d-flex align-items-center gap-3 mt-3 mt-lg-0">
                            <!--Pricing-->
                            <a class="btn btn-link text-decoration-none p-2"
                               href="/pricing"
                               title="View Pricing">
                                <i class="bi bi-tag-fill fs-5"></i>
                            </a>
                            <!-- Theme Toggle -->
                            <span class="btn btn-link text-decoration-none p-2" 
                                    @onclick="ToggleTheme"
                                    title="Toggle theme">
                                @if (isDarkTheme)
                                {
                                    <i class="bi bi-sun-fill fs-5"></i>
                                }
                                else
                                {
                                    <i class="bi bi-moon-fill fs-5"></i>
                                }
                            </span>

                            <!-- User Profile or Sign In -->
                            <CascadingAuthenticationState>
                                <AuthorizeView>
                                    <Authorized>
                                        @{
                                            var firstName = context.User.FindFirst("FirstName")?.Value;
                                            var lastName = context.User.FindFirst("LastName")?.Value;
                                            var userId = context.User.FindFirst("UserId")?.Value;
                                            //var fullName = $"{firstName} {lastName}";
                                            var displayName = firstName?.Length > 7 ? firstName.Substring(0, 7) + "..." : firstName;
                                        }
                                        <div class="dropdown">
                                            <button class="btn btn-secondary dropdown-toggle d-flex align-items-center" 
                                                    type="button" 
                                                    data-bs-toggle="dropdown" 
                                                    aria-expanded="false">
                                                <div class="rounded-circle bg-primary d-flex align-items-center justify-content-center me-2" 
                                                     style="width: 32px; height: 32px;">
                                                    <span class="text-secondary fw-bold" style="font-size: 0.875rem;">
                                                        @(firstName?.FirstOrDefault())@(lastName?.FirstOrDefault())
                                                    </span>
                                                </div>
                                                <span class="d-none d-md-inline">@displayName</span>
                                            </button>
                                            <ul class="dropdown-menu dropdown-menu-end">
                                                <li>
                                                    <a class="dropdown-item" href="/user-profile/@userId">
                                                        <i class="bi bi-person me-2"></i>View Profile
                                                    </a>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <a class="dropdown-item" href="/dashboard">
                                                        <i class="bi bi-speedometer2 me-2"></i>Dashboard
                                                    </a>
                                                </li>
                                                <li>
                                                <a class="dropdown-item" href="/playlists">
                                                    <i class="bi bi-music-note-list me-2"></i>Playlists
                                                    </a>
                                                </li>
                                                <li><hr class="dropdown-divider"></li>
                                                <li>
                                                    <button class="dropdown-item text-danger" @onclick="LogoutUser">
                                                        <i class="bi bi-box-arrow-right me-2"></i>Log out
                                                    </button>
                                                </li>
                                            </ul>
                                        </div>
                                    </Authorized>
                                    <NotAuthorized>
                                        <!-- Sign In Button -->
                                        <button class="btn btn-secondary px-4" @onclick="NavigateToLogin">
                                            Sign In
                                        </button>
                                    </NotAuthorized>
                                </AuthorizeView>
                            </CascadingAuthenticationState>
                        </div>
                    </div>
                </div>
            </nav>

        <!-- Mobile Search -->
        <div class="d-lg-none px-3 pb-3">
            <div class="trigger-input-wrapper" style="cursor: pointer;">
                <i class="bi bi-search text-muted trigger-icon"></i>
                <input type="text" 
                       class="trigger-input"
                       placeholder="Search songs..."
                       @bind-value="searchQuery"
                       @bind-value:event="oninput"
                       @bind-value:after="OnSearchInput" />
            </div>
        </div>
    </header>

    <!-- Body Content (Scrollable) -->
    <main class="position-relative landing-body flex-grow-1 overflow-auto">
        <GlobalErrorBoundary @ref="errorBoundaryRef">
            <ChildContent>
                @Body
            </ChildContent>
            <ErrorContent Context="ex">
                @{
                    var errorId = GenerateErrorId();
                    var details = GetErrorDetails(ex);
                }
                <ErrorDialog Visible="true"
                             Title="@details.Title"
                             Message="@details.Message"
                             ErrorId="@errorId"
                             CanRetry="@details.CanRetry"
                             Exception="@ex"
                             OnRetry="RecoverPage"
                             OnReload="HardReload" />
            </ErrorContent>
        </GlobalErrorBoundary>
    </main>

    <!-- Footer -->
    <footer class="landing-footer border-top py-2">
        <div class="container-fluid px-4">
            <div class="row gy-2">
                <!-- Brand & Description -->
                <div class="col-12 col-md-6">
                    <p class="text-center small mb-0 d-none d-md-block">
                        Your ultimate music companion. Explore, play, and share songs with ease.
                    </p>
                </div>
                <div class="col-12 col-md-6 ">
                    <p class="text-center small mb-0">
                        &copy; @DateTime.Now.Year FRELODY. All rights reserved.
                    </p>
                </div>
            </div>
        </div>
    </footer>

    <!-- Chat Bubble -->
    <FRELODYUI.Shared.Components.ChatBubble />
</div>
<SearchModal @ref="searchModalRef"
             OnSearch="HandleSearch"
             OnResultSelected="HandleResultSelected" />
@code {
    private GlobalErrorBoundary errorBoundaryRef = default!;
    private string searchQuery = string.Empty;
    private bool isDarkTheme = false;
    private SearchModal? searchModalRef = default!;

    protected override async Task OnInitializedAsync()
    {
        // Load theme preference
        var theme = await _storageService.GetItemAsync<string>("Theme");
        isDarkTheme = theme == "dark";

        if (isDarkTheme)
        {
            await ApplyTheme("dark");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JsRt.InvokeVoidAsync("setupSearchShortcut");
        }
    }

    private async Task HandleSearch()
    {
        await OnSearchInput();
    }

    private async Task HandleResultSelected(SearchResult songResult)
    {
        _navManager.NavigateTo($"/songs/{songResult.Id}/landing");
        await Task.CompletedTask;
    }

    private async Task OpenSearchModal()
    {
        if (searchModalRef != null)
        {
            await searchModalRef.Open();
        }
    }
    private async Task OnSearchInput()
    {
        await _heroDataService.UpdateSearchQuery(searchQuery);
    }

    private async Task ToggleTheme()
    {
        isDarkTheme = !isDarkTheme;
        var theme = isDarkTheme ? "dark" : "light";
        await ApplyTheme(theme);
        await _storageService.SetItemAsync("Theme", theme);
    }

    private async Task ApplyTheme(string theme)
    {
        await JsRt.InvokeVoidAsync("eval", 
            $"document.documentElement.setAttribute('data-bs-theme', '{theme}')");
    }

    private void NavigateToLogin()
    {
        _navManager.NavigateTo("/login");
    }

    private async Task LogoutUser()
    {
        await _globalAuth.MarkUserAsLoggedOutAsync();
        _navManager.NavigateTo("/login", replace: true);
    }

    private void RecoverPage()
    {
        errorBoundaryRef?.Recover();
    }

    private async Task HardReload()
    {
#if ANDROID || IOS || MACCATALYST || WINDOWS
        Application.Current.Quit();
        await Task.CompletedTask;
#else
        await JsRt.InvokeVoidAsync("location.reload");
#endif
    }

    private (string Title, string Message, bool CanRetry) GetErrorDetails(Exception ex) =>
        ex switch
        {
            HttpRequestException => ("Network Error", "Unable to reach the server.", true),
            TimeoutException => ("Timeout", "The request took too long.", true),
            TaskCanceledException => ("Request Cancelled", "The request was cancelled.", true),
            UnauthorizedAccessException => ("Access Denied", "You are not authorized.", false),
            ArgumentNullException => ("Missing Input", "A required field was not provided.", true),
            ArgumentException => ("Invalid Input", "Please verify your input.", true),
            InvalidOperationException => ("Operation Failed", "Cannot complete the operation now.", true),
            _ => ("Unexpected Error", "Something went wrong.", true)
        };

    private string GenerateErrorId() =>
        $"ERR-{DateTime.UtcNow:yyyyMMdd}-{Guid.NewGuid().ToString("N")[..8].ToUpper()}";
}