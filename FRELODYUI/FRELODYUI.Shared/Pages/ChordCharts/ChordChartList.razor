@page "/chord-charts"
@using Microsoft.AspNetCore.Components.Web.Virtualization
@using FRELODYUI.Shared.Pages.Common
@inject ILogger<ChordChartList> Logger
@implements IDisposable

<div class="container-fluid bg-light vh-100" style="max-width:55rem;justify-self:center">
    <div class="@GetInnerContainerClass()">
        <h3 class="my-3">Chord Charts</h3>
        
        @if (!string.IsNullOrEmpty(SuccessMessage))
        {
            <div class="w-75 alert alert-success text-wrap mb-2" role="alert">
                @SuccessMessage
            </div>
        }
        
        <div class="w-75 rounded-3 bg-light shadow-sm p-3 mb-2" style="min-width:15rem">
            <div class="d-flex justify-content-between">
                <div class="d-flex w-50 justify-content-start align-items-center position-relative me-5">
                    <input 
                        @bind-value="_searchInput"
                        @bind-value:event="oninput"
                        @bind-value:after="OnSearchInput"
                        type="text" 
                        class="h-100 form-control w-100 ps-5 rounded-3 placeholder-wave" 
                        placeholder="Search a chord chart..." />
                    <button class="btn btn-link position-absolute border-0" @onclick="FocusSearch">
                        <i class="bi bi-search"></i>
                    </button>
                </div>
                <div class="d-flex align-items-center border border-light px-2 btn btn-secondary text-primary bg-transparent bg-opacity-25">
                    <label class="me-2" style="cursor:pointer">Add Chart</label>
                    <button class="text-primary border-0 bg-transparent" @onclick="NavigateToCreate">
                        <i class="bi bi-file-earmark-plus"></i>
                    </button>
                </div>
            </div>
        </div>
        
        <div class="w-75" style="margin-top: 1.5rem">
            @if (IsLoading)
            {
                <div class="row g-3">
                    @for (int i = 0; i < ChartsPerPage; i++)
                    {
                        <div class="col-12 col-md-6 col-lg-3">
                            <div class="d-flex flex-column" style="gap: 1rem; flex-shrink: 0; width: 13rem">
                                <div class="placeholder-glow">
                                    <div class="placeholder w-100" style="height: 15rem; background-color: #e9ecef"></div>
                                </div>
                                <div class="placeholder-glow">
                                    <div class="placeholder" style="width: 7rem; height: 1rem"></div>
                                </div>
                                <div class="placeholder-glow">
                                    <div class="placeholder w-100" style="height: 1.25rem"></div>
                                </div>
                                <div class="placeholder-glow">
                                    <div class="placeholder w-100" style="height: 1.25rem"></div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else if (FilteredCharts.Any())
            {
                <div class="row g-3">
                    @foreach (var chart in CurrentPageCharts)
                    {
                        <div class="col-12 col-md-6 col-lg-3">
                            <div class="card h-100">
                                <div class="card-img-top d-flex justify-content-center p-2">
                                    <img 
                                        src="@chart.FilePath" 
                                        alt="@chart.FilePath" 
                                        class="img-thumbnail" 
                                        style="max-height: 15em; max-width: 10em; border-radius: 0.5em; background-color: @(Theme == "dark" ? "#ddd" : "")" />
                                </div>
                                <div class="card-body d-flex flex-column">
                                    <h5 class="card-title">Fret: @chart.FretPosition</h5>
                                    <p class="card-text flex-grow-1">
                                        @if (!string.IsNullOrEmpty(chart.PositionDescription) && chart.PositionDescription.Length > 25)
                                        {
                                            @($"{chart.PositionDescription.Substring(0, 45)}...")
                                        }
                                        else
                                        {
                                            @chart.PositionDescription
                                        }
                                    </p>
                                    <div class="d-flex justify-content-center" style="margin-top: 1rem; gap: 0.5rem">
                                        <button class="btn btn-sm btn-success" @onclick="() => NavigateToDetails(chart.Id)">
                                            <i class="bi bi-list"></i>
                                        </button>
                                        <button class="btn btn-sm btn-primary" @onclick="() => NavigateToEdit(chart.Id)">
                                            <i class="bi bi-pencil-square"></i>
                                        </button>
                                        <button class="btn btn-sm btn-danger" @onclick="() => ShowDeleteConfirmation(chart)">
                                            <i class="bi bi-trash"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                
                <div class="d-flex justify-content-center position-fixed bottom-0 start-50 translate-middle-x bg-light shadow rounded border p-2" style="bottom: 1.25rem">
                    <Pagination 
                        PageCount="@PageCount" 
                        CurrentPage="@CurrentPageIndex" 
                        OnPageChanged="@HandlePageChange" />
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <p>No chord charts found</p>
                </div>
            }
        </div>
    </div>
</div>

<DialogModal IsVisible="_modalService.IsModalVisible"
             Modal="@_modalService.CurrentModal"
             OnCloseModal="CloseModal"
             OnConfirmModal="ConfirmModal" />

@code {
    private List<ChordChartEditDto> Charts = new List<ChordChartEditDto>();
    private List<ChordChartEditDto> FilteredCharts = new List<ChordChartEditDto>();
    private string SuccessMessage = string.Empty;
    private string ErrorMessage = string.Empty;
    private bool IsLoading = true;

    // Search
    private string _searchInput = string.Empty;
    private string _searchTerm = string.Empty;
    private CancellationTokenSource _debounceCts;
    private const int SearchDebounceMs = 500;

    // Pagination
    private int CurrentPageIndex = 0;
    private const int ChartsPerPage = 4;
    private int PageCount => (int)Math.Ceiling((double)FilteredCharts.Count / ChartsPerPage);
    private List<ChordChartEditDto> CurrentPageCharts =>
        FilteredCharts.Skip(CurrentPageIndex * ChartsPerPage).Take(ChartsPerPage).ToList();

    // Delete
    private bool _showDeleteModal = false;
    private ChordChartEditDto _chartToDelete;
    private string _deleteMessage = string.Empty;

    // Theme
    private string Theme = "autumn";

    protected override async Task OnInitializedAsync()
    {
        await LoadCharts();

        // Check for success message from navigation
        var uri = _navManager.ToAbsoluteUri(_navManager.Uri);
        if (Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query).TryGetValue("success", out var success))
        {
            SuccessMessage = success;
            await InvokeAsync(StateHasChanged);

            // Clear success message after 5 seconds
            await Task.Delay(5000);
            SuccessMessage = string.Empty;
            await InvokeAsync(StateHasChanged);
        }
    }

    private string GetInnerContainerClass()
    {
        return $"{(Theme == "dark" ? "text-muted" : "text-dark")} d-flex flex-column justify-content-start align-items-center bg-light h-100";
    }

    private async Task LoadCharts()
    {
        try
        {
            IsLoading = true;
            var response = await _chordChartsApi.GetAllChordCharts();

            if (response.IsSuccessStatusCode)
            {
                Charts = response.Content!;
                FilteredCharts = Charts;
            }
            else
            {
                ErrorMessage = "Failed to load chord charts";
                _modalService.Show(new ModalOptionDto
                {
                    Title = "Error",
                    Message = ErrorMessage,
                    ButtonText = "Close",
                    OptionType = OptionType.Error
                });
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading chord charts");
            ErrorMessage = "An error occurred while loading chord charts";
            _modalService.Show(new ModalOptionDto
            {
                Title = "Error",
                Message = ErrorMessage,
                ButtonText = "Close",
                OptionType = OptionType.Error
            });
        }
        finally
        {
            IsLoading = false;
            await InvokeAsync(StateHasChanged);
        }
    }
    
    private async Task OnSearchInput()
    {
        // Cancel previous debounce timer
        _debounceCts?.Cancel();
        _debounceCts?.Dispose();
        
        _debounceCts = new CancellationTokenSource();
        
        try
        {
            await Task.Delay(SearchDebounceMs, _debounceCts.Token);
            
            _searchTerm = _searchInput.Trim().ToLower();
            
            if (string.IsNullOrEmpty(_searchTerm))
            {
                FilteredCharts = Charts;
            }
            else
            {
                FilteredCharts = Charts.Where(chart =>
                    (chart.FretPosition.ToString().Contains(_searchTerm) ||
                    (chart.FilePath?.ToLower().Contains(_searchTerm) ?? false) ||
                    (chart.PositionDescription?.ToLower().Contains(_searchTerm) ?? false) ||
                    (chart.ChartAudioFilePath?.ToLower().Contains(_searchTerm) ?? false))
                ).ToList();
            }
            
            CurrentPageIndex = 0; // Reset to first page
            await InvokeAsync(StateHasChanged);
        }
        catch (TaskCanceledException)
        {
            // Search was cancelled by a new input, which is expected
        }
    }
    
    private void FocusSearch()
    {
        // This would need JavaScript interop to focus the input
        // For simplicity, we're just clearing the search
        _searchInput = string.Empty;
        _searchTerm = string.Empty;
        FilteredCharts = Charts;
        CurrentPageIndex = 0;
    }
    
    private void NavigateToCreate()
    {
        _navManager.NavigateTo("/chord-charts/create");
    }
    
    private void NavigateToDetails(string id)
    {
        _navManager.NavigateTo($"/chord-charts/{id}");
    }
    
    private void NavigateToEdit(string id)
    {
        _navManager.NavigateTo($"/chord-charts/edit/{id}");
    }
    
    private void HandlePageChange(int page)
    {
        CurrentPageIndex = page;
    }
    
    private void ShowDeleteConfirmation(ChordChartEditDto chart)
    {
        _chartToDelete = chart;
        var chartName = chart.FilePath?.Split('_').Last() ?? "this chart";
        _deleteMessage = $"Do you want to delete the chord chart <strong>{chartName}</strong>?";
        _showDeleteModal = true;
    }
    
    private async Task ConfirmDelete()
    {
        if (_chartToDelete != null)
        {
            try
            {
                var response = await _chordChartsApi.DeleteChordChart(_chartToDelete.Id.ToString());
                
                if (response.IsSuccessStatusCode)
                {
                    SuccessMessage = "Chord chart deleted successfully";
                    await LoadCharts(); // Reload the list
                    
                    // Clear success message after 5 seconds
                    await Task.Delay(5000);
                    SuccessMessage = string.Empty;
                }
                else
                {
                    ErrorMessage = "Failed to delete chord chart";
                    _modalService.Show(new ModalOptionDto
                    {
                        Title = "Error",
                        Message = ErrorMessage,
                        ButtonText = "Close",
                        OptionType = OptionType.Error
                    });
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error deleting chord chart");
                ErrorMessage = "An error occurred while deleting the chord chart";
                _modalService.Show(new ModalOptionDto
                {
                    Title = "Error",
                    Message = ErrorMessage,
                    ButtonText = "Close",
                    OptionType = OptionType.Error
                });
            }
        }
        
        await CloseModal();
    }
    private async Task ConfirmModal()
    {
        if (_modalService.CurrentModal?.Context?.ActionType == "")
        {
            
        }
        else
        {
            _modalService.Close();
        }
        await CloseModal();
    }

    private async Task CloseModal()
    {
        _showDeleteModal = false;
        _chartToDelete = null;
        _deleteMessage = string.Empty;
        _modalService.Close();
        await InvokeAsync(StateHasChanged);
    }
    
    public void Dispose()
    {
        _debounceCts?.Cancel();
        _debounceCts?.Dispose();
    }
}