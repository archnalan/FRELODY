@page "/login"
@layout LandingLayout
@inject ILogger<Login> _logger

<PageTitle>Login - FRELODY</PageTitle>

<div class="h-100 d-flex align-items-center justify-content-center bg-body">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-11 col-sm-8 col-md-6 col-lg-5 col-xl-4">
                <!-- Login Card -->
                <div class="card shadow-lg border-0" style="border-radius: 1rem;">
                    <div class="card-body p-4 p-sm-5">                       
                        <!-- Login Form -->
                        <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin" FormName="loginForm">
                            <DataAnnotationsValidator />

                            @if (!string.IsNullOrEmpty(errorMessage))
                            {
                                <div class="alert alert-danger d-flex align-items-center mb-3" role="alert">
                                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                                    <div>@errorMessage</div>
                                </div>
                            }

                            @if (!string.IsNullOrEmpty(successMessage))
                            {
                                <div class="alert alert-success d-flex align-items-center mb-3" role="alert">
                                    <i class="bi bi-check-circle-fill me-2"></i>
                                    <div>@successMessage</div>
                                </div>
                            }

                            <!-- Email/Username Field -->
                            <div class="mb-3">
                                <label class="form-label text-dark fw-medium">Email or Username</label>
                                <div class="email-input-wrapper">
                                    <i class="bi bi-person text-muted email-icon"></i>
                                    <input type="text" 
                                           @bind-Value="loginModel.Email"
                                           @bind-Value:event="oninput"
                                           class="email-input"
                                           placeholder="Enter your email or username"
                                           disabled="@isLoading" 
                                           autocomplete="off"/>
                                </div>
                                <ValidationMessage For="@(() => loginModel.Email)" class="text-danger small mt-1" />
                            </div>

                            <!-- Password Field -->
                            <div class="mb-3">
                                <label class="form-label text-dark fw-medium">Password</label>
                                <div class="password-input-wrapper">
                                    <i class="bi bi-lock text-muted password-icon"></i>
                                    <input  type="@(showPassword ? "text" : "password")"
                                            @bind-Value="loginModel.Password"
                                            @bind-Value:event="oninput"
                                            class="password-input"
                                            placeholder="Enter your password"
                                            disabled="@isLoading" />
                                    <button type="button" 
                                            class="btn btn-outline-secondary password-toggle bg-body"
                                            @onclick="TogglePasswordVisibility"
                                            disabled="@isLoading">
                                        <i class="bi @(showPassword ? "bi-eye-slash" : "bi-eye")"></i>
                                    </button>
                                </div>
                                <ValidationMessage For="@(() => loginModel.Password)" class="text-danger small mt-1" />
                            </div>

                            <!-- Remember Me & Forgot Password -->
                            <div class="d-flex justify-content-between align-items-center mb-4">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" @bind="rememberMe" id="rememberMe" disabled="@isLoading">
                                    <label class="form-check-label text-muted small" for="rememberMe">
                                        Remember me
                                    </label>
                                </div>
                                <button type="button" 
                                        class="btn btn-link p-0 text-decoration-none small"
                                        @onclick="ShowForgotPassword"
                                        disabled="@isLoading">
                                    Forgot password?
                                </button>
                            </div>

                            <!-- Login Button -->
                            <button type="submit" 
                                    class="btn btn-primary w-100 py-2 fw-medium" 
                                    style="border-radius: 0.5rem;"
                                    disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    <span>Signing in...</span>
                                }
                                else
                                {
                                    <span>Sign In</span>
                                }
                            </button>
                        </EditForm>

                        <!-- Alternative Login Methods -->
                        <div class="text-center my-4">
                            <div class="position-relative">
                                <hr class="text-muted">
                                <span class="position-absolute top-50 start-50 translate-middle bg-white px-3 text-muted small">
                                    Or continue with
                                </span>
                            </div>
                        </div>

                        <!-- Google Login -->
                        <button type="button" 
                                class="btn btn-outline-dark w-100 py-2 mb-3" 
                                style="border-radius: 0.5rem;"
                                @onclick="HandleGoogleLogin"
                                disabled="@isLoading">
                            <i class="bi bi-google me-2"></i>
                            Continue with Google
                        </button>

                        <!-- Sign Up Link -->
                        <div class="text-center">
                            <span class="text-muted small">Don't have an account? </span>
                            <button type="button" 
                                    class="btn btn-link p-0 text-decoration-none small fw-medium"
                                    @onclick="NavigateToSignUp"
                                    disabled="@isLoading">
                                Sign up
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Password Reset Modal -->
@if (showForgotPasswordModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content" style="border-radius: 1rem;">
                <div class="modal-header border-0 pb-0">
                    <h5 class="modal-title fw-bold">Reset Password</h5>
                    <button type="button" class="btn-close" @onclick="CloseForgotPasswordModal"></button>
                </div>
                <div class="modal-body">
                    <p class="text-muted mb-3">Enter your email address and we'll send you a link to reset your password.</p>
                    
                    <EditForm Model="@resetPasswordModel" OnValidSubmit="@HandlePasswordReset" FormName="resetForm">
                        <DataAnnotationsValidator />
                        
                        <div class="mb-3">
                            <label class="form-label">Email Address</label>
                            <InputText @bind-Value="resetPasswordModel.Email" 
                                      class="form-control" 
                                      placeholder="Enter your email"
                                      disabled="@isResettingPassword" />
                            <ValidationMessage For="@(() => resetPasswordModel.Email)" class="text-danger small mt-1" />
                        </div>
                        
                        @if (!string.IsNullOrEmpty(resetErrorMessage))
                        {
                            <div class="alert alert-danger small">@resetErrorMessage</div>
                        }
                        
                        @if (!string.IsNullOrEmpty(resetSuccessMessage))
                        {
                            <div class="alert alert-success small">@resetSuccessMessage</div>
                        }
                        
                        <div class="d-flex gap-2">
                            <button type="button" 
                                    class="btn btn-outline-secondary flex-fill"
                                    @onclick="CloseForgotPasswordModal"
                                    disabled="@isResettingPassword">
                                Cancel
                            </button>
                            <button type="submit" 
                                    class="btn btn-primary flex-fill"
                                    disabled="@isResettingPassword">
                                @if (isResettingPassword)
                                {
                                    <span class="spinner-border spinner-border-sm me-1"></span>
                                }
                                Get Link
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string? ReturnUrl { get; set; }

    private UserLogin loginModel = new();
    private PasswordResetModel resetPasswordModel = new();

    private bool isLoading = false;
    private bool isResettingPassword = false;
    private bool showPassword = false;
    private bool rememberMe = false;
    private bool showForgotPasswordModal = false;

    private string errorMessage = "";
    private string successMessage = "";
    private string resetErrorMessage = "";
    private string resetSuccessMessage = "";

    protected override async Task OnInitializedAsync()
    {
        // Check if user is already authenticated
        var authState = await _globalAuth.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated == true)
        {
            _navManager.NavigateTo("/");
            //NavigateToReturnUrl();
        }
    }

    private async Task HandleLogin()
    {
        try
        {
            ClearMessages();
            isLoading = true;
            StateHasChanged();

            var response = await _authApi.Login(loginModel);
            
            if (response.IsSuccessStatusCode && response.Content != null)
            {
                var authResult = await _globalAuth.MarkUserAsAuthenticatedAsync(response.Content);
                
                if (authResult.IsSuccess)
                {
                    _logger.LogInformation("User logged in successfully");
                    successMessage = "Login successful! Redirecting...";
                    StateHasChanged();
                    
                    await Task.Delay(1000); // Brief delay to show success message
                    NavigateToReturnUrl();
                }
                else
                {
                    errorMessage = "Authentication failed. Please try again.";
                    _logger.LogWarning("Authentication failed: {Error}", authResult.Error?.Message);
                }
            }
            else
            {
                errorMessage = GetErrorMessage(response);
                _logger.LogWarning("Login failed: {Error}", errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An unexpected error occurred. Please try again.";
            _logger.LogError(ex, "Login error");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task HandleGoogleLogin()
    {
        try
        {
            ClearMessages();
            
            // Redirect to Google OAuth
            var googleAuthUrl = "https://accounts.google.com/oauth/authorize?" +
                "client_id=YOUR_GOOGLE_CLIENT_ID&" +
                "redirect_uri=YOUR_REDIRECT_URI&" +
                "response_type=code&" +
                "scope=openid%20email%20profile";
                
            _navManager.NavigateTo(googleAuthUrl, forceLoad: true);
        }
        catch (Exception ex)
        {
            errorMessage = "Failed to initiate Google login.";
            _logger.LogError(ex, "Google login error");
        }
    }

    private async Task HandlePasswordReset()
    {
        try
        {
            resetErrorMessage = "";
            resetSuccessMessage = "";
            isResettingPassword = true;
            StateHasChanged();

            var response = await _authApi.InitiatePasswordReset(resetPasswordModel.Email);
            
            if (response.IsSuccessStatusCode)
            {
                resetSuccessMessage = "Password reset link sent to your email.";
                _logger.LogInformation("Password reset initiated for email: {Email}", resetPasswordModel.Email);
            }
            else
            {
                resetErrorMessage = GetErrorMessage(response);
                _logger.LogWarning("Password reset failed: {Error}", resetErrorMessage);
            }
        }
        catch (Exception ex)
        {
            resetErrorMessage = "Failed to send reset link. Please try again.";
            _logger.LogError(ex, "Password reset error");
        }
        finally
        {
            isResettingPassword = false;
            StateHasChanged();
        }
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private void ShowForgotPassword()
    {
        resetPasswordModel = new PasswordResetModel();
        resetErrorMessage = "";
        resetSuccessMessage = "";
        showForgotPasswordModal = true;
    }

    private void CloseForgotPasswordModal()
    {
        showForgotPasswordModal = false;
    }

    private void NavigateToSignUp()
    {
        _navManager.NavigateTo("/register");
    }

    private void NavigateToReturnUrl()
    {
        var url = !string.IsNullOrEmpty(ReturnUrl) ? ReturnUrl : "/dashboard";
        _navManager.NavigateTo(url, replace: true);
    }

    private void ClearMessages()
    {
        errorMessage = "";
        successMessage = "";
    }

    private string GetErrorMessage<T>(Refit.IApiResponse<T> response)
    {
        try
        {
            return _apiResponseHandler.GetApiErrorMessage(response);
        }
        catch
        {
            return "An error occurred. Please try again.";
        }
    }

    public class PasswordResetModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";
    }
}
