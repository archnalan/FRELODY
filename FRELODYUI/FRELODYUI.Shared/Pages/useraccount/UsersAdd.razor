@page "/users/create"
@page "/users/edit/{userId}"
@inject ILogger<UsersAdd> _logger
@inject IAuthApi _authApi
@inject IUsersApi _usersApi

<PageTitle>@(IsEditMode ? "Edit User" : "Create User")</PageTitle>

<div class="w-100 d-flex justify-content-center mx-auto p-4 min-vh-100">
    <div class="w-100" style="max-width: 55rem;">
        <!-- Header -->
        <div class="d-flex align-items-center mb-4">
            <button class="btn btn-link text-decoration-none p-0 me-3" @onclick="NavigateBack">
                <i class="bi bi-arrow-left fs-3 text-primary"></i>
            </button>
            <div>
                <h3 class="mb-0">@(IsEditMode ? "Edit User Profile" : "Create New User")</h3>
                <p class="text-muted mb-0">@(IsEditMode ? "Update user information and settings" : "Add a new user to the system")</p>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(error))
        {
            <div class="alert alert-danger alert-dismissible fade show shadow-sm" role="alert">
                <i class="bi bi-exclamation-triangle me-2"></i>@error
                <button type="button" class="btn-close" @onclick="() => error = string.Empty"></button>
            </div>
        }

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success alert-dismissible fade show shadow-sm" role="alert">
                <i class="bi bi-check-circle me-2"></i>@successMessage
                <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
            </div>
        }

        <!-- Profile Information Form -->
        <div class="card border-0 shadow-sm mb-4">
            <div class="card-header bg-light border-bottom">
                <h5 class="mb-0 text-primary">
                    <i class="bi bi-person-circle me-2"></i>Profile Information
                </h5>
            </div>
            <div class="card-body p-4">
                <EditForm Model="profileModel" OnValidSubmit="HandleProfileSubmit">
                    <DataAnnotationsValidator />
                    
                    @if (IsEditMode && !string.IsNullOrEmpty(profileModel.Id))
                    {
                        <div class="mb-3">
                            <label class="form-label fw-semibold text-muted small">USER ID</label>
                            <input type="text" class="form-control" value="@profileModel.Id" readonly />
                        </div>
                    }

                    <!-- Organization (SuperAdmin only) -->
                    @if (currentUser != null && currentUser.UserType == UserType.SuperAdmin)
                    {
                        <div class="mb-4">
                            <label class="form-label fw-semibold">
                                <i class="bi bi-building me-1"></i>Organization
                            </label>
                            <select class="form-select" @bind="profileModel.TenantId">
                                <option value="">Select a company</option>
                                @foreach (var tenant in tenants)
                                {
                                    <option value="@tenant.Id">@tenant.TenantName</option>
                                }
                            </select>
                        </div>
                    }

                    <!-- Basic Information -->
                    <div class="row g-3 mb-4">
                        <div class="col-md-6">
                            <label for="firstName" class="form-label fw-semibold">
                                First Name <span class="text-danger">*</span>
                            </label>
                            <InputText id="firstName" @bind-Value="profileModel.FirstName" class="form-control" placeholder="Enter first name" />
                            <ValidationMessage For="@(() => profileModel.FirstName)" class="text-danger small" />
                        </div>
                        <div class="col-md-6">
                            <label for="lastName" class="form-label fw-semibold">
                                Last Name <span class="text-danger">*</span>
                            </label>
                            <InputText id="lastName" @bind-Value="profileModel.LastName" class="form-control" placeholder="Enter last name" />
                            <ValidationMessage For="@(() => profileModel.LastName)" class="text-danger small" />
                        </div>
                    </div>

                    <!-- Account Credentials -->
                    <div class="row g-3 mb-4">
                        <div class="col-md-6">
                            <label for="email" class="form-label fw-semibold">
                                <i class="bi bi-envelope me-1"></i>Email <span class="text-danger">*</span>
                            </label>
                            <InputText id="email" @bind-Value="profileModel.Email" class="form-control" type="email" placeholder="user@example.com" disabled="@IsEditMode" />
                            <ValidationMessage For="@(() => profileModel.Email)" class="text-danger small" />
                            @if (IsEditMode)
                            {
                                <small class="text-muted">Email cannot be changed</small>
                            }
                        </div>
                        <div class="col-md-6">
                            <label for="userName" class="form-label fw-semibold">
                                <i class="bi bi-person me-1"></i>Username <span class="text-danger">*</span>
                            </label>
                            <InputText id="userName" @bind-Value="profileModel.UserName" class="form-control" placeholder="username" />
                            <ValidationMessage For="@(() => profileModel.UserName)" class="text-danger small" />
                        </div>
                    </div>

                    <!-- Contact Information -->
                    <div class="row g-3 mb-4">
                        <div class="col-md-6">
                            <label for="phoneNumber" class="form-label fw-semibold">
                                <i class="bi bi-telephone me-1"></i>Phone Number
                            </label>
                            <InputText id="phoneNumber" @bind-Value="profileModel.PhoneNumber" class="form-control" placeholder="+1 (555) 000-0000" />
                            <ValidationMessage For="@(() => profileModel.PhoneNumber)" class="text-danger small" />
                        </div>
                        <div class="col-md-6">
                            <label for="profession" class="form-label fw-semibold">
                                <i class="bi bi-briefcase me-1"></i>Profession
                            </label>
                            <InputText id="profession" @bind-Value="profileModel.Profession" class="form-control" placeholder="e.g., Software Developer" />
                        </div>
                    </div>

                    <div class="mb-4">
                        <label for="address" class="form-label fw-semibold">
                            <i class="bi bi-geo-alt me-1"></i>Address
                        </label>
                        <InputText id="address" @bind-Value="profileModel.Address" class="form-control" placeholder="Street address, city, state, ZIP" />
                        <ValidationMessage For="@(() => profileModel.Address)" class="text-danger small" />
                    </div>

                    <div class="mb-4">
                        <label for="aboutMe" class="form-label fw-semibold">
                            <i class="bi bi-info-circle me-1"></i>About Me
                        </label>
                        <InputTextArea id="aboutMe" @bind-Value="profileModel.AboutMe" class="form-control" rows="4" placeholder="Tell us about yourself..." />
                        <ValidationMessage For="@(() => profileModel.AboutMe)" class="text-danger small" />
                    </div>

                    <!-- Roles Section -->
                    <div class="mb-4">
                        <label class="form-label fw-semibold">
                            <i class="bi bi-shield-check me-1"></i>Assigned Roles
                        </label>
                        <div class="row g-2">
                            @foreach (var role in availableRoles)
                            {
                                <div class="col-md-4">
                                    <div class="form-check p-3 border rounded hover-shadow">
                                        <input class="form-check-input" type="checkbox" 
                                               id="role_@role"
                                               checked="@(profileModel.AssignedRoles?.Contains(role) == true)"
                                               @onchange="@((ChangeEventArgs e) => ToggleRole(role, (bool)e.Value!))" />
                                        <label class="form-check-label w-100" for="role_@role">
                                            @role
                                        </label>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    <ValidationSummary class="text-danger" />

                    <div class="d-flex justify-content-end gap-2 mt-4">
                        <button type="button" class="btn btn-outline-secondary px-4" @onclick="NavigateBack" disabled="@isSubmittingProfile">
                            <i class="bi bi-x-circle me-1"></i>Cancel
                        </button>
                        <button type="submit" class="btn btn-primary px-4" disabled="@isSubmittingProfile">
                            @if (isSubmittingProfile)
                            {
                                <span class="spinner-border spinner-border-sm me-2"></span>
                            }
                            <i class="bi bi-@(isSubmittingProfile ? "" : (IsEditMode ? "save" : "plus-circle")) me-1"></i>
                            @(IsEditMode ? "Update Profile" : "Create User")
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>

        <!-- Password Section (Create Mode or Separate Update) -->
        @if (!IsEditMode)
        {
            <!-- Password for New User -->
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-light border-bottom">
                    <h5 class="mb-0 text-primary">
                        <i class="bi bi-key me-2"></i>Set Password
                    </h5>
                </div>
                <div class="card-body p-4">
                    <EditForm Model="passwordModel" OnValidSubmit="HandlePasswordSubmit">
                        <DataAnnotationsValidator />
                        
                        <div class="row g-3">
                            <div class="col-md-6">
                                <label for="password" class="form-label fw-semibold">
                                    Password <span class="text-danger">*</span>
                                </label>
                                <div class="input-group">
                                    <InputText id="password" @bind-Value="passwordModel.Password" 
                                               class="form-control" 
                                               type="@(showPassword ? "text" : "password")" 
                                               placeholder="Enter password" />
                                    <button class="btn btn-outline-secondary" type="button" @onclick="TogglePasswordVisibility">
                                        <i class="bi bi-@(showPassword ? "eye-slash" : "eye")"></i>
                                    </button>
                                </div>
                                <ValidationMessage For="@(() => passwordModel.Password)" class="text-danger small" />
                                <small class="text-muted">Minimum 4 characters</small>
                            </div>
                            <div class="col-md-6">
                                <label for="confirmPassword" class="form-label fw-semibold">
                                    Confirm Password <span class="text-danger">*</span>
                                </label>
                                <InputText id="confirmPassword" @bind-Value="confirmPassword" 
                                           class="form-control" 
                                           type="@(showPassword ? "text" : "password")" 
                                           placeholder="Re-enter password" />
                                @if (!string.IsNullOrEmpty(passwordMismatchError))
                                {
                                    <div class="text-danger small mt-1">@passwordMismatchError</div>
                                }
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        }
        else
        {
            <!-- Change Password Section (Edit Mode) -->
            <div class="card border-0 shadow-sm mb-4">
                <div class="card-header bg-light border-bottom d-flex justify-content-between align-items-center">
                    <h5 class="mb-0 text-primary">
                        <i class="bi bi-shield-lock me-2"></i>Change Password
                    </h5>
                    @if (!showPasswordFields)
                    {
                        <button class="btn btn-sm btn-outline-primary" @onclick="() => showPasswordFields = true">
                            <i class="bi bi-key me-1"></i>Change Password
                        </button>
                    }
                </div>
                @if (showPasswordFields)
                {
                    <div class="card-body p-4">
                        <EditForm Model="passwordChangeModel" OnValidSubmit="HandlePasswordChange">
                            <DataAnnotationsValidator />
                            
                            <div class="mb-3">
                                <label for="currentPassword" class="form-label fw-semibold">
                                    Current Password <span class="text-danger">*</span>
                                </label>
                                <div class="input-group">
                                    <InputText id="currentPassword" @bind-Value="passwordChangeModel.OldPassword" 
                                               class="form-control" 
                                               type="@(showPassword ? "text" : "password")" 
                                               placeholder="Enter current password" />
                                    <button class="btn btn-outline-secondary" type="button" @onclick="TogglePasswordVisibility">
                                        <i class="bi bi-@(showPassword ? "eye-slash" : "eye")"></i>
                                    </button>
                                </div>
                                <ValidationMessage For="@(() => passwordChangeModel.OldPassword)" class="text-danger small" />
                            </div>

                            <div class="row g-3 mb-4">
                                <div class="col-md-6">
                                    <label for="newPassword" class="form-label fw-semibold">
                                        New Password <span class="text-danger">*</span>
                                    </label>
                                    <InputText id="newPassword" @bind-Value="passwordChangeModel.Password" 
                                               class="form-control" 
                                               type="@(showPassword ? "text" : "password")" 
                                               placeholder="Enter new password" />
                                    <ValidationMessage For="@(() => passwordChangeModel.Password)" class="text-danger small" />
                                </div>
                                <div class="col-md-6">
                                    <label for="confirmNewPassword" class="form-label fw-semibold">
                                        Confirm New Password <span class="text-danger">*</span>
                                    </label>
                                    <InputText id="confirmNewPassword" @bind-Value="confirmNewPassword" 
                                               class="form-control" 
                                               type="@(showPassword ? "text" : "password")" 
                                               placeholder="Re-enter new password" />
                                    @if (!string.IsNullOrEmpty(passwordMismatchError))
                                    {
                                        <div class="text-danger small mt-1">@passwordMismatchError</div>
                                    }
                                </div>
                            </div>

                            <ValidationSummary class="text-danger mb-3" />

                            <div class="d-flex justify-content-end gap-2">
                                <button type="button" class="btn btn-outline-secondary" @onclick="CancelPasswordChange" disabled="@isChangingPassword">
                                    Cancel
                                </button>
                                <button type="submit" class="btn btn-primary" disabled="@isChangingPassword">
                                    @if (isChangingPassword)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                    }
                                    <i class="bi bi-shield-check me-1"></i>
                                    Update Password
                                </button>
                            </div>
                        </EditForm>
                    </div>
                }
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public string? UserId { get; set; }

    private bool IsEditMode => !string.IsNullOrEmpty(UserId);
    private bool isSubmittingProfile = false;
    private bool isChangingPassword = false;
    private bool showPasswordFields = false;
    private bool showPassword = false;
    private string error = string.Empty;
    private string successMessage = string.Empty;
    private string confirmPassword = string.Empty;
    private string confirmNewPassword = string.Empty;
    private string passwordMismatchError = string.Empty;

    private UpdateUserProfile profileModel = new();
    private CreatePasswordModel passwordModel = new();
    private ResetPasswordDto passwordChangeModel = new();
    private List<string> availableRoles = new(UserRoles.AllRoles);
    private List<TenantDto> tenants = new();
    private UserClaimsDto? currentUser = new();

    protected override async Task OnInitializedAsync()
    {
        currentUser = await _globalAuth.GetLoggedInUserAsync();
        await LoadTenants();
        
        if (IsEditMode)
        {
            await LoadUser();
        }
        else
        {
            // Initialize with default values for new user
            profileModel = new UpdateUserProfile
            {
                AssignedRoles = new List<string> { "User" }
            };
            passwordModel = new CreatePasswordModel();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (IsEditMode && !string.IsNullOrEmpty(UserId))
        {
            await LoadUser();
        }
    }

    private async Task LoadUser()
    {
        try
        {
            error = string.Empty;
            var response = await _usersApi.GetUserProfile(UserId);

            if (response.IsSuccessStatusCode && response.Content != null)
            {
                var userProfile = response.Content;
                profileModel = new UpdateUserProfile
                {
                    Id = userProfile.Id,
                    FirstName = userProfile.FirstName,
                    LastName = userProfile.LastName,
                    PhoneNumber = userProfile.PhoneNumber,
                    Address = userProfile.Address,
                    AboutMe = userProfile.AboutMe,
                    Profession = userProfile.Profession,
                    ProfilePicUrl = userProfile.ProfilePicUrl,
                    CoverPhotoUrl = userProfile.CoverPhotoUrl,
                    AssignedRoles = userProfile.AssignedRoles ?? new(),
                    TenantId = userProfile.TenantId
                };
                
                // Initialize password change model with user email
                passwordChangeModel = new ResetPasswordDto
                {
                    EmailAddress = userProfile.Email ?? string.Empty
                };
            }
            else
            {
                error = _apiResponseHandler.GetApiErrorMessage(response);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error loading user {UserId}", UserId);
            error = "Failed to load user information.";
        }
    }

    private async Task LoadTenants()
    {
        try
        {
            var response = await _tenantsApi.GetAllTenants(0, 100);
            if (response.IsSuccessStatusCode && response.Content != null)
            {
                tenants = response.Content.Data!;
            }
            else
            {
                _logger.LogWarning("Failed to load tenants {Error}", _apiResponseHandler.GetApiErrorMessage(response));
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error loading tenants");
        }
    }

    private async Task HandleProfileSubmit()
    {
        try
        {
            error = string.Empty;
            isSubmittingProfile = true;

            if (IsEditMode)
            {
                // Update existing user profile
                var response = await _usersApi.EditUserProfile(profileModel);
                
                if (response.IsSuccessStatusCode)
                {
                    successMessage = "Profile updated successfully!";
                    await Task.Delay(1500);
                    NavigateBack();
                }
                else
                {
                    error = _apiResponseHandler.GetApiErrorMessage(response);
                }
            }
            else
            {
                // Validate password for new user
                if (string.IsNullOrEmpty(passwordModel.Password))
                {
                    error = "Password is required for new users.";
                    return;
                }

                if (passwordModel.Password != confirmPassword)
                {
                    passwordMismatchError = "Passwords do not match.";
                    return;
                }

                // Create new user with password
                var createUserDto = new CreateUserDto
                {
                    FirstName = profileModel.FirstName,
                    LastName = profileModel.LastName,
                    Email = profileModel.Email ?? string.Empty,
                    UserName = profileModel.UserName ?? string.Empty,
                    Password = passwordModel.Password,
                    PhoneNumber = profileModel.PhoneNumber,
                    Address = profileModel.Address,
                    AboutMe = profileModel.AboutMe,
                    ProfilePicUrl = profileModel.ProfilePicUrl,
                    CoverPhotoUrl = profileModel.CoverPhotoUrl,
                    AssignedRoles = profileModel.AssignedRoles,
                    TenantId = profileModel.TenantId
                };
                
                var response = await _authApi.CreateUser(createUserDto);
                
                if (response.IsSuccessStatusCode)
                {
                    successMessage = "User created successfully!";
                    await Task.Delay(1500);
                    NavigateBack();
                }
                else
                {
                    error = _apiResponseHandler.GetApiErrorMessage(response);
                }
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error saving user profile");
            error = "An error occurred while saving the profile.";
        }
        finally
        {
            isSubmittingProfile = false;
            StateHasChanged();
        }
    }

    private async Task HandlePasswordSubmit()
    {
        // This is handled in HandleProfileSubmit for new users
        await Task.CompletedTask;
    }

    private async Task HandlePasswordChange()
    {
        try
        {
            error = string.Empty;
            passwordMismatchError = string.Empty;
            isChangingPassword = true;

            // Validate password confirmation
            if (passwordChangeModel.Password != confirmNewPassword)
            {
                passwordMismatchError = "New passwords do not match.";
                return;
            }

            var response = await _authApi.ResetPassword(passwordChangeModel);
            
            if (response.IsSuccessStatusCode)
            {
                successMessage = "Password changed successfully!";
                showPasswordFields = false;
                passwordChangeModel = new ResetPasswordDto { EmailAddress = passwordChangeModel.EmailAddress };
                confirmNewPassword = string.Empty;
            }
            else
            {
                error = _apiResponseHandler.GetApiErrorMessage(response);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error changing password for user {UserId}", UserId);
            error = "An error occurred while changing the password.";
        }
        finally
        {
            isChangingPassword = false;
            StateHasChanged();
        }
    }

    private void CancelPasswordChange()
    {
        showPasswordFields = false;
        passwordChangeModel = new ResetPasswordDto { EmailAddress = passwordChangeModel.EmailAddress };
        confirmNewPassword = string.Empty;
        passwordMismatchError = string.Empty;
    }

    private void TogglePasswordVisibility()
    {
        showPassword = !showPassword;
    }

    private void ToggleRole(string role, bool isSelected)
    {
        profileModel.AssignedRoles ??= new List<string>();
        
        if (isSelected)
        {
            if (!profileModel.AssignedRoles.Contains(role))
            {
                profileModel.AssignedRoles.Add(role);
            }
        }
        else
        {
            profileModel.AssignedRoles.Remove(role);
        }
    }

    private async void NavigateBack()
    {
        await JsRt.InvokeVoidAsync("goBack");
    }

    // Helper class for password creation
    public class CreatePasswordModel
    {
        [Required]
        [MinLength(4, ErrorMessage = "Password must be at least 4 characters")]
        public string Password { get; set; } = string.Empty;
    }
}

