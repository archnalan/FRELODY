
<div class="card shadow-sm">
    <EditForm Model="@editModel" OnValidSubmit="@HandleSubmit" FormName="profileForm">
        <DataAnnotationsValidator />
        
        <!-- Cover Photo Section -->
        <div class="position-relative" style="height: 200px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
            @if (!string.IsNullOrEmpty(coverPreview))
            {
                <img src="@coverPreview" alt="Cover Photo" class="w-100 h-100 object-fit-cover" />
            }
            
            <!-- Cover Photo Upload -->
            <div class="position-absolute bottom-0 end-0 m-3">
                <label class="btn btn-outline-light btn-sm" for="coverUpload">
                    <i class="bi bi-camera me-1"></i>Change Cover
                </label>
                <InputFile id="coverUpload" OnChange="@HandleCoverUpload" accept="image/*" style="display: none;" />
            </div>
        </div>

        <!-- Profile Info Section -->
        <div class="card-body">
            <div class="row align-items-start">
                <div class="col-auto">
                    <!-- Profile Picture -->
                    <div class="position-relative">
                        @if (!string.IsNullOrEmpty(profilePreview))
                        {
                            <img src="@profilePreview" alt="Profile" 
                                 class="rounded-circle border border-4 border-white shadow" 
                                 style="width: 100px; height: 100px; object-fit: cover; margin-top: -50px;" />
                        }
                        else
                        {
                            <div class="rounded-circle border border-4 border-white shadow bg-primary d-flex align-items-center justify-content-center text-white fw-bold" 
                                 style="width: 100px; height: 100px; margin-top: -50px; font-size: 2rem;">
                                @(editModel.FirstName?.FirstOrDefault())@(editModel.LastName?.FirstOrDefault())
                            </div>
                        }
                        
                        <!-- Profile Picture Upload -->
                        <label class="btn btn-primary btn-sm rounded-circle position-absolute bottom-0 end-0" 
                               for="profileUpload" style="width: 30px; height: 30px;">
                            <i class="bi bi-camera" style="font-size: 0.7rem;"></i>
                        </label>
                        <InputFile id="profileUpload" OnChange="@HandleProfileUpload" accept="image/*" style="display: none;" />
                    </div>
                </div>
                
                <div class="col">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">First Name</label>
                            <InputText @bind-Value="editModel.FirstName" class="form-control" />
                            <ValidationMessage For="@(() => editModel.FirstName)" />
                        </div>
                        
                        <div class="col-md-6">
                            <label class="form-label">Last Name</label>
                            <InputText @bind-Value="editModel.LastName" class="form-control" />
                            <ValidationMessage For="@(() => editModel.LastName)" />
                        </div>
                        
                        <div class="col-12">
                            <label class="form-label">About Me</label>
                            <InputTextArea @bind-Value="editModel.AboutMe" class="form-control" rows="3" 
                                          placeholder="Tell us about yourself..." />
                            <ValidationMessage For="@(() => editModel.AboutMe)" />
                        </div>
                        
                        <div class="col-12">
                            <label class="form-label">Address</label>
                            <InputText @bind-Value="editModel.Address" class="form-control" 
                                      placeholder="Your location" />
                            <ValidationMessage For="@(() => editModel.Address)" />
                        </div>
                    </div>
                    
                    <!-- Action Buttons -->
                    <div class="d-flex justify-content-end gap-2 mt-3">
                        <button type="button" class="btn btn-outline-secondary" @onclick="OnCancel" disabled="@IsSubmitting">
                            Cancel
                        </button>
                        <button type="submit" class="btn btn-primary" disabled="@IsSubmitting">
                            @if (IsSubmitting)
                            {
                                <i class="spinner-border spinner-border-sm me-2"></i>
                            }
                            Save Changes
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
</div>

@code {
    [Parameter] public UpdateUserProfileOutDto? UserProfile { get; set; }
    [Parameter] public EventCallback<UpdateUserProfile> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public bool IsSubmitting { get; set; }

    private UpdateUserProfile editModel = new();
    private string profilePreview = "";
    private string coverPreview = "";

    protected override void OnInitialized()
    {
        if (UserProfile != null)
        {
            editModel = new UpdateUserProfile
            {
                Id = UserProfile.Id,
                FirstName = UserProfile.FirstName,
                LastName = UserProfile.LastName,
                AboutMe = UserProfile.AboutMe,
                Address = UserProfile.Address,
                ProfilePicUrl = UserProfile.ProfilePicUrl,
                CoverPhotoUrl = UserProfile.CoverPicUrl,
                // These would need to be populated from the actual user data
                Email = "", // UserProfile.Email,
                UserName = UserProfile.UserName,
                Password = "", // This should be handled separately
                PhoneNumber = "" // UserProfile.PhoneNumber
            };
            
            profilePreview = UserProfile.ProfilePicUrl ?? "";
            coverPreview = UserProfile.CoverPicUrl ?? "";
        }
    }

    private async Task HandleProfileUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null) return;

        try
        {
            var buffer = new byte[file.Size];
            await file.OpenReadStream(maxAllowedSize: 5 * 1024 * 1024).ReadAsync(buffer);
            profilePreview = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
            editModel.ProfilePicUrl = profilePreview;
        }
        catch (Exception)
        {
            // Handle upload error
        }
    }

    private async Task HandleCoverUpload(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null) return;

        try
        {
            var buffer = new byte[file.Size];
            await file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024).ReadAsync(buffer);
            coverPreview = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
            editModel.CoverPhotoUrl = coverPreview;
        }
        catch (Exception)
        {
            // Handle upload error
        }
    }

    private async Task HandleSubmit()
    {
        await OnSave.InvokeAsync(editModel);
    }
}