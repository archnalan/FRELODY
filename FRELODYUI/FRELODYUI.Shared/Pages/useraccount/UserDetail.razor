@page "/users/{UserId}"
@inject ILogger<UserDetail> _logger
@inject IUsersApi _usersApi

<PageTitle>User Details</PageTitle>

<div class="w-100 d-flex justify-content-center mx-auto p-6 bg-body">
    @if (isLoading)
    {
        <div class="mt-4 text-center">
            <div class="spinner-border text-primary" role="status"></div>
            <p>Loading user details...</p>
        </div>
    }
    else if (user != null)
    {
        <div class="w-100 h-100 shadow-lg border border-light rounded rounded-3 my-4 px-4" style="max-width:55rem;">
            <div class="d-flex gap-2 my-3 me-2" style="justify-content:space-between">
                <div class="ms-2">
                    <button class="btn btn-outline-primary me-2" @onclick="GoBack">
                        <i class="bi bi-arrow-left"></i>
                        Back
                    </button>
                </div>
                <div class="d-flex gap-2 me-2">
                    @if (!string.IsNullOrEmpty(user.TenantId))
                    {
                        <button class="btn btn-outline-primary" @onclick="NavigateToEdit">
                            <i class="bi bi-pencil-square"></i>
                            Edit Profile
                        </button>
                        <button class="btn btn-outline-danger" @onclick="ConfirmDisableUser">
                            <i class="bi bi-person-x"></i>
                            Disable
                        </button>
                    }
                </div>
            </div>

            <!-- Profile Header Section -->
            <div class="position-relative mb-5">
                @if (!string.IsNullOrEmpty(user.CoverPhotoUrl))
                {
                    <div class="w-100 rounded-3 overflow-hidden" style="height: 200px;">
                        <img src="@user.CoverPhotoUrl" alt="Cover" class="w-100 h-100" style="object-fit: cover;" />
                    </div>
                }
                else
                {
                    <div class="w-100 rounded-3 bg-primary bg-opacity-10" style="height: 200px;"></div>
                }
                
                <div class="position-absolute" style="bottom: -50px; left: 50%; transform: translateX(-50%);">
                    @if (!string.IsNullOrEmpty(user.ProfilePicUrl))
                    {
                        <img src="@user.ProfilePicUrl" alt="Profile" 
                             class="rounded-circle border border-5 border-white shadow" 
                             style="width: 120px; height: 120px; object-fit: cover;" />
                    }
                    else
                    {
                        <div class="rounded-circle bg-primary text-white d-flex align-items-center justify-content-center border border-5 border-white shadow" 
                             style="width: 120px; height: 120px; font-size: 2.5rem; font-weight: bold;">
                            @GetInitials()
                        </div>
                    }
                </div>
            </div>

            <!-- User Info Section -->
            <div class="text-center mt-5 pt-4 mb-4">
                <h3 class="fw-bold text-black mb-1">
                    @user.FirstName @user.LastName
                </h3>
                <p class="text-muted mb-2">@@@user.UserName</p>
                @if (!string.IsNullOrEmpty(user.Profession))
                {
                    <p class="text-primary fw-semibold mb-0">@user.Profession</p>
                }
            </div>

            <!-- User Details Grid -->
            <div class="row g-4 mb-4">
                <!-- Contact Information -->
                <div class="col-md-6">
                    <div class="card h-100 border-0 shadow-sm">
                        <div class="card-body">
                            <h5 class="card-title text-primary mb-3">
                                <i class="bi bi-person-vcard me-2"></i>Contact Information
                            </h5>
                            
                            @if (!string.IsNullOrEmpty(user.Email))
                            {
                                <div class="d-flex align-items-center mb-3">
                                    <i class="bi bi-envelope text-muted me-3"></i>
                                    <div>
                                        <small class="text-muted d-block">Email</small>
                                        <span>@user.Email</span>
                                    </div>
                                </div>
                            }
                            
                            @if (!string.IsNullOrEmpty(user.PhoneNumber))
                            {
                                <div class="d-flex align-items-center mb-3">
                                    <i class="bi bi-telephone text-muted me-3"></i>
                                    <div>
                                        <small class="text-muted d-block">Phone</small>
                                        <span>@user.PhoneNumber</span>
                                    </div>
                                </div>
                            }
                            
                            @if (!string.IsNullOrEmpty(user.Address))
                            {
                                <div class="d-flex align-items-start mb-3">
                                    <i class="bi bi-geo-alt text-muted me-3 mt-1"></i>
                                    <div>
                                        <small class="text-muted d-block">Address</small>
                                        <span>@user.Address</span>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>

                <!-- Account Information -->
                <div class="col-md-6">
                    <div class="card h-100 border-0 shadow-sm">
                        <div class="card-body">
                            <h5 class="card-title text-primary mb-3">
                                <i class="bi bi-shield-check me-2"></i>Account Information
                            </h5>
                            
                            @if (user.AssignedRoles?.Any() == true)
                            {
                                <div class="d-flex align-items-start mb-3">
                                    <i class="bi bi-person-badge text-muted me-3 mt-1"></i>
                                    <div>
                                        <small class="text-muted d-block">Roles</small>
                                        <div class="d-flex flex-wrap gap-1">
                                            @foreach (var role in user.AssignedRoles)
                                            {
                                                <span class="badge bg-primary bg-opacity-10 text-primary">@role</span>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                            
                            <div class="d-flex align-items-center mb-3">
                                <i class="bi bi-music-note-list text-muted me-3"></i>
                                <div>
                                    <small class="text-muted d-block">Total Songs</small>
                                    <span class="fw-semibold">@user.TotalSongs</span>
                                </div>
                            </div>
                            
                            @if (!string.IsNullOrEmpty(user.TenantId))
                            {
                                <div class="d-flex align-items-center mb-3">
                                    <i class="bi bi-building text-muted me-3"></i>
                                    <div>
                                        <small class="text-muted d-block">Organization</small>
                                        <span class="text-truncate d-inline-block" style="max-width: 200px;">@user.TenantId</span>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- About Me Section -->
            @if (!string.IsNullOrEmpty(user.AboutMe))
            {
                <div class="card border-0 shadow-sm mb-4">
                    <div class="card-body">
                        <h5 class="card-title text-primary mb-3">
                            <i class="bi bi-info-circle me-2"></i>About
                        </h5>
                        <p class="mb-0 text-muted">@user.AboutMe</p>
                    </div>
                </div>
            }

            @if (!string.IsNullOrEmpty(error))
            {
                <div class="alert alert-danger alert-dismissible fade show" role="alert">
                    <i class="bi bi-exclamation-triangle me-2"></i>@error
                    <button type="button" class="btn-close" @onclick="() => error = string.Empty"></button>
                </div>
            }
        </div>
    }
</div>

<DialogModal IsVisible="_modalService.IsModalVisible"
             Modal="@_modalService.CurrentModal"
             OnCloseModal="CloseModal"
             OnConfirmModal="ConfirmModal" />

@code {
    [Parameter] public string UserId { get; set; } = string.Empty;

    private UpdateUserProfileOutDto? user;
    private bool isLoading = true;
    private string error = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(UserId))
            await LoadUserDetails();
    }

    private async Task LoadUserDetails()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var response = await _usersApi.GetUserProfile(UserId);
            if (response.IsSuccessStatusCode)
            {
                user = response.Content;
            }
            else
            {
                var errorMessage = _apiResponseHandler.GetApiErrorMessage(response);
                error = errorMessage;
                _modalService.Show(new ModalOptionDto
                {
                    Title = "Error",
                    Message = errorMessage,
                    ButtonText = "Close",
                    OptionType = OptionType.Error,
                    Context = new ModalContext
                    {
                        ActionType = "LoadUser",
                        Data = "Failed to load user with ID: " + UserId
                    }
                });
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error loading user details for ID: {UserId}", UserId);
            error = "An unexpected error occurred while loading user details.";
            _modalService.Show(new ModalOptionDto
            {
                Title = "Error",
                Message = "An unexpected error occurred while loading user details.",
                ButtonText = "Close",
                OptionType = OptionType.Error,
                Context = new ModalContext
                {
                    ActionType = "LoadUser",
                    Data = ex.Message
                }
            });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private string GetInitials()
    {
        if (user == null) return "";
        var firstInitial = !string.IsNullOrEmpty(user.FirstName) ? user.FirstName[0].ToString() : "";
        var lastInitial = !string.IsNullOrEmpty(user.LastName) ? user.LastName[0].ToString() : "";
        return (firstInitial + lastInitial).ToUpper();
    }

    private void NavigateToEdit()
    {
        if (!string.IsNullOrEmpty(UserId))
        {
            _navManager.NavigateTo($"/users/edit/{UserId}");
        }
    }

    private async Task GoBack()
    {
        await JsRt.InvokeVoidAsync("goBack");
    }

    private void ConfirmDisableUser()
    {
        if (!string.IsNullOrEmpty(UserId))
        {
            _modalService.Show(new ModalOptionDto
            {
                Title = "Disable User",
                Message = $"Are you sure you want to disable {user?.FirstName} {user?.LastName}?",
                DangerText = "This action will prevent the user from accessing the system.",
                ButtonText = "Disable",
                OptionType = OptionType.Confirmation,
                Context = new ModalContext { ActionType = "DisableUser", Data = UserId }
            });
        }
    }

    private async Task DisableUser()
    {
        try
        {
            var response = await _usersApi.DisableUser(UserId);
            if (response.IsSuccessStatusCode)
            {
                _modalService.Show(new ModalOptionDto
                {
                    Title = "Success",
                    Message = "User disabled successfully.",
                    ButtonText = "OK",
                    OptionType = OptionType.Success
                });

                await Task.Delay(1500);
                _navManager.NavigateTo("/users");
            }
            else
            {
                var errorMessage = _apiResponseHandler.GetApiErrorMessage(response);
                _modalService.Show(new ModalOptionDto
                {
                    Title = "Error",
                    Message = $"Failed to disable user. {errorMessage}",
                    ButtonText = "Close",
                    OptionType = OptionType.Error
                });
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error disabling user {UserId}", UserId);
            _modalService.Show(new ModalOptionDto
            {
                Title = "Error",
                Message = "An unexpected error occurred while disabling the user.",
                ButtonText = "Close",
                OptionType = OptionType.Error
            });
        }
    }

    private async Task ConfirmModal()
    {
        if (_modalService.CurrentModal?.Context?.ActionType == "DisableUser")
        {
            await DisableUser();
        }
        await CloseModal();
    }

    private async Task CloseModal()
    {
        await Task.Delay(100);
        _modalService.Close();
        StateHasChanged();
    }
}