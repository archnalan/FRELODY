@using FRELODYSHRD.Dtos.SubDtos
@inject ILogger<SongRating> _logger

@if (isLoading)
{
    <div class="text-center my-2">
        <div class="spinner-border text-primary spinner-border-sm" role="status"></div>
    </div>
}
else
{
    @* Summary *@
    @if (ShowSummary && ratingInfo is not null && ratingInfo.TotalRatings > 0 && ratingInfo.AggregateRating.HasValue)
    {
        <div class="text-center mb-2">
            @for (int i = 1; i <= 5; i++)
            {
                var value = i;
                if (ratingInfo.AggregateRating.Value >= value)
                {
                    <i class="bi bi-star-fill text-warning"></i>
                }
                else if (ratingInfo.AggregateRating.Value >= value - 0.5m)
                {
                    <i class="bi bi-star-half text-warning"></i>
                }
                else
                {
                    <i class="bi bi-star text-warning"></i>
                }
            }
            <span class="ms-2 text-muted small">
                @ratingInfo.AggregateRating.Value.ToString("0.0") (@ratingInfo.TotalRatings)
            </span>
        </div>
    }

    @* Panel *@
    @if (ShowPanel)
    {
        @if (hasUserRated)
        {
            @* Read-only state: User has already rated *@
            <div class="border-top bg-light p-3 text-center">
                <div class="mb-2 text-success">
                    <i class="bi bi-check-circle-fill me-1"></i>
                    Thank you for rating this song!
                </div>
                
                <div class="mb-1 text-muted small">Your rating:</div>
                <div class="d-flex justify-content-center my-2">
                    @for (int i = 1; i <= 5; i++)
                    {
                        var rating = i;
                        <span class="position-relative d-inline-block" style="width:2rem;">
                            @if (selectedRating >= rating)
                            {
                                <i class="bi bi-star-fill text-warning fs-4"></i>
                            }
                            else if (selectedRating >= rating - 0.5m)
                            {
                                <i class="bi bi-star-half text-warning fs-4"></i>
                            }
                            else
                            {
                                <i class="bi bi-star text-warning fs-4"></i>
                            }
                        </span>
                    }
                </div>
                <div class="text-muted small">
                    @selectedRating.ToString("0.0") stars
                </div>
            </div>
        }
        else if (canRate)
        {
            @* Interactive rating state *@
            <div class="border-top bg-light p-3 text-center">
                <div class="mb-1 text-muted">
                    @(string.IsNullOrEmpty(ratingInfo?.Reason) ? "Rate this song" : ratingInfo!.Reason)
                </div>

                <div class="d-flex justify-content-center my-2">
                    @for (int i = 1; i <= 5; i++)
                    {
                        var rating = i;
                        <span class="position-relative d-inline-block"
                              style="width:2rem; cursor:pointer;"
                              @onclick="() => ToggleRating(rating)">
                            @if (selectedRating >= rating)
                            {
                                <i class="bi bi-star-fill text-warning fs-3"></i>
                            }
                            else if (selectedRating >= rating - 0.5m)
                            {
                                <i class="bi bi-star-half text-warning fs-3"></i>
                            }
                            else
                            {
                                <i class="bi bi-star text-warning fs-3"></i>
                            }
                        </span>
                    }
                </div>

                <div class="mt-2 text-muted small">
                    @(selectedRating > 0 ? $"Rating: {selectedRating:0.0}" : "Click a star to rate (single = half, double = full)")
                </div>

                <div class="mt-3">
                    <button class="btn btn-primary btn-sm"
                            disabled="@(isSubmitting || selectedRating == 0)"
                            @onclick="SubmitAsync">
                        @(isSubmitting ? "Submitting..." : "Submit rating")
                    </button>
                </div>
                @if (!string.IsNullOrEmpty(error))
                {
                    <div class="text-danger mt-2 small">@error</div>
                }
                @if (!string.IsNullOrEmpty(info))
                {
                    <div class="text-success mt-2 small">@info</div>
                }
            </div>
        }
        else if (!string.IsNullOrEmpty(ratingInfo?.Reason))
        {
            @* Cannot rate - show reason *@
            <div class="border-top bg-white p-3 text-center text-muted small">
                @ratingInfo.Reason
            </div>
        }
    }
}

@code {
    [Parameter] public string SongId { get; set; } = string.Empty;
    [Parameter] public bool ShowSummary { get; set; } = true;
    [Parameter] public bool ShowPanel { get; set; } = true;
    [Parameter] public EventCallback<decimal> OnRated { get; set; }

    private bool isLoading = true;
    private bool isSubmitting = false;
    private bool canRate = false;
    private bool hasUserRated = false;
    private CanRateDto? ratingInfo;
    private decimal selectedRating = 0;

    private string? error;
    private string? info;

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrWhiteSpace(SongId))
        {
            error = "Song ID is required.";
            isLoading = false;
            return;
        }
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        isLoading = true;
        error = null;
        info = null;

        try
        {
            var resp = await _songsApi.CanUserRateSong(SongId);
            if (resp.IsSuccessStatusCode)
            {
                ratingInfo = resp.Content;
                canRate = ratingInfo?.CanRate == true;
                selectedRating = ratingInfo?.YourRating ?? 0;
                hasUserRated = selectedRating > 0; // User has already rated if they have a rating
            }
            else
            {
                canRate = false;
                hasUserRated = false;
                error = $"Unable to load rating info (status {resp.StatusCode}).";
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error loading rating info for {SongId}", SongId);
            error = "An error occurred while loading rating info.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ToggleRating(int starIndex)
    {
        // Only allow rating changes if user hasn't rated yet
        if (hasUserRated) return;

        // If we're clicking the same star again
        if (selectedRating == starIndex - 0.5m)
        {
            // Upgrade to full star
            selectedRating = starIndex;
        }
        else if (selectedRating == starIndex)
        {
            // Optional: toggle back to half if clicking full again
            selectedRating = starIndex - 0.5m;
        }
        else
        {
            // Otherwise, start with half star on the new index
            selectedRating = starIndex - 0.5m;
        }
    }

    private async Task SubmitAsync()
    {
        if (selectedRating <= 0 || string.IsNullOrWhiteSpace(SongId) || hasUserRated)
            return;

        try
        {
            error = null;
            info = null;
            isSubmitting = true;

            var resp = await _songsApi.RateSong(SongId, selectedRating);
            if (resp.IsSuccessStatusCode && resp.Content == true)
            {
                // Mark that user has now rated
                hasUserRated = true;
                canRate = false;

                // Refresh rating info to get updated aggregate data
                var cr = await _songsApi.CanUserRateSong(SongId);
                if (cr.IsSuccessStatusCode)
                {
                    ratingInfo = cr.Content;
                }

                // Clear any info messages since we're now in read-only mode
                info = null;

                if (OnRated.HasDelegate)
                    await OnRated.InvokeAsync(selectedRating);
            }
            else
            {
                error = "Failed to submit rating.";
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Submit rating failed for {SongId}", SongId);
            error = "An error occurred while submitting your rating.";
        }
        finally
        {
            isSubmitting = false;
        }
    }
}
