
<div class="modal fade @ModalClass" tabindex="-1" role="dialog" style="display:@ModalDisplay" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" style="z-index:1055">
        <div class="modal-content px-5">
            <div class="modal-body border-0 p-0 mt-4">
                <div class="container p-2 text-center">
                    <div class="row mb-3 justify-content-center">
                        @switch (Modal.OptionType)
                        {
                            case OptionType.Success:
                                <i class="bi bi-patch-check-fill text-success" style="font-size: 3.5rem;"></i>
                                break;
                            case OptionType.Warning:
                                <i class="bi bi-exclamation-triangle-fill text-warning" style="font-size: 3.5rem;"></i>
                                break;
                            case OptionType.Error:
                                <i class="bi bi-x-octagon-fill text-danger" style="font-size: 3.5rem;"></i>
                                break;
                            default:
                                <i class="bi bi-info-circle-fill text-info" style="font-size: 3.5rem;"></i>
                                break;
                        }
                    </div>
                    <div class="row mb-2">
                        <h5>@Modal.Title</h5>
                    </div>
                    <div class="row mb-3">
                        <h6>@Modal.Message</h6>
                    </div>
                </div>
            </div>
            <div class="modal-footer @(HasSingleButton ? "justify-content-center" : "justify-content-between") border-0 p-0 mb-3">
                @if (Modal.OptionType == OptionType.Success 
                 || Modal.OptionType == OptionType.Error
                 || Modal.OptionType == OptionType.Warning)
                {
                    <button class="btn btn-primary" style="width:7rem" @onclick="CloseModal">@Modal.ButtonText</button>
                }                
                else
                {

                    <button class="btn btn-outline-primary" style="width:7rem" @onclick="CloseModal">Cancel</button>
                    <button class="btn btn-primary" style="width:7rem" @onclick="CloseModal">@(Modal.ButtonText ?? "OK")</button>
                }
            </div>
        </div>
    </div>   
</div>
@if (ShowBackdrop)
{
    <div class="w-100 h-100 border modal-backdrop fade show" style="z-index:1000" data-dismiss="modal" @onclick="CloseModal"></div>
}

@code {
    [Parameter]
    public ModalOptionDto Modal { get; set; } = default!;

    [Parameter]
    public string ModalDisplay { get; set; } = "none;";

    [Parameter]
    public string ModalClass { get; set; } = "";

    [Parameter]
    public bool ShowBackdrop { get; set; } = false;

    [Parameter]
    public EventCallback OnCloseModal { get; set; }

    [Parameter]
    public EventCallback OnConfirmModal { get; set; }

    private bool HasSingleButton =>
        Modal.OptionType == OptionType.Success 
        || Modal.OptionType == OptionType.Error
        || Modal.OptionType == OptionType.Warning;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
        }
        return base.OnAfterRenderAsync(firstRender);
    }

    private async Task CloseModal()
    {
        ShowBackdrop = false;
        if(OnCloseModal.HasDelegate)
            await OnCloseModal.InvokeAsync();
    }

    private async Task ConfirmOption()
    {
        if(OnConfirmModal.HasDelegate)
            await OnConfirmModal.InvokeAsync();
    }

}