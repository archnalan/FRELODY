@*@typeparam T*@

<div class="modal fade @(IsVisible ? "show" : "")"
     style="display: @(IsVisible ? "block" : "none");background-color: rgba(0,0,0,0.3);"
     tabindex="-1"
     role="dialog"
     aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" style="z-index:1055">
        <div class="modal-content text-center px-5">
            <div class="modal-body border-0 p-0 mt-4">
                <div class="container p-2">
                    <div class="row mb-3 justify-content-center">
                        @switch (Modal.OptionType)
                        {
                            case OptionType.Success:
                                <i class="bi bi-patch-check-fill text-success" style="font-size: 3.5rem;"></i>
                                break;
                            case OptionType.Warning:
                                <i class="bi bi-exclamation-triangle-fill text-warning" style="font-size: 3.5rem;"></i>
                                break;
                            case OptionType.Error:
                                <i class="bi bi-x-octagon-fill text-danger" style="font-size: 3.5rem;"></i>
                                break;
                            case OptionType.Feedback:
                                <i class="bi bi-chat-square-text-fill text-info" style="font-size: 3.5rem;"></i>
                                break;
                            default:
                                <i class="bi bi-info-circle-fill text-info" style="font-size: 3.5rem;"></i>
                                break;
                        }
                    </div>
                    <div class="row">
                        <h5 class="mb-3">@Modal.Title</h5>
                        <h6 class="mb-2">@Modal.SubTitle</h6>
                        <p class="m-0">@Modal.Message</p>
                        <p class="m-0 text-danger">@Modal.DangerText</p>
                    </div>
                </div>
            </div>
            <div class="modal-footer justify-content-center gap-4 border-0 mb-3">
                @if (Modal.OptionType == OptionType.Confirmation)
                {
                    <button class="btn btn-outline-primary"
                            style="width:7rem"
                            @onclick="CloseModal">
                        Cancel
                    </button>
                    <button class="btn btn-primary"
                            style="width:7rem"
                            @onclick="ConfirmOption">
                        @(Modal.ButtonText ?? "Confirm")
                    </button>
                }
                else
                {
                    <button type="button"
                            class="@GetOkButtonClass()"
                            @onclick="ConfirmOption">
                        @(Modal.ButtonText ?? "OK")
                    </button>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public ModalOptionDto Modal { get; set; } = default!;
    [Parameter] public EventCallback OnCloseModal { get; set; }
    [Parameter] public EventCallback OnConfirmModal { get; set; }
    //[Parameter] public T? Data { get; set; }

    private string GetOkButtonClass() => Modal.OptionType switch
    {
        OptionType.Error or OptionType.Warning => "btn btn-outline-danger",
        _ => "btn btn-outline-primary"
    };

    private async Task CloseModal()
    {
        if (OnCloseModal.HasDelegate)
            await OnCloseModal.InvokeAsync();
    }

    private async Task ConfirmOption()
    {
        if (OnConfirmModal.HasDelegate)
            await OnConfirmModal.InvokeAsync();
    }
}