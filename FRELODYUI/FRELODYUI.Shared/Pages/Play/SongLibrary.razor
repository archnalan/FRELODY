@page "/songs-library"
@using Microsoft.AspNetCore.Components.Web.Virtualization
@inject ILogger<SongLibrary> _logger
@implements IDisposable

<div class="container-fluid vh-100" style="max-width:55rem;justify-self:center">
    <div class="container text-center mt-3" >
        @if (ShowSearch)
        {
            <div class= "text-center top-0" style = "z-index:5" >
                <h3 class="m-3">Library</h3>
                <div class="rounded-3 border shadow p-3 mb-2" style="min-width:15rem">
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="d-flex w-50 position-relative me-3">
                            <input type="text"
                                   class="form-control h-12 ps-5 rounded-3"
                                   placeholder="Search..."
                                   @bind-value="searchQuery"
                                   @bind-value:event="oninput"
                                   @bind-value:after="()=>OnSearchInput()" />
                            <button class="btn btn-link position-absolute border-0 start-0 top-0 h-100">
                                <i class="bi bi-search"></i>
                            </button>
                        </div>
                        <button type="button" 
                                class="btn btn-outline-primary"
                                data-bs-toggle="tooltip"
                                title="Add a Song"
                                @onclick="AddSong">
                            <span class="me-2 d-none d-md-inline">Add Song</span> 
                            <i class="bi bi-file-earmark-plus"></i>
                        </button>
                    </div>
                </div>
            </div> 
        }

        @if (isInSelectionMode && !string.IsNullOrEmpty(currentUserId))
        {
            <div class="toast-container position-absolute text-success top-0 end-0 p-3" style="z-index: 11">
                <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
                    <div class="toast-body row">
                        <div class="col-9">
                            @if (selectedSongIds.Count == 1)
                            {
                                <i class="bi bi-check me-2"></i>
                            }
                            else if (selectedSongIds.Count > 1)
                            {
                                <i class="bi bi-check-all me-2"></i>
                            }
                            <strong>@selectedSongIds.Count</strong> song@(selectedSongIds.Count != 1 ? "s" : "") selected
                        </div>
                        <div class="col-3">
                            <button type="button" class="ms-auto btn-close end-0" @onclick="ExitSelectionMode" aria-label="Close"></button>
                        </div>
                    </div>
                </div>
            </div>
        }
        
        <div class="d-flex flex-column justify-content-center align-items-center flex-md-row my-3 gap-2">
            <div class="d-flex align-items-center bg-light border rounded rounded-3 gap-3 p-2 shadow">
                <button class="btn @(viewMode == ViewMode.All ? "btn-outline-primary" : "btn-outline-secondary")"
                        data-bs-toggle="tooltip"
                        title="View All Songs"
                        @onclick="() => SetViewMode(ViewMode.All)" style="width:3.5rem">
                    @if (viewMode == ViewMode.All)
                    {
                        <i class="bi bi-collection-play-fill"></i>
                    }
                    else
                    {
                        <i class="bi bi-collection-play"></i>
                    }
                </button>
                <button class="btn @(viewMode == ViewMode.Catalogue ? "btn-outline-primary" : "btn-outline-secondary")"
                        data-bs-toggle="tooltip"
                        title="View by Catalogue"
                        @onclick="() => SetViewMode(ViewMode.Catalogue)" style="width:3.5rem">
                    @if (viewMode == ViewMode.Catalogue)
                    {
                        <i class="bi bi-journals"></i>
                    }
                    else
                    {
                        <i class="bi bi-journal"></i>
                    }
                </button>
                @if (!string.IsNullOrEmpty(currentUserId))
                {
                    <button class="btn @(viewMode == ViewMode.Favorites ? "btn-outline-primary" : "btn-outline-secondary")"
                    data-bs-toggle="tooltip"
                    title="View Favorites"
                    @onclick="() => SetViewMode(ViewMode.Favorites)" style="width:3.5rem">
                        @if (viewMode == ViewMode.Favorites)
                        {
                            <i class="bi bi-heart-fill"></i>
                        }
                        else
                        {
                            <i class="bi bi-heart"></i>
                        }
                    </button>
                    <button class="btn @(viewMode == ViewMode.Playlists ? "btn-outline-primary" : "btn-outline-secondary")"
                        data-bs-toggle="tooltip"
                        title="View Playlists"
                        @onclick="() => SetViewMode(ViewMode.Playlists)" style="width:3.5rem">
                        <i class="bi bi-music-note-list"></i>
                    </button>
                }
            </div>
            <div class="d-flex align-items-center bg-light border rounded rounded-3 gap-3 p-2 shadow">
                <button class="btn @(activeView == ActiveView.Expanded ? "btn-outline-primary" : "btn-outline-secondary")"
                        data-bs-toggle="tooltip"
                        title="Expanded View"
                        @onclick="() => SetActiveView(ActiveView.Expanded)" style="width:3.5rem">
                    @if (activeView == ActiveView.Expanded)
                    {
                        <i class="bi bi-list"></i>
                    }
                    else
                    {
                        <i class="bi bi-list-task"></i>
                    }
                </button>
                <button class="btn @(activeView == ActiveView.Collapsed ? "btn-outline-primary" : "btn-outline-secondary")"
                        data-bs-toggle="tooltip"
                        title="Collapsed View"
                        @onclick="() => SetActiveView(ActiveView.Collapsed)" style="width:3.5rem">
                    @if (activeView == ActiveView.Collapsed)
                    {
                        <i class="bi bi-grid-fill"></i>
                    }
                    else
                    {
                        <i class="bi bi-grid"></i>
                    }
                </button>
                @if (selectedSongIds.Any())
                {
                    <button class="btn btn-outline-success"
                            data-bs-toggle="tooltip"
                            title="Add to Collection"
                            @onclick="HandleCollectionAdd"
                            style="width:3.5rem">
                        <i class="bi bi-folder-plus"></i>
                    </button>
                }
            </div>
        </div>

        @switch (viewMode)
        {
            case ViewMode.All:
                <div class="row" style="z-index:0">
                    <SongList @ref="songListRef"
                              ViewStyle="activeView"
                              OnSongLongPress="HandleSongLongPress"
                              OnSelectionModeChanged="StateHasChanged"
                              OnAuthenticationRequired="HandleAuthenticationRequired"
                              SelectedSongIds="selectedSongIds" />
                </div>
                break;
            case ViewMode.Playlists:
                <SongPlaylist ShowActions="false"/>
                break;
            default:
                <div class="row" style="z-index:0">
                    <SongListView @ref="songListViewRef" />
                </div>
                break;
        }

    </div>
</div>
@if (showCollectionModal)
{
    <SongCollectionAdd show="showCollectionModal"
                       Content="collectionDto"
                       OnSave="HandleCollectionSave"
                       OnCancel="CloseCollectionModal" />
}
<DialogModal IsVisible="_modalService.IsModalVisible"
             Modal="@_modalService.CurrentModal"
             OnCloseModal="CloseModal"
             OnConfirmModal="ConfirmModal" />

@code {
    [Parameter] public bool ShowSearch { get; set; } = true;
    [Parameter] public bool ShowActions { get; set; } = true;

    private string error = string.Empty;
    private bool IsNavigating = false;
    private string? currentUserId;

    private ViewMode viewMode = ViewMode.All;
    private ActiveView activeView = ActiveView.Expanded;
    private SongList? songListRef;
    private SongListView? songListViewRef;

    // UI input vs applied search term
    private string searchQuery = string.Empty;
    private string _searchTerm = string.Empty;
    private string theme = "light";
    private Virtualize<ComboBoxDto>? _virtualize;

    // debounce state
    private CancellationTokenSource? _debounceCts;
    private const int SearchDebounceMs = 500;

    // Collection add state
    private bool showCollectionModal = false;
    private PlaylistCreateDto collectionDto = new();
    private HashSet<string> selectedSongIds = new();
    private bool isInSelectionMode => selectedSongIds.Any();

    protected override async Task OnInitializedAsync()
    {
        var modeResult = _storageService.GetItemAsync<ViewMode>("ViewMode");
        if (modeResult.IsCompleted)
        {
            viewMode = modeResult.Result;
        }
        var activeResult = _storageService.GetItemAsync<ActiveView>("ActiveView");
        if (activeResult.IsCompleted)
        {
            activeView = activeResult.Result;
        }

        if (ShowSearch) 
            _heroDataService.SetRenderOrigin(false);
        else
            _heroDataService.SetRenderOrigin(true);

        _heroDataService.OnSearchChanged += HandleSearchChanged;

        var user = await _globalAuth.GetAuthenticatedUserAsync();
        if (user.IsSuccess && user.Data != null)
        {
            currentUserId = user.Data.Id;
        }
    }


    private async Task SetViewMode(ViewMode mode)
    {
        if (viewMode != mode)
        {
            viewMode = mode;
            if (songListViewRef != null)
            {
                await songListViewRef.SetViewMode(mode);
                await songListViewRef.SetActiveView(activeView);
            }
            await _storageService.SetItemAsync("ViewMode", mode);
        }
    }

    private async Task SetActiveView(ActiveView view)
    {
        if (activeView != view)
        {
            activeView = view;
            if (songListViewRef != null)
            {
                await songListViewRef.SetActiveView(view);
                await songListViewRef.SetViewMode(viewMode);
            }
            if (songListRef != null)
            {
                await songListRef.SetActiveView(view);
                //await songListRef.SetViewMode(viewMode);

            }
            await _storageService.SetItemAsync("ActiveView", view);
        }
    }

    private string GetLineClass()
    {
        return theme == "dark" ? "border-top border-2 border-dark" : "border-top border-light";
    }

    private async Task OnSearchInput(string? keywords = null, bool? isExternal = null)
    {
        // restart debounce window
        _debounceCts?.Cancel();
        _debounceCts?.Dispose();
        var cts = new CancellationTokenSource();
        _debounceCts = cts;

        try
        {
            await Task.Delay(SearchDebounceMs, cts.Token);
            if (isExternal == true)
            {
                _searchTerm = (keywords ?? string.Empty).Trim();
            }
            else
            {
                _searchTerm = (searchQuery ?? string.Empty).Trim();
            }           

            if (songListViewRef != null) 
                await songListViewRef.SearchTermChanged(_searchTerm);

            if (songListRef != null) 
                await songListRef.SearchTermChanged(_searchTerm);

        }
        catch (TaskCanceledException)
        {
            // expected when new keystrokes arrive
        }
    }

    private void NavigateToPlay(string id)
    {
        _navManager.NavigateTo($"/player/{id}");
    }

    private void AddSong()
    {
        _navManager.NavigateTo("/compose");
    }
    private void HandleSongLongPress(string songId)
    {
        if (selectedSongIds.Contains(songId))
        {
            selectedSongIds.Remove(songId);
        }
        else
        {
            selectedSongIds.Add(songId);
        }
        StateHasChanged();
    }

    private void HandleAuthenticationRequired()
    {
        _modalService.Show(new ModalOptionDto
        {
            Title = "Login Required",
            Message = "Please log in to create playlists.",
            HyperlinkText = "Go to Login",
            ButtonText = "Close",
            OptionType = OptionType.Info,
            Context = new ModalContext
            {
                ActionType = "NavigateToLogin",
                Data = "/login"
            }
        });
    }
    private async Task ExitSelectionMode()
    {
        selectedSongIds.Clear();

        // Notify child components
        if (songListRef != null)
            await songListRef.ExitSelectionMode();
        if (songListViewRef != null)
            //await songListViewRef.ExitSelectionMode();

            StateHasChanged();
    }

    private void HandleCollectionAdd()
    {
        if (!selectedSongIds.Any())
        {
            _modalService.Show(new ModalOptionDto
            {
                Title = "No Songs Selected",
                Message = "Please select at least one song by long-pressing on it.",
                ButtonText = "OK",
                OptionType = OptionType.Warning
            });
            return;
        }

        collectionDto = new PlaylistCreateDto
        {
            SongIds = selectedSongIds.ToList(),
            SheduledDate = DateTimeOffset.Now
        };
        showCollectionModal = true;
    }

    private async Task HandleCollectionSave(PlaylistCreateDto collection)
    {
        try
        {
            var response = await _playlistsApi.AddPlaylist(collection);
            if (response.IsSuccessStatusCode)
            {
                _modalService.Show(new ModalOptionDto
                {
                    Title = "Success",
                    Message = $"Playlist '{collection.Title}' created successfully with {collection.SongIds.Count} songs.",
                    ButtonText = "OK",
                    OptionType = OptionType.Success
                });

                // Exit selection mode after successful save
                await ExitSelectionMode(); 
                CloseCollectionModal();

                _navManager.NavigateTo("/playlists");
            }
            else
            {
                var errorMessage = _apiResponseHandler.GetApiErrorMessage(response);
                _modalService.Show(new ModalOptionDto
                {
                    Title = "Error",
                    Message = errorMessage,
                    ButtonText = "Close",
                    OptionType = OptionType.Error
                });
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error creating collection");
            _modalService.Show(new ModalOptionDto
            {
                Title = "Error",
                Message = "An error occurred while creating the collection.",
                ButtonText = "Close",
                OptionType = OptionType.Error
            });
        }
    }

    private void CloseCollectionModal()
    {
        showCollectionModal = false;
        collectionDto = new();
    }

    private async Task ConfirmModal()
    {
        if (_modalService.CurrentModal?.Context?.ActionType == "NavigateToLogin")
        {
            var loginUrl = _modalService.CurrentModal.Context.Data?.ToString() ?? "/login";
           // _navManager.NavigateTo(loginUrl);
        }
        else
        {
            _modalService.Close();
        }
        await CloseModal();
    }

    private async Task CloseModal()
    {
        await Task.Delay(100);
        _modalService.Close();
        StateHasChanged();
    }

    private async Task HandleSearchChanged(string searchTerm)
    {
        await OnSearchInput(searchTerm,true);
    }

    public void Dispose()
    {
        _heroDataService.OnSearchChanged -= HandleSearchChanged;
        _debounceCts?.Cancel();
        _debounceCts?.Dispose();
    }
}