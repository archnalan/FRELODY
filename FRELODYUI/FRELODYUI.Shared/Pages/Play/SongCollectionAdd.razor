@inject ILogger<SongCollectionAdd> _logger

<div class="modal fade @(show ? "show" : "")" 
     style="display: @(show ? "block" : "none"); z-index:10"
     tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content p-2">
            <div class="modal-header border-0">
                <h5 class="modal-title">Create Song Collection</h5>
                <button type="button" class="btn btn-close" @onclick="Close"></button>
            </div>
            <div class="modal-body border-0 px-3">
                <EditForm Model="@Content" OnValidSubmit="@Save" Context="formContext">
                    <DataAnnotationsValidator />

                    <div class="form-group mb-2">
                        <label>Collection Name</label>
                        <InputText class="form-control" 
                                   @bind-Value="@Content.Title" 
                                   autocomplete="off" 
                                   placeholder="Enter collection name..." 
                                   required />
                        <div style="min-height:1.5rem">
                            <ValidationMessage For="@(() => Content.Title)" />
                        </div>
                    </div>

                    <div class="row mb-2">
                        <div class="col-12 col-md-6">
                            <label>Theme (Optional)</label>
                            <InputText class="form-control"
                                       @bind-Value="@Content.Theme"
                                       autocomplete="off"
                                       placeholder="Enter theme..." />
                            <small class="text-muted">e.g., Gospel, Worship, Praise</small>
                            <div style="min-height:1.5rem">
                                <ValidationMessage For="@(() => Content.Theme)" />
                            </div>
                        </div>
                        <div class="col-12 col-md-6">
                            <label>Scheduled Date (Optional)</label>
                            <InputDate class="form-control"
                                       @bind-Value="@scheduledDate" />
                            <small class="text-muted">When do you plan to use this?</small>
                        <div style="min-height:1.5rem">
                            <ValidationMessage For="@(() => Content.SheduledDate)" />
                        </div>
                        </div>
                    </div>                 

                    <div class="form-group text-end">
                        <button type="button" class="btn btn-outline-danger me-3" @onclick="Close">Cancel</button>
                        <button type="submit" class="btn btn-outline-primary">Create</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@if (show)
{
    <div class="modal-backdrop fade show" style="z-index:0"></div>
}

@code {
    [Parameter] public SongCollectionCreateDto Content { get; set; } = new();
    [Parameter] public EventCallback<SongCollectionCreateDto> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public bool show { get; set; }

    private DateTime? scheduledDate;

    protected override void OnParametersSet()
    {
        // Convert DateTimeOffset to DateTime for the InputDate component
        if (Content.SheduledDate.HasValue)
        {
            scheduledDate = Content.SheduledDate.Value.DateTime;
        }
    }

    public void Open()
    {
        show = true;
        StateHasChanged();
    }

    public void Close()
    {
        show = false;
        OnCancel.InvokeAsync();
    }

    private async Task Save()
    {
        // Convert DateTime back to DateTimeOffset
        if (scheduledDate.HasValue)
        {
            Content.SheduledDate = new DateTimeOffset(scheduledDate.Value);
        }
        
        await OnSave.InvokeAsync(Content);
        show = false;
    }
}