@inject ILogger<PlaylistFolder> _logger

<div class="playlist-folder mb-3">
    <div class="folder-header bg-light border rounded-3 p-3 @(IsExpanded ? "rounded-bottom-0" : "")"
         @onclick="HandleToggle"
         style="cursor:pointer;">
        <div class="d-flex justify-content-between align-items-center">
            <div class="d-flex align-items-center gap-3 flex-grow-1 pe-2">
                <span class="folder-icon fs-4">
                    @if (IsExpanded)
                    {
                        <i class="bi bi-folder2-open text-primary-emphasis"></i>
                    }
                    else
                    {
                        <i class="bi bi-folder2 text-secondary-emphasis"></i>
                    }
                </span>
                <div class="flex-grow-1">
                    <h5 class="mb-0 fw-semibold">@Collection.Playlist.Title</h5>
                    @if (!string.IsNullOrEmpty(Collection.Playlist.Theme))
                    {
                        <small class="text-muted">
                            <i class="bi bi-tag me-1"></i>@Collection.Playlist.Theme
                        </small>
                    }
                </div>
                <span class="badge bg-dark rounded-pill">@Collection.Songs.Count</span>
            </div>
            <div class="d-flex gap-2" @onclick:stopPropagation>
                 @if (ShowActionButtons)
                {
                    <!-- Actions Dropdown -->
                    <div class="dropdown">
                        <div class="dropdown">
                        <button class="btn btn-sm btn-outline-primary dropdown-toggle" 
                                type="button" 
                                data-bs-toggle="dropdown" 
                                aria-expanded="false"
                                title="More Actions">
                            More
                        </button>
                        <ul class="dropdown-menu dropdown-menu-end">
                            <li>
                                <button class="dropdown-item" @onclick="() => NavigateToDetail()">
                                    Playlist Details<i class="ms-2 bi bi-chevron-right"></i>
                                </button>
                            </li>
                            <li>
                                <button class="dropdown-item" @onclick="() => OnEdit.InvokeAsync()">
                                    <i class="bi bi-pencil-square me-2"></i>Edit Playlist
                                </button>
                            </li>
                            <li>
                                <button class="dropdown-item" @onclick="() => SharePlaylist(Collection.Playlist.Id)">
                                    <i class="bi bi-upload me-2"></i>Share Playlist
                                </button>
                            </li>
                            <li><hr class="dropdown-divider"></li>
                            <li>
                                <button class="dropdown-item text-danger" @onclick="() => DeletePlaylist(Collection)">
                                    <i class="bi bi-trash me-2"></i>Delete Playlist
                                </button>
                            </li>
                        </ul>
                    </div>
                    <ul class="dropdown-menu dropdown-menu-end">
                        <li>
                            <button class="dropdown-item" @onclick="() => OnEdit.InvokeAsync()">
                                <i class="bi bi-pencil-square me-2"></i>Edit Playlist
                            </button>
                        </li>
                        <li>
                            <button class="dropdown-item" @onclick="() => SharePlaylist(Collection.Playlist.Id)">
                                <i class="bi bi-share me-2"></i>Share Playlist
                            </button>
                        </li>
                        <li><hr class="dropdown-divider"></li>
                        <li>
                            <button class="dropdown-item text-danger" @onclick="() => DeletePlaylist(Collection)">
                                <i class="bi bi-trash me-2"></i>Delete Playlist
                            </button>
                        </li>
                    </ul>
                </div>
                }
                
                <span class="toggle-icon">
                    @if (IsExpanded)
                    {
                        <i class="bi bi-chevron-up"></i>
                    }
                    else
                    {
                        <i class="bi bi-chevron-down"></i>
                    }
                </span>
            </div>
        </div>

        @if (!string.IsNullOrEmpty(Collection.Playlist.Description) && IsExpanded)
        {
            <p class="text-muted small mt-2 mb-0">@Collection.Playlist.Description</p>
        }
    </div>

    @if (IsExpanded)
    {
        <div class="folder-content border border-top-0 rounded-bottom-3">
            @if (Collection.Songs.Any())
            {
                <!-- Songs list with scrollable container -->
                <div class="songs-list-container" style="max-height: 400px; overflow-y: auto;">
                    @foreach (var song in Collection.Songs)
                    {
                        <PlaylistSongItem Song="song"
                                          ShowActionBtns="ShowActionButtons"
                                          OnRemove="() => RemoveSongFromPlaylist(Collection.Playlist.Id,song.Id)"
                                          OnShare="() => ShareSong(song.Id)"/>
                    }
                </div>
                @if (ShowActionButtons)
                {
                    <!-- Add Song button footer (always visible when playlist has songs) -->
                    <div class="playlist-footer border-top p-2 bg-light" @onclick:stopPropagation>
                        <button class="btn btn-outline-primary btn-sm"
                                @onclick="() => OnAddSong.InvokeAsync()">
                            <i class="bi bi-plus me-2"></i>Add Song
                        </button>
                        <button class="btn btn-sm btn-outline-secondary"
                                data-bs-toggle="tooltip"
                                title="View Full Playlist"
                                @onclick="() => NavigateToDetail()">
                            <i class="bi bi-chevron-right"></i>
                        </button>

                    </div>
                }
            }
            else
            {
                <!-- Empty state with Add Song button -->
                <div class="p-4 text-center text-muted" @onclick:stopPropagation>
                    <i class="bi bi-music-note fs-3"></i>
                    <p class="mb-3 mt-2">No songs in this playlist</p>

                    @if (ShowActionButtons)
                    {
                        <button class="btn btn-primary btn-sm"
                                @onclick="() => OnAddSong.InvokeAsync()">
                            <i class="bi bi-plus-circle me-2"></i>Add Song
                        </button>
                    }
                    else
                    {
                        <p class="text-muted">Your playlist songs will be listed here</p>
                    }
                  
                </div>
            }
        </div>
    }
</div>
<DialogModal IsVisible="_modalService.IsModalVisible"
             Modal="@_modalService.CurrentModal"
             OnCloseModal="CloseModal"
             OnConfirmModal="ConfirmModal" />

<MessageToast ShowToast="@showSuccessMessage" ToastMessage="@successMessage" Type="ToastType.Success" />

@code {
    [Parameter] public PlaylistSongs Collection { get; set; } = new();
    [Parameter] public bool IsExpanded { get; set; }
    [Parameter] public EventCallback OnToggle { get; set; }
    [Parameter] public EventCallback OnEdit { get; set; }
    [Parameter] public EventCallback OnRefresh { get; set; }
    [Parameter] public EventCallback OnAddSong { get; set; }
    [Parameter] public bool ShowActionButtons { get; set; } = true;

    private bool isGeneratingLink = false;

    private bool showSuccessMessage = false;
    private string successMessage = string.Empty;
    
    private void HandleToggle()
    {
        OnToggle.InvokeAsync();
    }

    private void NavigateToDetail()
    {
        _navManager.NavigateTo($"/playlists/{Collection.Playlist.Id}/detail");
    }

    private async Task ShareSong(string songId)
    {
        try
        {
            var shareLink = await _shareService.GenerateShareLinkAsync(songId);
            if (shareLink != null)
            {
                await _clipboardService.CopyToClipboardAsync(shareLink.ShareUrl);
                _modalService.Show(new ModalOptionDto
                {
                    Title = "Link Copied",
                    Message = "Song share link copied to clipboard!",
                    ButtonText = "OK",
                    OptionType = OptionType.Success
                });
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error sharing song");
        }
    }

    private async void SharePlaylist(string playlistId)
    {
        isGeneratingLink = true;
        StateHasChanged();

        try
        {
            var shareLink = await _shareService.GenerateShareLinkAsync(playlistId);
            if (shareLink != null)
            {
                await _clipboardService.CopyToClipboardAsync(shareLink.ShareUrl);
                await ShowSuccessMessage("Share link copied to clipboard!");
            }
            else
            {
                _modalService.Show(new ModalOptionDto
                {
                    Title = "Share Link Error",
                    Message = "Failed to generate share link. Please try again later.",
                    ButtonText = "Close",
                    OptionType = OptionType.Error,
                    Context = new ModalContext
                    {
                        ActionType = "GenerateShareLink",
                        Data = "Share link generation failed for song ID: " + playlistId
                    }
                });
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error generating share link for song {SongId}", playlistId);
            _modalService.Show(new ModalOptionDto
            {
                Title = "Error",
                Message = "An error occurred while generating the share link.",
                ButtonText = "Close",
                OptionType = OptionType.Error,
                Context = new ModalContext
                {
                    ActionType = "GenerateShareLink",
                    Data = ex.Message
                }
            });
        }
        finally
        {
            isGeneratingLink = false;
            StateHasChanged();
        }
    }

    private void DeletePlaylist(PlaylistSongs collection)
    {
        _modalService.Show(new ModalOptionDto
        {
            Title = "Delete Playlist",
            Message = $"Are you sure you want to delete '{collection.Playlist.Title}'?",
            DangerText = $"This will remove the playlist and all its {collection.Songs.Count} songs.",
            ButtonText = "Delete",
            OptionType = OptionType.Confirmation,
            Context = new ModalContext
            {
                ActionType = "DeletePlaylist",
                Data = collection.Playlist.Id
            }
        });
    }

    private void RemoveSongFromPlaylist(string collectionId, string songId)
    {
        _modalService.Show(new ModalOptionDto
        {
            Title = "Remove Song",
            Message = "Remove this song from the playlist?",
            ButtonText = "Remove",
            OptionType = OptionType.Confirmation,
            Context = new ModalContext
            {
                ActionType = "RemoveSong",
                Data = new { CollectionId = collectionId, SongId = songId }
            }
        });
    }

    private async Task ConfirmModal()
    {
        if (_modalService.CurrentModal?.Context?.ActionType == "DeletePlaylist")
        {
            var playlistId = _modalService.CurrentModal.Context.Data;
            await DeletePlaylist(playlistId.ToString() ??"");
            
        }
        else if(_modalService.CurrentModal?.Context?.ActionType == "RemoveSong")
        {
            var data = _modalService.CurrentModal.Context.Data as dynamic;
            string collectionId = data.CollectionId;
            string songId = data.SongId;
            await ExecuteRemoveSong(collectionId, songId);
        }
        await CloseModal();
    }

    private async Task DeletePlaylist(string collectionId)
    {
        try
        {
            var response = await _playlistsApi.DeletePlaylist(collectionId);

            if (response.IsSuccessStatusCode)
            {
                await ShowSuccessMessage("Playlist deleted successfully.");
                await OnRefresh.InvokeAsync();
            }
            else
            {
                var errorMessage = _apiResponseHandler.GetApiErrorMessage(response);
                _modalService.Show(new ModalOptionDto
                {
                    Title = "Error",
                    Message = errorMessage,
                    ButtonText = "Close",
                    OptionType = OptionType.Error
                });
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error deleting playlist");
            _modalService.Show(new ModalOptionDto
            {
                Title = "Error",
                Message = "Failed to delete playlist.",
                ButtonText = "Close",
                OptionType = OptionType.Error
            });
        }
    }

    private async Task ExecuteRemoveSong(string collectionId, string songId)
    {
        try
        {
            var response = await _playlistsApi.RemoveSongFromPlaylist(collectionId, songId);

            if (response.IsSuccessStatusCode)
            {
                await ShowSuccessMessage("Song removed from playlist.");
                await OnRefresh.InvokeAsync();
            }
            else
            {
                var errorMessage = _apiResponseHandler.GetApiErrorMessage(response);
                _modalService.Show(new ModalOptionDto
                {
                    Title = "Error",
                    Message = errorMessage,
                    ButtonText = "Close",
                    OptionType = OptionType.Error
                });
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error removing song from playlist");
        }
    }

    private async Task CloseModal()
    {
        await Task.Delay(100);
        _modalService.Close();
        StateHasChanged();
    }

    private async Task ShowSuccessMessage(string message)
    {
        successMessage = message;
        showSuccessMessage = true;
        StateHasChanged();

        // Auto-hide after 3 seconds
        await Task.Delay(3000);
        showSuccessMessage = false;
        StateHasChanged();
    }

}