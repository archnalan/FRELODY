@inject ILogger<PlaylistSongItem> _logger    

<div class="song-item p-2 m-1 rounded-2"
     @onclick="@(()=>OnSongDisplay(Song.Id))"
     style="cursor:pointer; transition: all 0.2s;">

    <span class="badge bg-dark me-2" style="min-width:40px;">
        @((Song.SongNumber.HasValue ? Song.SongNumber.Value : 0).ToString("000"))
    </span>

    <div class="text-start flex-grow-1" style="min-width:0;">
        <div class="fw-semibold text-truncate">@Song.Title</div>
        @if (!string.IsNullOrEmpty(Song.WrittenBy))
        {
            <small class="text-muted text-truncate d-block">@Song.WrittenBy</small>
        }
    </div>
    @if (ShowActionBtns)
    {
        <div class="d-flex gap-1" @onclick:stopPropagation>
            <button class="btn btn-sm btn-outline-primary"
                    data-bs-toggle="tooltip"
                    title="Play Song"
                    @onclick="@(() => OnSongDisplay(Song.Id))">
                <i class="bi bi-play-fill"></i>
            </button>
            <button class="btn btn-sm btn-outline-dark"
                    data-bs-toggle="tooltip"
                    title="Share Song"
                    @onclick="() => OnShare.InvokeAsync()">
                <i class="bi bi-upload"></i>
            </button>
            <button class="btn btn-sm btn-outline-danger"
                    data-bs-toggle="tooltip"
                    title="Remove from Playlist"
                    @onclick="() => OnRemove.InvokeAsync()">
                <i class="bi bi-x-lg"></i>
            </button>
        </div>
    }    
</div>

@code {
    [Parameter] public PlaylistSongDto Song { get; set; } = new();
    [Parameter] public EventCallback OnRemove { get; set; }
    [Parameter] public EventCallback OnShare { get; set; }
    [Parameter] public bool ShowActionBtns { get; set; } = true;

    private void OnSongDisplay(string songId)
    {
        _ = Task.Run(async () =>
            {
                try
                {
                    await _playHistoryApi.LogSongPlay(songId, "Playlist");
                }
                catch (Exception ex)
                {
                    _logger.LogWarning(ex, "Failed to log song play from playlists page {SongId}", songId);
                }
            });
        bool IsFromLanding = _heroDataService.GetRenderOrigin();
        if (IsFromLanding)
        {
            _navManager.NavigateTo($"/songs/{songId}/landing");
        }
        else
        {
            _navManager.NavigateTo($"/songs/{songId}");
        }
    }

}
