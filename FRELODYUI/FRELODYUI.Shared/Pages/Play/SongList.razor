@page "/songs-list"
@using Microsoft.AspNetCore.Components.Web.Virtualization
@inject ILogger<SongList> _logger

<Virtualize @key="RefreshKey" 
            Context="song"
            ItemsProvider="ProvideSongsAsync"
            ItemSize="170"
            OverscanCount="3"
            @ref="_virtualize">
    <ItemContent>
        <div class="@(ViewStyle == ActiveView.Expanded ? "col-12 mb-4" : "col-12 col-md-6 col-lg-4 mb-4")" 
                @onclick="@(() => OnSongDisplay(song.IdString ?? ""))" style="cursor:pointer">
            <div class="card h-100 shadow-sm" style="border-radius:0.5rem">
                <div class="card-body d-flex flex-column justify-content-between">
                    <div class="d-flex justify-content-between mb-3">
                        <h5 class="card-title mb-3">
                            <span>@song.ValueId.</span><!--Holds song number-->
                            <span class="ms-2">@song.ValueText</span>
                        </h5>

                        <span class="cursor-pointer text-muted ms-2"
                              data-bs-toggle="tooltip"
                              title="Share this song"
                              aria-label="Share song"
                              @onclick="() => ShareLink(song.IdString)"
                              @onclick:stopPropagation
                              disabled="@isGeneratingLink">
                            <i class="bi bi-upload"></i>
                        </span>
                      
                    </div>
                    <div>
                        <span class="font-weight-light text-muted">By @(song.ValueSubText ?? "unknown")</span>
                    </div>
                    <div class="d-flex flex-column flex-md-row justify-content-end mt-3 gap-2">
                        <SongRating SongId="@song.IdString" ShowSummary="true" ShowPanel="false" />
                        <div class="d-flex justify-content-center gap-2">
                            <button class="btn btn-outline-primary btn-sm"
                                    @onclick="() => NavigateToDetails(song.IdString)"
                                    @onclick:stopPropagation>
                                <i class="bi bi-list"></i>
                            </button>
                            <button class="btn btn-primary btn-sm" @onclick="@(() => OnSongDisplay(song.IdString))"><i class="bi bi-play-fill"></i></button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </ItemContent>
    <Placeholder>
        <div class="@(ViewStyle == ActiveView.Expanded ? "col-12 mb-4" : "col-12 col-md-6 col-lg-4 mb-4")">
            <div class="card h-100 placeholder-wave shadow" style="border-radius:0.5rem">
                <div class="card-body">
                    <h5 class="card-title">
                        <span class="placeholder col-7 mb-3"></span>
                    </h5>
                    <span class="placeholder col-3"></span>
                    <div class="d-flex justify-content-end mt-3">
                        <span class="placeholder col-3 me-2"></span>
                        <span class="placeholder col-2"></span>
                    </div>
                </div>
            </div>
        </div>
    </Placeholder>
</Virtualize>

@if (showSuccessMessage)
{
    <div class="position-absolute top-0 translate-middle-x mt-2" style="max-width:500px; z-index: 2000;">
        <div class="toast align-items-center show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="d-flex">
                <div class="toast-body">
                    <i class="bi bi-check-circle-fill me-2"></i>
                    @successMessage
                </div>
                <button type="button" class="btn-close me-2 m-auto" @onclick="() => showSuccessMessage = false" aria-label="Close"></button>
            </div>
        </div>
    </div>
}

<DialogModal IsVisible="_modalService.IsModalVisible"
             Modal="@_modalService.CurrentModal"
             OnCloseModal="CloseModal"
             OnConfirmModal="ConfirmModal" />

@code {
    [Parameter] public ActiveView ViewStyle { get; set; }
    private string error = string.Empty;
    private bool IsNavigating = false;
    private bool IsFromLanding = false;

    private string _searchTerm = string.Empty;
    private string RefreshKey = Guid.NewGuid().ToString();

    private Virtualize<ComboBoxDto>? _virtualize;
    private bool isGeneratingLink = false;
    private bool isLoading = false;
    private bool showSuccessMessage = false;
    private string successMessage = string.Empty;

    protected override Task OnInitializedAsync()
    {
        IsFromLanding = _heroDataService.GetRenderOrigin();
        return Task.CompletedTask;
    }

    public async Task SetActiveView(ActiveView changeStyle)
    {
        ViewStyle = changeStyle;
        await Task.Delay(100);
        StateHasChanged();
    }

    private async ValueTask<ItemsProviderResult<ComboBoxDto>> ProvideSongsAsync(ItemsProviderRequest request)
    {
        try
        {
            error = string.Empty;

            var offset = request.StartIndex;
            var limit = request.Count <= 0 ? 10 : request.Count;

            if (!string.IsNullOrWhiteSpace(_searchTerm))
            {
                var response = await _songsApi.SearchSongs(_searchTerm, offset, limit);
                var page = response?.Content;
                var items = page?.Data ?? new List<ComboBoxDto>();
                var total = page?.TotalSize ?? 0;
                return new ItemsProviderResult<ComboBoxDto>(items, total);
            }
            else
            {
                var response = await _songsApi.GetSongs(offset, limit);
                var page = response?.Content;
                var items = page?.Data ?? new List<ComboBoxDto>();
                var total = page?.TotalSize ?? 0;
                return new ItemsProviderResult<ComboBoxDto>(items, total);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error fetching songs during virtualization.");
            error = $"Error fetching songs: {ex.Message}";
            return new ItemsProviderResult<ComboBoxDto>(Array.Empty<ComboBoxDto>(), 0);
        }
    }

    private void RemoveSong(string? songId)
    {
        if(!string.IsNullOrEmpty(songId))
        {
            _modalService.Show(new ModalOptionDto
            {
                Title = "Delete Song",
                Message = "Are you sure you want to delete this song?",
                DangerText = "This action cannot be undone.",
                ButtonText = "Delete",
                OptionType = OptionType.Confirmation,
                Context = new ModalContext { ActionType = "DeleteSong", Data = songId }
            });
        }         
    }

    public async Task SearchTermChanged(string searchTerm)
    {
        _searchTerm = searchTerm;
        RefreshKey = Guid.NewGuid().ToString();
        await Task.CompletedTask;
        StateHasChanged();
    }

    private async Task Refresh()
    {
        error = string.Empty;
        if (_virtualize is not null)
            await _virtualize.RefreshDataAsync();
    }

    private void NavigateToDetails(string id)
    {
        _navManager.NavigateTo($"/player/details/{id}");
    }

    private void NavigateToPlay(string id)
    {
        _navManager.NavigateTo($"/player/{id}");
    }

    private void OnSongDisplay(string songId)
    {
        try
        {
            IsNavigating = true;
            StateHasChanged();
            // Log the song play from list (fire and forget)
            _ = Task.Run(async () =>
            {
                try
                {
                    await _playHistoryApi.LogSongPlay(songId, "SongList");
                }
                catch (Exception ex)
                {
                    _logger.LogWarning(ex, "Failed to log song play from list for song {SongId}", songId);
                }
            });
            if (IsFromLanding)
            {
                _navManager.NavigateTo($"/songs/{songId}/landing");
            }
            else
            {
                _navManager.NavigateTo($"/songs/{songId}");                
            }
        }
        catch (Exception ex)
        {
            _logger.LogError($"Error navigating to song: {ex.Message}");
            _modalService.Show(new ModalOptionDto
            {
                Title = "Error",
                Message = "An error occurred while trying to display the song.",
                ButtonText = "Close",
                OptionType = OptionType.Error
            });
        }
        finally
        {
            IsNavigating = false;
            StateHasChanged();
        }
    }
    private async Task ShareLink(string songId)
    {
        isGeneratingLink = true;
        StateHasChanged();

        try
        {
            var shareLink = await _shareService.GenerateShareLinkAsync(songId);
            if (shareLink != null)
            {
                await _clipboardService.CopyToClipboardAsync(shareLink.ShareUrl);
                await ShowSuccessMessage("Share link copied to clipboard!");
            }
            else
            {
                _modalService.Show(new ModalOptionDto
                {
                    Title = "Share Link Error",
                    Message = "Failed to generate share link. Please try again later.",
                    ButtonText = "Close",
                    OptionType = OptionType.Error,
                    Context = new ModalContext
                    {
                        ActionType = "GenerateShareLink",
                        Data = "Share link generation failed for song ID: " + songId
                    }
                });
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error generating share link for song {SongId}", songId);
            _modalService.Show(new ModalOptionDto
            {
                Title = "Error",
                Message = "An error occurred while generating the share link.",
                ButtonText = "Close",
                OptionType = OptionType.Error,
                Context = new ModalContext
                {
                    ActionType = "GenerateShareLink",
                    Data = ex.Message
                }
            });
        }
        finally
        {
            isGeneratingLink = false;
            StateHasChanged();
        }
    }
    private async Task ShowSuccessMessage(string message)
    {
        successMessage = message;
        showSuccessMessage = true;
        StateHasChanged();

        // Auto-hide after 3 seconds
        await Task.Delay(3000);
        showSuccessMessage = false;
        StateHasChanged();
    }

    private async Task ConfirmModal()
    {
        if (_modalService.CurrentModal?.Context?.ActionType == "DeleteSong")
        {
            var response = await _songsApi.DeleteSong(_modalService.CurrentModal.Context.Data?.ToString() ?? string.Empty);

            if(response.IsSuccessStatusCode)
            {
                await Refresh();
            }
            else
            {
                var errorMessage = _apiResponseHandler.GetApiErrorMessage(response);
                _modalService.Show(new ModalOptionDto
                {
                    Title = "Error Deleting Song",
                    Message = errorMessage,
                    ButtonText = "Close",
                    OptionType = OptionType.Error
                });
            }
        }
        else
        {
            _modalService.Close();
        }
        await CloseModal();
    }

    private async Task CloseModal()
    {
        await Task.Delay(100);
        _modalService.Close();
        StateHasChanged();
    }

}
