@page "/songs/{SongId}"
@using FRELODYSHRD.Dtos.SubDtos
@inject ILogger<Song> _logger
@implements IDisposable

<div class="w-100 d-flex justify-content-center mx-auto p-6 bg-light ">
    @if (isLoading)
    {
        <div class="mt-4 text-center">
            <div class="spinner-border text-primary" role="status"></div>
            <p>Loading song...</p>
        </div>
    }
    else if (song != null)
    {
        <div class="w-100 h-100 shadow-lg border border-light rounded rounded-3 my-4 px-4" style="max-width:55rem;">
            <div class="d-flex gap-2 my-3 me-2" style="justify-content:space-between">
                <div class="ms-2">
                    <button class="btn btn-outline-primary" @onclick="GoBack">
                        <i class="bi bi-arrow-left"></i>
                        Back 
                    </button>
                </div>
                <div class="d-flex gap-2 me-2">
                    <button class="btn btn-outline-primary" @onclick="@(() => CustomizeSong(song.Id))">
                        <i class="bi bi-pencil-square"></i>
                        Customize
                    </button>                  
                    <ShareDropdown Song="song" OnActionCompleted="() => StateHasChanged()" />
                </div>
            </div>
            <div class="d-flex justify-content-center align-items-center mb-2">
                @if (song.SongNumber.HasValue)
                {
                    <h3 class="text-black text-opacity-50 me-3">
                        @song.SongNumber.Value.ToString("D3")
                    </h3>
                }
                <h3 class="fw-bold text-black text-center">
                    @song.Title
                </h3>
            </div>

            @* Aggregate rating summary (reusable component) *@
            <RateSong SongId="@SongId" ShowSummary="true" ShowPanel="false" />

            <!-- content -->
            <div class="song-content mt-2">
                @if (song.SongParts?.Any() == true)
                {
                    <div class="w-100 d-flex align-items-center justify-content-center gap-5 text-center">
                        <div class="d-flex align-items-end">
                            <span class="btn btn-sm rounded-circle btn-outline-secondary me-2" @onclick="ResetTranspose" title="Reset to original transpose">
                                <i class="bi bi-arrow-counterclockwise"></i>
                            </span>
                            <div class="d-flex flex-column">
                                <label>Transpose</label>
                                <div>
                                    <button class="btn btn-sm btn-outline-secondary rounded-0 rounded-start"
                                            @onclick="DecreaseTranspose"
                                            disabled="@(transpose <= -12)">
                                        <i class="bi bi-dash"></i>
                                    </button>
                                    <span class="btn btn-sm btn-outline-secondary rounded-0" style="width:2.5rem">@transpose</span>
                                    <button class="btn btn-sm btn-outline-secondary rounded-0 rounded-end"
                                            @onclick="IncreaseTranspose"
                                            disabled="@(transpose >= 12)">
                                        <i class="bi bi-plus"></i>
                                    </button>
                                </div>
                            </div>
                        </div>
                        <div class="d-flex align-items-end">
                            <div class="d-flex flex-column">
                                <label>Capo</label>
                                <div>
                                    <button class="btn btn-sm btn-outline-secondary rounded-0 rounded-start"
                                            @onclick="DecreaseCapo"
                                            disabled="@(capo <= 0)">
                                        <i class="bi bi-dash"></i>
                                    </button>
                                    <span class="btn btn-sm btn-outline-secondary rounded-0" style="width:2.5rem">@capo</span>
                                    <button class="btn btn-sm btn-outline-secondary rounded-0 rounded-end"
                                            @onclick="IncreaseCapo"
                                            disabled="@(capo >= 12)">
                                        <i class="bi bi-plus"></i>
                                    </button>
                                </div>
                            </div>
                            <span class="btn btn-sm rounded-circle btn-outline-secondary ms-2" @onclick="ResetCapo" title="Reset capo">
                                <i class="bi bi-arrow-clockwise"></i>
                            </span>
                        </div>
                        
                    </div>
                    foreach (var verse in song.SongParts.OrderBy(v => v.PartNumber))
                    {
                        <div class="verse-section mb-6 ms-4">
                            <h4 class="font-semibold text-center text-opacity-75 my-2">
                                Verse @verse.PartNumber.ToString("D2")
                            </h4>
                            @if (verse.LyricLines?.Any() == true)
                            {
                                foreach (var line in verse.LyricLines.OrderBy(l => l.LyricLineOrder))
                                {
                                    <div class="lyric-line d-flex flex-wrap mb-2">
                                        @if (line.LyricSegments?.Any() == true)
                                        {
                                            foreach (var segment in line.LyricSegments.OrderBy(s => s.LyricOrder))
                                            {
                                                <div class="lyric-segment d-flex flex-column justify-content-end">
                                                    @if (segment.Chord != null)
                                                    {
                                                        <div class="chord text-sm text-primary fw-bold" style="cursor:pointer" >
                                                            @GetTransposedChordName(segment.Chord.ChordName)
                                                        </div>
                                                    }
                                                    <div class="lyric text-opacity-75">
                                                        @segment.Lyric
                                                    </div>
                                                </div>
                                            }
                                        }
                                    </div>
                                }
                            }
                        </div>
                    }
                }
            </div>

            @* Bottom "rate this song" panel (reusable component) *@
            <RateSong SongId="@SongId" ShowSummary="false" ShowPanel="true" />
        </div>
    }
</div>

@if (_modalService.IsModalVisible)
{
    <DialogModal IsVisible="true"
                 Modal="@_modalService.CurrentModal"
                 OnCloseModal="CloseModal"
                 OnConfirmModal="ConfirmModal" />
}

@code {
    [Parameter] public string SongId { get; set; } = string.Empty;

    private SongDto? song;
    private bool isLoading = true;
    private int transpose = 0;
    private int capo = 0;
    private ChordTransposer? chordTransposer;
    private string[]? originalChords;

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(SongId))
            await LoadSong();
    }

    private async Task LoadSong()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var response = await _songsApi.GetSongWithChordsById(SongId);
            if (response.IsSuccessStatusCode)
            {
                song = response.Content;
                InitializeChordTransposer();
            }
            else
            {
                var errorMessage = _apiResponseHandler.GetApiErrorMessage(response);
                _modalService.Show(new ModalOptionDto
                {
                    Title = "Error",
                    Message = errorMessage,
                    ButtonText = "Close",
                    OptionType = OptionType.Error,
                    Context= new ModalContext
                    {
                        ActionType = "LoadSong",
                        Data = "Failed to load song with ID: " + SongId
                    }
                });
            }
        }
        catch (Exception ex)
        {
            var errorMessage = "An unexpected error occurred";
            _logger.LogError(ex, "Error loading song with ID: {SongId}", SongId);
            _modalService.Show(new ModalOptionDto
            {
                Title = "Error",
                Message = errorMessage,
                ButtonText = "Close",
                OptionType = OptionType.Error,
                Context= new ModalContext
                {
                    ActionType = "LoadSong",
                    Data = "Unexpected error while loading song with ID: " + SongId
                }
            });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void InitializeChordTransposer()
    {
        if (song?.SongParts?.Any() == true)
        {
            // Extract all unique chord names from the song
            var chords = song.SongParts
                .SelectMany(part => part.LyricLines ?? Enumerable.Empty<LyricLineDto>())
                .SelectMany(line => line.LyricSegments ?? Enumerable.Empty<LyricSegmentDto>())
                .Where(segment => segment.Chord != null)
                .Select(segment => segment.Chord!.ChordName)
                .Distinct()
                .ToArray();

            if (chords.Length > 0)
            {
                chordTransposer = new ChordTransposer();
                chordTransposer.StoreOriginalChords(chords);
                originalChords = chords;
            }
        }
    }

    private string GetTransposedChordName(string originalChordName)
    {
        if (chordTransposer == null || string.IsNullOrEmpty(originalChordName))
            return originalChordName;

        var totalSemitones = transpose - capo; // Capo effectively transposes down
        return chordTransposer.TransposeChord(originalChordName, totalSemitones);
    }

    private void IncreaseTranspose()
    {
        if (transpose < 12)
        {
            transpose++;
            StateHasChanged();
        }
    }

    private void DecreaseTranspose()
    {
        if (transpose > -12)
        {
            transpose--;
            StateHasChanged();
        }
    }

    private void IncreaseCapo()
    {
        if (capo < 12)
        {
            capo++;
            StateHasChanged();
        }
    }

    private void DecreaseCapo()
    {
        if (capo > 0)
        {
            capo--;
            StateHasChanged();
        }
    }

    private void ResetTranspose()
    {
        transpose = 0;
        //StateHasChanges();
    }

    private void ResetCapo()
    {
        capo = 0;
        //StateHasChanges();
    }

    public void Dispose()
    {
        // Clean up any resources if needed
        chordTransposer = null;
        originalChords = null;
    }

    private void CustomizeSong(string songId)
    {
        if(string.IsNullOrEmpty(songId))
        {
            _modalService.Show(new ModalOptionDto
            {
                Title = "Error",
                Message = "Song ID is required to customize the song.",
                ButtonText = "Close",
                OptionType = OptionType.Error,
                Context = new ModalContext
                {
                    ActionType = "CustomizeSong",
                    Data = "Song ID is null or empty"
                }
            });
            return;
        }
        _navManager.NavigateTo("/compose?songId=" + songId);
    }

    private async Task ConfirmModal()
    {
        if (_modalService.CurrentModal?.Context?.ActionType == "PrintSong")
        {
            await PrintAsync();
        }
        else if (_modalService.CurrentModal?.Context?.ActionType == "CreateShareLink")
        {
            await ShareLinkAsync();
        }
        else
        {
            _modalService.Close();
        }
        await CloseModal();
    }

    private async Task CloseModal()
    {
        await Task.Delay(100);
        _modalService.Close();
        StateHasChanged();
    }

    private string RenderSongHtml()
    {
        if (song is null) return string.Empty;

        // simple standalone HTML for printing/sharing with transposed chords
        var sb = new System.Text.StringBuilder();
        sb.AppendLine("<style>body{font-family: system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif; padding:24px;} .title{font-weight:700; font-size:1.4rem; text-align:center; margin-bottom:8px;} .num{opacity:.6; margin-right:8px;} .section{margin-top:20px;} .line{display:flex; gap:10px; flex-wrap:wrap; margin-bottom:6px;} .seg{display:flex; flex-direction:column; min-width:40px;} .ch{color:#0d6efd; font-weight:600; font-size:.9rem;} .ly{opacity:.9;}</style>");
        sb.Append("<div class='header' style='display:flex; justify-content:center; align-items:center; margin-bottom:8px;'>");
        if (song.SongNumber.HasValue)
        {
            sb.Append($"<span class='num'>{song.SongNumber.Value:D3}</span>");
        }
        sb.Append($"<div class='title'>{System.Net.WebUtility.HtmlEncode(song.Title)}</div></div>");

        // Add transpose/capo info if applied
        if (transpose != 0 || capo != 0)
        {
            sb.Append($"<div style='text-align:center; margin-bottom:16px; font-size:0.9rem; opacity:0.8;'>");
            if (transpose != 0) sb.Append($"Transposed: {transpose:+#;-#;0} ");
            if (capo != 0) sb.Append($"Capo: {capo}");
            sb.Append("</div>");
        }

        if (song.SongParts?.Any() == true)
        {
            foreach (var verse in song.SongParts.OrderBy(v => v.PartNumber))
            {
                sb.Append($"<div class='section'><h3 style='text-align:center; opacity:.8;'>Verse {verse.PartNumber:D2}</h3>");
                if (verse.LyricLines?.Any() == true)
                {
                    foreach (var line in verse.LyricLines.OrderBy(l => l.LyricLineOrder))
                    {
                        sb.Append("<div class='line'>");
                        if (line.LyricSegments?.Any() == true)
                        {
                            foreach (var seg in line.LyricSegments.OrderBy(s => s.LyricOrder))
                            {
                                sb.Append("<div class='seg'>");
                                if (seg.Chord != null)
                                {
                                    var transposedChord = GetTransposedChordName(seg.Chord.ChordName);
                                    sb.Append($"<div class='ch'>{System.Net.WebUtility.HtmlEncode(transposedChord)}</div>");
                                }
                                sb.Append($"<div class='ly'>{System.Net.WebUtility.HtmlEncode(seg.Lyric ?? string.Empty)}</div>");
                                sb.Append("</div>");
                            }
                        }
                        sb.Append("</div>");
                    }
                }
                sb.Append("</div>");
            }
        }

        return sb.ToString();
    }

    private async Task PrintAsync()
    {
        try
        {
            var html = RenderSongHtml();
            //await _printService.PrintAsync(html, song?.Title ?? "Song");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Print failed for song {SongId}", SongId);
            _modalService.Show(new ModalOptionDto
            {
                Title = "Error",
                Message = "Failed to print song.",
                ButtonText = "Close",
                OptionType = OptionType.Error,
                Context = new ModalContext
                {
                    ActionType = "PrintSong",
                    Data = "Failed to print song with ID: " + SongId
                }
            });
        }
    }

    private async Task GoBack()
    {
        //_navManager.NavigateTo("/songs-list");
        await JsRt.InvokeVoidAsync("goBack");
    }

    private async Task ShareLinkAsync()
    {
        try
        {
            // var response = await _shareLinksApi.CreateShareLink(new FRELODYUI.Shared.Dtos.ShareLinkCreateRequest(SongId));
            // if (response.IsSuccessStatusCode && response.Content is not null)
            // {
            //     var link = response.Content.Url;
            //     await _clipboard.CopyTextAsync(link);
            //     await OpenModal(new ModalOptionDto
            //     {
            //         Title = "Share link copied",
            //         Message = link,
            //         ButtonText = "Done",
            //         OptionType = OptionType.Success
            //     });
            // }
            // else
            // {
            //     var err = _apiResponseHandler.GetApiErrorMessage(response);
            //     await OpenModal(new ModalOptionDto
            //     {
            //         Title = "Error",
            //         Message = err,
            //         ButtonText = "Close",
            //         OptionType = OptionType.Error
            //     });
            // }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Share link creation failed for song {SongId}", SongId);
            _modalService.Show(new ModalOptionDto
            {
                Title = "Error",
                Message = "An error occurred while creating the share link.",
                ButtonText = "Close",
                OptionType = OptionType.Error,
                Context = new ModalContext
                {
                    ActionType = "CreateShareLink",
                    Data = ex.Message
                }
            });
        }
    }
}