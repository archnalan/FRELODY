@inject ILogger<ChordCustomize> _logger

<div class="modal fade @(show ? "show" : "")" 
     style="display: @(show ? "block" : "none");" 
     tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content p-2">
            <div class="modal-header border-0">
                <h5 class="modal-title">Custom Chord</h5>
                <button type="button" class="btn btn-close" @onclick="Close"></button>
            </div>
            <div class="modal-body border-0 px-3">
                <EditForm Model="@Chord" OnValidSubmit="@Save">
                    <DataAnnotationsValidator />

                    <div class="form-group mb-3">
                        <label>Chord Name</label>
                        <InputText class="form-control" @bind-Value="@Chord.ChordName" required/>
                        <div style="min-height:1.5rem">
                            <ValidationMessage For="@(() => Chord.ChordName)" />
                        </div>
                    </div>

                    <div class="form-group text-end">
                        <button type="button" class="btn btn-outline-danger me-3" @onclick="Close">Cancel</button>
                        <button type="submit" class="btn btn-outline-primary">Save</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@if (show)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public ChordSimpleDto Chord { get; set; } = new();
    [Parameter] public EventCallback<ChordSimpleDto> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public bool show { get; set; }

    private IBrowserFile uploadedFile;

    public void Open()
    {
        show = true;
        StateHasChanged();
    }

    public void Close()
    {
        show = false;
        OnCancel.InvokeAsync();
    }

    private async Task Save()
    {
        await OnSave.InvokeAsync(Chord);
        show = false;
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
        // Here you would handle the file upload to your server
        // For demo purposes, we'll just create a preview
        var buffer = new byte[uploadedFile.Size];
        await uploadedFile.OpenReadStream().ReadAsync(buffer);
        Chord.ChordAudioFilePath = $"data:{uploadedFile.ContentType};base64,{Convert.ToBase64String(buffer)}";
    }
}