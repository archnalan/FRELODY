@inject ILogger<ChordCustomize> _logger

<div class="modal fade @(show ? "show" : "")" style="display: @(show ? "block" : "none");" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@(Chord?.Id == "" ? "Create Chord" : "Edit Chord")</h5>
                <button type="button" class="close" @onclick="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <EditForm Model="@Chord" OnValidSubmit="@Save">
                    <DataAnnotationsValidator />

                    <div class="form-group">
                        <label>Chord Name</label>
                        <InputText class="form-control" @bind-Value="@Chord.ChordName" />
                        <ValidationMessage For="@(() => Chord.ChordName)" />
                    </div>

                    <div class="form-group">
                        <label>Description</label>
                        <InputTextArea class="form-control" @bind-Value="@Chord.ChordAudioFilePath" />
                    </div>

                    <div class="form-group">
                        <label>Fingering Diagram</label>
                        <InputFile class="form-control" OnChange="HandleFileUpload" />
                        @if (!string.IsNullOrEmpty(Chord.ChordAudioFilePath))
                        {
                            <img src="@Chord.ChordAudioFilePath" class="img-thumbnail mt-2" style="max-width: 200px;" />
                        }
                    </div>

                    <div class="form-group">
                        <button type="submit" class="btn btn-primary">Save</button>
                        <button type="button" class="btn btn-secondary ml-2" @onclick="Close">Cancel</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@if (show)
{
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public ChordSimpleDto Chord { get; set; } = new();
    [Parameter] public EventCallback<ChordSimpleDto> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private bool show = false;
    private IBrowserFile uploadedFile;

    public void Open()
    {
        show = true;
        StateHasChanged();
    }

    public void Close()
    {
        show = false;
        OnCancel.InvokeAsync();
    }

    private async Task Save()
    {
        await OnSave.InvokeAsync(Chord);
        show = false;
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        uploadedFile = e.File;
        // Here you would handle the file upload to your server
        // For demo purposes, we'll just create a preview
        var buffer = new byte[uploadedFile.Size];
        await uploadedFile.OpenReadStream().ReadAsync(buffer);
        Chord.ChordAudioFilePath = $"data:{uploadedFile.ContentType};base64,{Convert.ToBase64String(buffer)}";
    }
}