
<div class="dropend" style="width: 100%;">
    <div class="position-relative">
        <input class="form-control form-control-sm pe-4"
               type="text"
               tabindex="@TabIndex" 
               placeholder="add chord..."
               autocomplete="off"
               @bind="searchTerm"
               @oninput="HandleSearch"
               @onfocus="@(() => ToggleDropdown(true))" />

        <i class="bi bi-chevron-down position-absolute top-50 end-0 translate-middle-y me-2 text-muted"
           @onclick="@(() => ToggleDropdown(!showDropdown))"></i>
    </div>   
    
    @if (showDropdown)
    {
        <div class="dropdown-menu show"
             style="position: absolute; top: 0; left: 100%; width: 200px; max-height: 300px; overflow-y: auto; z-index:5">
            <button tabindex="@(TabIndex + 1)" class="dropdown-item text-muted" type="button" @onclick="() => SelectNone()">
                <i class="bi bi-x-circle"></i> None
            </button>
            <div class="dropdown-divider"></div>
            @foreach (var chord in filteredChords)
            {
                <button tabindex="@(TabIndex + 1)" class="dropdown-item" type="button" @onclick="() => SelectChord(chord)">
                    @chord.ChordName
                </button>
            }
            @if (!filteredChords.Any())
            {
                <div class="dropdown-item text-muted">No chords found</div>
            }
            <div class="dropdown-divider"></div>
            <button tabindex="@(TabIndex + 3)" class="dropdown-item text-primary" type="button" @onclick="OpenCustomizeModal">
                <i class="bi bi-plus-circle-dotted"></i> Customize
            </button>
        </div>
        <div style="z-index:0" class="modal-backdrop bg-transparent" @onclick="() => ToggleDropdown(false)"></div>
    }
</div>

@if (showCustomizeModal)
{
    <ChordCustomize Show="showCustomizeModal"
                    Content="SelectedChord"
                    OnSave="HandleChordSaved" 
                    OnCancel="CloseCustomizeModal" />
}

@if (_modalService.IsModalVisible)
{
    <DialogModal IsVisible="true"
                 Modal="@_modalService.CurrentModal"
                 OnCloseModal="CloseModal"
                 OnConfirmModal="ConfirmModal" />
}


@code {
    [Parameter] public ChordDto SelectedChord { get; set; } = new();
    [Parameter] public EventCallback<ChordDto> SelectedChordChanged { get; set; }
    [Parameter] public int TabIndex { get; set; } = 0;

    private string searchTerm = "";
    private bool showDropdown = false;
    private bool showCustomizeModal = false;
    private List<ChordDto> AvailableChords { get; set; } = new();
    private List<ChordDto> filteredChords = new();

    protected async override Task OnInitializedAsync()
    {
        searchTerm = SelectedChord.ChordName ?? "";
        await LoadChords();
    }

    private async Task LoadChords()
    {
        var response = await _chordsApi.GetAllChords();
        if (response.IsSuccessStatusCode)
        {
            AvailableChords = response.Content!;
            filteredChords = response.Content!;
        }
        else
        {
            var errorMessage = _apiResponseHandler.GetApiErrorMessage(response);
            _modalService.Show(new ModalOptionDto
            {
                Title = "Error",
                Message = errorMessage,
                ButtonText = "Close",
                OptionType = OptionType.Error,
                Context = new ModalContext
                {
                    ActionType = "LoadChords",
                    Data = errorMessage
                }
            });
        }

    }

    private void HandleSearch(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        FilterChords();
    }

    private void FilterChords()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredChords = AvailableChords;
            return;
        }

        filteredChords = AvailableChords
            .Where(c => c.ChordName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private async Task SelectChord(ChordDto chord)
    {
        SelectedChord = chord;
        searchTerm = chord.ChordName;
        showDropdown = false;
        await SelectedChordChanged.InvokeAsync(chord);
    }

    private async Task SelectNone()
    {
        var emptyChord = new ChordDto();
        SelectedChord = emptyChord;
        searchTerm = "";
        showDropdown = false;
        await SelectedChordChanged.InvokeAsync(emptyChord);
    }

    private void ToggleDropdown(bool show)
    {
        showDropdown = show;
    }

    private void OpenCustomizeModal()
    {
        showCustomizeModal = true;
        showDropdown = false;
        SelectedChord.ChordName = searchTerm;
        StateHasChanged();
    }

    private void CloseCustomizeModal()
    {
        showCustomizeModal = false;
    }

    private async Task HandleChordSaved(ChordDto newChord)
    {
        newChord = AvailableChords.FirstOrDefault(c => 
                   c.ChordName.Trim().ToLower() == newChord.ChordName.Trim().ToLower()) 
                   ?? newChord;
        if (!AvailableChords.Any(c => c.Id == newChord.Id))
        {
            var chord = new ChordCreateDto
            {
                ChordName = newChord.ChordName,
                ChordType = ChordTypeService.DetermineChordType(newChord.ChordName),
            };
            var response = await _chordsApi.CreateChord(chord);
            if(!response.IsSuccessStatusCode)
            {
                var errorMessage = _apiResponseHandler.GetApiErrorMessage(response);
                _modalService.Show(new ModalOptionDto
                {
                    Title = "Error",
                    Message = errorMessage,
                    ButtonText = "Close",
                    OptionType = OptionType.Error,
                    Context = new ModalContext
                    {
                        ActionType = "CreateChord",
                        Data = errorMessage
                    }
                });
                return;
            }
            AvailableChords.Add(newChord);
        }

        // Select the new chord
        await SelectChord(newChord);
        CloseCustomizeModal();
    }

    private async Task ConfirmModal()
    {
        //Handle specific contexts
        await CloseModal();
    }

    private async Task CloseModal()
    {
        await Task.Delay(100);
        _modalService.Close();
        StateHasChanged();
    }
}