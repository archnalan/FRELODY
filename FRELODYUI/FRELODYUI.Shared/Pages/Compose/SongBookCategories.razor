@page "/songbooks/{SongBookId}"
@using FRELODYUI.Shared.Services
@inject IFormFactor FormFactor

<PageTitle>Song Books</PageTitle>

<h3 class="mb-4">Song Books</h3>
@if (categories != null)
{
    @foreach (var category in categories)
    {
        <div class="card mb-3 p-2 shadow-sm">
            <div class="card-body justify-content-between">
                <h5 class="card-title">@category.Name</h5>
                <a href="@($"songbooks/categories/{category.Id}")" class="btn btn-primary">Categories</a>
            </div>
        </div>
    }
}

<!--Welcome to your new app running on <em>@factor</em> using <em>@platform</em>-->
@if (_modalService.IsModalVisible)
{
    <DialogModal IsVisible="true"
                 Modal="@_modalService.CurrentModal"
                 OnCloseModal="CloseModal"
                 OnConfirmModal="ConfirmModal" />
}


@code {
    [Parameter]
    public string? SongBookId { get; set; }
    private string factor => FormFactor.GetFormFactor();
    private string platform => FormFactor.GetPlatform();
    private List<CategoryDto> categories = new();
    private ModalOptionDto modalOption = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        if (!string.IsNullOrEmpty(SongBookId))
        {
            var songBookResult = await _categoriesApi.GetCategoriesBySongBookId(SongBookId);
            if (songBookResult.IsSuccessStatusCode)
            {
                categories = songBookResult.Content!;
                StateHasChanged();
            }
            else
            {
                var errorMessage = _apiResponseHandler.GetApiErrorMessage(songBookResult);
              _modalService.Show(new ModalOptionDto
                {
                    Title = "Error",
                    Message = errorMessage,
                    OptionType = OptionType.Error,
                    ButtonText = "OK"
                });
            }            
        }
        else
        {
            _modalService.Show(new ModalOptionDto
            {
                Title = "Error",
                Message = "Song Book ID is not provided.",
                ButtonText = "OK",
                OptionType = OptionType.Error
            });     
        }
    }

    private async Task ConfirmModal()
    {
        // Handle confirmation logic here
        StateHasChanged();
    }

    private async Task CloseModal()
    {
        await Task.Delay(100);
        _modalService.Close();
        StateHasChanged();
    }
}
