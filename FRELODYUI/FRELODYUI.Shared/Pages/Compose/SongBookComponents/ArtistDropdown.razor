@inject ILogger<ArtistDropdown> _logger

<div class="dropdown" style="width: 100%;">
    <div class="position-relative">
        <input class="form-control form-control-sm pe-4"
               type="text"
               tabindex="@TabIndex" 
               @ref="searchInput"
               placeholder="add artist..."
               autocomplete="off"
               @bind="searchTerm"
               @oninput="HandleSearch"
               @onfocus="@(() => ToggleDropdown(true))" />

        <i class="bi bi-chevron-down position-absolute top-50 end-0 translate-middle-y me-2 text-muted"
           @onclick="@(() => ToggleDropdown(!showDropdown))"></i>
    </div>   
    
    @if (showDropdown)
    {
        <div class="dropdown-menu show w-100"
             style="position: absolute; max-height: 300px; overflow-y: auto; z-index:5">
            <button tabindex="@(TabIndex + 1)" class="dropdown-item text-muted" type="button" @onclick="() => SelectNone()">
                <i class="bi bi-x-circle"></i> None
            </button>
            <div class="dropdown-divider"></div>
            @foreach (var artist in filteredArtists)
            {
                <button tabindex="@(TabIndex + 1)" class="dropdown-item" type="button" @onclick="() => SelectArtist(artist)">
                    <div class="d-flex flex-column">
                        <span class="fw-semibold">@artist.Name</span>
                        @if (!string.IsNullOrEmpty(artist.Country))
                        {
                            <small class="text-muted">@artist.Country</small>
                        }
                    </div>
                </button>
            }
            @if (!filteredArtists.Any())
            {
                <div class="dropdown-item text-muted">No artists found</div>
            }
            <div class="dropdown-divider"></div>
            <button tabindex="@(TabIndex + 3)" class="dropdown-item text-primary" type="button" @onclick="OpenCustomizeModal">
                <i class="bi bi-plus-circle-dotted"></i> Add New Artist
            </button>
        </div>
        <div style="z-index:0" class="modal-backdrop bg-transparent" @onclick="() => ToggleDropdown(false)"></div>
    }
</div>

@if (showCustomizeModal)
{
    <ArtistCustomize Show="showCustomizeModal"
                     Content="SelectedArtist"
                     OnSave="HandleArtistSaved" 
                     OnCancel="CloseCustomizeModal" />
}

@if (_modalService.IsModalVisible)
{
    <DialogModal IsVisible="true"
                 Modal="@_modalService.CurrentModal"
                 OnCloseModal="CloseModal"
                 OnConfirmModal="ConfirmModal" />
}

@code {
    [Parameter] public ArtistDto SelectedArtist { get; set; } = new();
    [Parameter] public EventCallback<ArtistDto> SelectedArtistChanged { get; set; }
    [Parameter] public int TabIndex { get; set; } = 0;

    private string searchTerm = "";
    private bool showDropdown = false;
    private bool showCustomizeModal = false;
    private List<ArtistDto> AvailableArtists { get; set; } = new();
    private List<ArtistDto> filteredArtists = new();
    private ElementReference searchInput;

    protected async override Task OnInitializedAsync()
    {
        searchTerm = SelectedArtist?.Name ?? "";
        await LoadArtists();
    }

    private async Task LoadArtists()
    {
        var response = await _artistsApi.GetAllArtists();
        if (response.IsSuccessStatusCode)
        {
            AvailableArtists = response.Content!;
            filteredArtists = response.Content!;
        }
        else
        {
            var errorMessage = _apiResponseHandler.GetApiErrorMessage(response);
            _modalService.Show(new ModalOptionDto
            {
                Title = "Error",
                Message = errorMessage,
                ButtonText = "Close",
                OptionType = OptionType.Error,
                Context = new ModalContext
                {
                    ActionType = "LoadArtists",
                    Data = errorMessage
                }
            });
        }
    }

    public async Task FocusInput()
    {
        await searchInput.FocusAsync();
    }

    private void HandleSearch(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? "";
        FilterArtists();
    }

    private void FilterArtists()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredArtists = AvailableArtists;
            return;
        }

        filteredArtists = AvailableArtists
            .Where(a => a.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                        (!string.IsNullOrEmpty(a.Country) && a.Country.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
            .ToList();
    }

    private async Task SelectArtist(ArtistDto artist)
    {
        SelectedArtist = artist;
        searchTerm = artist.Name;
        showDropdown = false;
        await SelectedArtistChanged.InvokeAsync(artist);
    }

    private async Task SelectNone()
    {
        var emptyArtist = new ArtistDto();
        SelectedArtist = emptyArtist;
        searchTerm = "";
        showDropdown = false;
        await SelectedArtistChanged.InvokeAsync(emptyArtist);
    }

    private void ToggleDropdown(bool show)
    {
        showDropdown = show;
    }

    private void OpenCustomizeModal()
    {
        showCustomizeModal = true;
        showDropdown = false;
        if (SelectedArtist != null) SelectedArtist.Name = searchTerm;
        StateHasChanged();
    }

    private void CloseCustomizeModal()
    {
        showCustomizeModal = false;
    }

    private async Task HandleArtistSaved(ArtistDto newArtist)
    {
        // Check if artist already exists
        newArtist = AvailableArtists.FirstOrDefault(a => 
                     a.Name.Trim().ToLower() == newArtist.Name.Trim().ToLower()) 
                     ?? newArtist;
        
        if (!AvailableArtists.Any(a => a.Id == newArtist.Id))
        {
            newArtist.Id = Guid.NewGuid().ToString();
            var response = await _artistsApi.CreateArtist(newArtist);
            if(!response.IsSuccessStatusCode)
            {
                var errorMessage = _apiResponseHandler.GetApiErrorMessage(response);
                _modalService.Show(new ModalOptionDto
                {
                    Title = "Error",
                    Message = errorMessage,
                    ButtonText = "Close",
                    OptionType = OptionType.Error,
                    Context = new ModalContext
                    {
                        ActionType = "CreateArtist",
                        Data = errorMessage
                    }
                });
                return;
            }
            
            // Add the created artist to the list
            var createdArtist = response.Content!;
            AvailableArtists.Add(createdArtist);
            newArtist = createdArtist;
        }

        // Select the new artist
        await SelectArtist(newArtist);
        CloseCustomizeModal();
    }

    private async Task ConfirmModal()
    {
        //Handle specific contexts
        await CloseModal();
    }

    private async Task CloseModal()
    {
        await Task.Delay(100);
        _modalService.Close();
        StateHasChanged();
    }
}