@page "/songbooks/categories/{CategoryId}"
@using FRELODYUI.Shared.Services
@inject IFormFactor FormFactor

<PageTitle>Song</PageTitle>

<h3 class="mb-4">Song Books</h3>
@if (songs != null)
{
    @foreach (var song in songs)
    {
        <div class="card mb-3 p-2 shadow-sm">
            <div class="card-body">
                <span class="card-text">@song.SongNumber</span>
                <span class="card-title">@song.Title</span>
            </div>
        </div>
    }
}

@if (modalDisplay == "block;")
{
    <DialogModal ModalClass="@modalClass"
                 ModalDisplay="@modalDisplay"
                 Modal="@modalOption"
                 OnCloseModal="CloseModal" />
}

@code {
    [Parameter]
    public string? CategoryId { get; set; }
    private string factor => FormFactor.GetFormFactor();
    private string platform => FormFactor.GetPlatform();
    private List<SongDto> songs = new();
    public string modalDisplay = "none;";
    public string modalClass = "";
    private string message = "";
    private ModalOptionDto modalOption = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        if (!string.IsNullOrEmpty(CategoryId))
        {
            var songResult = await _categoriesApi.GetAllSongsByCategoryId(CategoryId);
            if (songResult.IsSuccessStatusCode)
            {
                songs = songResult.Content!;
                StateHasChanged();
            }
            else
            {
                var errorMessage = _apiResponseHandler.GetApiErrorMessage(songResult);
                await OpenModal(new ModalOptionDto
                {
                    Title = "Error",
                    Message = errorMessage,
                    ButtonText = "OK",
                });
            }
        }
        else
        {
            await OpenModal(new ModalOptionDto
            {
                Title = "Error",
                Message = "Song Book ID is not provided.",
                ButtonText = "OK",
            });
        }
    }

    private async Task OpenModal(ModalOptionDto option)
    {
        modalClass = "show";
        modalDisplay = "block;";
        modalOption = option;
        await Task.CompletedTask;
        StateHasChanged();
    }

    private async Task CloseModal()
    {
        await Task.Delay(100);
        modalDisplay = "none;";
        message = string.Empty;
        modalClass = string.Empty;
        StateHasChanged();
    }
}
