@page "/songbooks/categories/{CategoryId}"
@using FRELODYUI.Shared.Services
@inject IFormFactor FormFactor

<PageTitle>Song</PageTitle>

<h3 class="mb-4">Song Books</h3>
@if (songs != null)
{
    @foreach (var song in songs)
    {
        <div class="card mb-3 p-2 shadow-sm">
            <div class="card-body">
                <span class="card-text">@song.SongNumber</span>
                <span class="card-title">@song.Title</span>
            </div>
        </div>
    }
}

@if (_modalService.IsModalVisible)
{
    <DialogModal IsVisible="true"
                 Modal="@_modalService.CurrentModal"
                 OnCloseModal="CloseModal"
                 OnConfirmModal="ConfirmModal" />
}


@code {
    [Parameter]
    public string? CategoryId { get; set; }
    private string factor => FormFactor.GetFormFactor();
    private string platform => FormFactor.GetPlatform();
    private List<SongDto> songs = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        if (!string.IsNullOrEmpty(CategoryId))
        {
            var songResult = await _categoriesApi.GetAllSongsByCategoryId(CategoryId);
            if (songResult.IsSuccessStatusCode)
            {
                songs = songResult.Content!;
                StateHasChanged();
            }
            else
            {
                var errorMessage = _apiResponseHandler.GetApiErrorMessage(songResult);
                _modalService.Show(new ModalOptionDto
                {
                    Title = "Error",
                    Message = errorMessage,
                    OptionType = OptionType.Error,
                    ButtonText = "OK"
                });
            }
        }
        else
        {
            _modalService.Show(new ModalOptionDto
            {
                Title = "Error",
                Message = "Category ID is not provided.",
                OptionType = OptionType.Error,
                ButtonText = "OK"
            });
        }
    }

    private async Task ConfirmModal()
    {
        //Handle confirmation logic here
        await CloseModal();
    }
    private async Task CloseModal()
    {
        await Task.Delay(100);
        _modalService.Close();
        StateHasChanged();
    }
}
