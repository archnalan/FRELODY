@page "/compose"
@using Microsoft.AspNetCore.WebUtilities
@inject ILogger<SongBoard> _logger

<div class="w-100 d-flex flex-column justify-content-center px-4">
	<h3 class="fw-bold text-center mb-3">Song Editor</h3>
    @if (isLoading)
    {
        <div class="d-flex justify-content-center my-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="d-flex align-items-center justify-content-between mb-3">
            <div class="d-flex flex-grow-1">
                <input type="number"
                       @bind="SongNumber"
                       class="form-control me-2"
                       placeholder="Song Number"
                       style="width:5rem" />

                <input type="text"
                       @bind="SongTitle"
                       class="form-control w-50"
                       placeholder="Song Title" />
            </div>
            <button @onclick="HandleSongSave" class="btn btn-primary">
                Save Song
            </button>
        </div>
        @if (initialVerseItems.Any())
        {
            <TabsComponent InitialItems="initialVerseItems"
            ItemsCountLimit="MAX_SECTIONS"
                       OnTabAdd="HandleTabAdd"
            RenderTab="RenderVerseTab" />
        }
        else
        {
            <div class="alert alert-warning">
                No sections found. Click '+' to add a new section.
            </div>
        }
    }
    
</div>
@if (modalDisplay == "block;")
{
    <DialogModal 
        ModalClass="@modalClass"
        ModalDisplay="@modalDisplay"
        Modal="@modalOption"
        OnCloseModal="CloseModal" />
}

@code {
    [Parameter]
    public string? SongId { get; set; }
    const int MAX_SECTIONS = 25;
    private string SongTitle = "My New Song";
    private int SongNumber = 1;
    private Dictionary<int, List<SegmentCreateDto>> AllVerseSegments =
    new() { [1] = new List<SegmentCreateDto>() };
    private List<TabsComponent.TabsComponentItem> initialVerseItems = new();
    public string modalDisplay = "none;";
    public string modalClass = "";
    private string message = "";
    private ModalOptionDto modalOption = default!;
    private bool isLoading = true;

    private RenderFragment RenderVerseTab(int id) => @<SongSectionBoard SectionId="@id"
            InitialSegments="@AllVerseSegments.GetValueOrDefault(id)"
            OnSegmentsUpdate="segments => HandleVerseUpdate(id, segments)" />
    ;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            var uri = _navManager.ToAbsoluteUri(_navManager.Uri);
            var query = QueryHelpers.ParseQuery(uri.Query);
            if (query.TryGetValue("songId", out var songIdValues))
            {
                SongId = songIdValues.FirstOrDefault();
            }
            if (string.IsNullOrEmpty(SongId))
            {
                // Initialize new song
                initialVerseItems = new List<TabsComponent.TabsComponentItem>
                {
                    new TabsComponent.TabsComponentItem
                    {
                        Id = 1,
                        Title = builder => builder.AddContent(0, SongSection.Verse),
                        Content = builder =>
                        {
                            builder.OpenComponent<SongSectionBoard>(0);
                            builder.AddAttribute(1, "SectionId", 1);
                            builder.AddAttribute(2, "OnSegmentsUpdate",
                                EventCallback.Factory.Create<List<SegmentCreateDto>>(
                                    this, segments => HandleVerseUpdate(1, segments)));
                            builder.CloseComponent();
                        }
                    }
                };
                AllVerseSegments[1] = new List<SegmentCreateDto>();
            }
            else
            {
                var response = await _songsApi.GetSongWithChordsById(SongId);
                if (response.IsSuccessStatusCode)
                {
                    var song = response.Content!;
                    SongTitle = song.Title;
                    SongNumber = song.SongNumber ?? 0;
                    initialVerseItems = new List<TabsComponent.TabsComponentItem>();
                    AllVerseSegments = new Dictionary<int, List<SegmentCreateDto>>();

                    // Process verses
                    foreach (var verse in song.SongParts.OrderBy(v => v.PartNumber))
                    {
                        var verseSegments = new List<SegmentCreateDto>();
                        foreach (var line in verse.LyricLines.OrderBy(ll => ll.LyricLineOrder))
                        {
                            foreach (var segment in line.LyricSegments.OrderBy(ls => ls.LyricOrder))
                            {
                                verseSegments.Add(new SegmentCreateDto
                                    {
                                        Id = segment.Id.ToString(),
                                        Lyric = segment.Lyric,
                                        ChordId = segment.ChordId?.ToString(),
                                        ChordName = segment.Chord?.ChordName,
                                        LineNumber = line.LyricLineOrder,
                                        PartNumber = verse.PartNumber,
                                        PartName = SongSection.Verse,
                                        LyricOrder = segment.LyricOrder
                                    });
                            }
                        }

                        AllVerseSegments[verse.PartNumber] = verseSegments;

                        initialVerseItems.Add(new TabsComponent.TabsComponentItem
                            {
                                Id = verse.PartNumber,
                                Title = builder => builder.AddContent(0, $"{SongSection.Verse} {verse.PartNumber}"),
                                Content = builder =>
                                {
                                    builder.OpenComponent<SongSectionBoard>(0);
                                    builder.AddAttribute(1, "SectionId", verse.PartNumber);
                                    builder.AddAttribute(2, "OnSegmentsUpdate",
                                        EventCallback.Factory.Create<List<SegmentCreateDto>>(
                                            this, segments => HandleVerseUpdate(verse.PartNumber, segments)));
                                    builder.AddAttribute(3, "InitialSegments", AllVerseSegments[verse.PartNumber]);
                                    builder.CloseComponent();
                                }
                            });
                    }
                }
                else
                {
                    var errorMessage = _apiResponseHandler.GetApiErrorMessage(response);
                    await OpenModal(new ModalOptionDto
                        {
                            Title = "Error",
                            Message = errorMessage,
                            ButtonText = "Close",
                            OptionType = OptionType.Error
                        });
                }
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error initializing song board");
            await OpenModal(new ModalOptionDto
                {
                    Title = "Initialization Error",
                    Message = "An error occurred while initializing the song board.",
                    ButtonText = "Close",
                    OptionType = OptionType.Error
                });
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }

    }

    private async Task HandleSongSave()
    {
        var allSegments = AllVerseSegments.Values.SelectMany(v => v).ToList();
        var songData = new SimpleSongCreateDto
        {
            Title = SongTitle,
            SongNumber = SongNumber,
            SongLyrics = allSegments
        };

        if (allSegments.Count == 0)
        {
            await OpenModal(new ModalOptionDto
            {
                Title = "No Segments",
                Message = "Please add at least one segment to save the song.",
                ButtonText = "OK",
                OptionType = OptionType.Warning
            });
            _logger.LogWarning("No segments found to save.");
            return;
        }

        Refit.IApiResponse<SongDto> songResult;
        if (string.IsNullOrEmpty(SongId) || SongId == "new")
        {
            SongId = null;
            songResult = await _songsApi.CreateSong(songData);
        }
        else
        {
            songResult = await _songsApi.UpdateSong(SongId, songData);
        }

        if (songResult.IsSuccessStatusCode)
        {
            message = $"Song {SongTitle} saved successfully!";
            await OpenModal(new ModalOptionDto
            {
                Title = "Song Saved",
                Message = message,
                ButtonText = "OK",
                OptionType = OptionType.Success
            });
            _logger.LogInformation("Song {songData} saved successfully!", songData);
        }
        else
        {
            var errorMessage = _apiResponseHandler.GetApiErrorMessage(songResult);
            await OpenModal(new ModalOptionDto
            {
                Title = "Error",
                Message = errorMessage,
                ButtonText = "OK",
                OptionType = OptionType.Error
            });
            _logger.LogError("Failed to save song: {Error}", errorMessage);
        }
    }

    private void HandleVerseUpdate(int sectionId, List<SegmentCreateDto> segments)
    {
        AllVerseSegments[sectionId] = segments;
    }

    private void HandleTabAdd(int newTabId)
    {
        if (!AllVerseSegments.ContainsKey(newTabId))
        {
            AllVerseSegments[newTabId] = new List<SegmentCreateDto>();
        }
    }
   
    private async Task OpenModal(ModalOptionDto option)
    {
        modalClass = "show";
        modalDisplay = "block;";
        modalOption = option;
        await Task.CompletedTask;
        StateHasChanged();
    }

    private async Task CloseModal()
    {
        await Task.Delay(100); 
        modalDisplay = "none;";
        message = string.Empty;
        modalClass = string.Empty;
        StateHasChanged();
    }
}