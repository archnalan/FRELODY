@page "/compose"
@inject ILogger<SongBoard> _logger

<div class="w-100 d-flex flex-column justify-content-center px-4">
	<h3 class="fw-bold text-center mb-3">Song Editor</h3>

    <div class="d-flex align-items-center justify-content-between mb-3">
        <div class="d-flex flex-grow-1">
            <input type="number" 
                   @bind="SongNumber" 
                   class="form-control me-2" 
                   placeholder="Song Number" 
                   style="width:5rem"/>
                   
            <input type="text" 
                   @bind="SongTitle" 
                   class="form-control w-50" 
                   placeholder="Song Title" />
        </div>
        <button @onclick="HandleSongSave" class="btn btn-primary">
            Save Song
        </button>
    </div>

    <TabsComponent InitialItems="initialVerseItems"
                   ItemsCountLimit="MAX_VERSES"
                   OnTabAdd="HandleTabAdd"
                   RenderTab="RenderVerseTab" />
</div>
@if (modalDisplay == "block;")
{
    <DialogModal 
        ModalClass="@modalClass"
        ModalDisplay="@modalDisplay"
        Modal="@modalOption"
        OnCloseModal="CloseModal" />
}

@code {
    const int MAX_VERSES = 25;
    private string SongTitle = "My New Song";
    private int SongNumber = 1;
    private Dictionary<int, List<SegmentCreateDto>> AllVerseSegments =
    new() { [1] = new List<SegmentCreateDto>() };
    private List<TabsComponent.TabsComponentItem> initialVerseItems = new();
    public string modalDisplay = "none;";
    public string modalClass = "";
    private string message = "";
    private ModalOptionDto modalOption = default!;

    protected override void OnInitialized()
    {
        // Initialize the tabs
        initialVerseItems = new List<TabsComponent.TabsComponentItem>
            {
            new TabsComponent.TabsComponentItem
            {
                Id = 1,
                Title = builder => builder.AddContent(0, SongSection.Verse),
               Content = builder =>
                {
                    builder.OpenComponent<VerseBoard>(0);
                    builder.AddAttribute(1, "VerseId", 1);
                    builder.AddAttribute(2, "OnSegmentsUpdate",
                        EventCallback.Factory.Create<List<SegmentCreateDto>>(
                            this, segments => HandleVerseUpdate(1, segments)));
                    builder.CloseComponent();
                }
            }
            };
    }
    private async Task HandleSongSave()
    {
        var allSegments = AllVerseSegments.Values.SelectMany(v => v).ToList();
        var songData = new SimpleSongCreateDto
        {
            Title = SongTitle,
            SongNumber = SongNumber,
            SongLyrics = allSegments
        };

        if(allSegments.Count == 0)
        {
            await OpenModal(new ModalOptionDto
            {
                Title = "No Segments",
                Message = "Please add at least one segment to save the song.",
                ButtonText = "OK",
                OptionType = OptionType.Warning
            });

            _logger.LogWarning("No segments found to save.");
            return;
        }

        var songResult = await _songsApi.CreateSong(songData);
        if (songResult.IsSuccessStatusCode)
        {
            message = $"Song {songData.Title} saved successfully!";
            await OpenModal(new ModalOptionDto
            {
                Title = "Song Saved",
                Message = message,
                ButtonText = "OK",
            });
            _logger.LogInformation("Song {songData} saved successfully!",songData);
        }
        else
        {
            var errorMessage =_apiResponseHandler.GetApiErrorMessage(songResult);
            await OpenModal(new ModalOptionDto
            {
                Title = "Error",
                Message = errorMessage,
                ButtonText = "OK",
            });
			// Handle error, e.g., show an error message
			_logger.LogError("Failed to save song:{Error} ",songResult);
		}
    }

    private void HandleVerseUpdate(int verseId, List<SegmentCreateDto> segments)
    {
        AllVerseSegments[verseId] = segments;
    }

    private void HandleTabAdd(int newTabId)
    {
        if (!AllVerseSegments.ContainsKey(newTabId))
        {
            AllVerseSegments[newTabId] = new List<SegmentCreateDto>();
        }
    }
       
    private RenderFragment RenderVerseTab(int id) => @<VerseBoard 
        VerseId="@id" 
        OnSegmentsUpdate="segments => HandleVerseUpdate(id, segments)" />
    ;

    private async Task OpenModal(ModalOptionDto option)
    {
        modalClass = "show";
        modalDisplay = "block;";
        modalOption = option;
        await Task.CompletedTask;
        StateHasChanged();
    }

    private async Task CloseModal()
    {
        await Task.Delay(100); 
        modalDisplay = "none;";
        message = string.Empty;
        modalClass = string.Empty;
        StateHasChanged();
    }
}