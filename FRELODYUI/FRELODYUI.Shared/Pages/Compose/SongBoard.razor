@page "/compose"
@using Microsoft.AspNetCore.WebUtilities
@inject ILogger<SongBoard> _logger

<div class="w-100 d-flex flex-column justify-content-center"
     style="max-width: 65rem;justify-self: center;">
	<h3 class="fw-bold text-center mb-3">Song Editor</h3>
    @if (isLoading)
    {
        <div class="d-flex justify-content-center my-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="d-flex align-items-center justify-content-between mb-3">
            <div class="d-flex flex-grow-1">
                <input type="number"
                       @bind="SongNumber"
                       class="form-control me-2"
                       placeholder="Song Number"
                       style="width:5rem" />

                <input type="text"
                       @bind="SongTitle"
                       class="form-control w-50"
                       placeholder="Song Title" />
            </div>
            <button @onclick="HandleSongSave" class="btn btn-outline-primary">
                Save Song
            </button>
        </div>
        @if (initialPartsItems.Any())
        {
            <TabsComponent InitialItems="initialPartsItems"
                           ItemsCountLimit="MAX_SECTIONS"
                           OnTabAdd="HandleTabAdd"
                           RenderTab="RenderVerseTab"
                           OnTabSort="HandleTabSort"
                           ActiveTabInfoChanged ="HandleActiveTabInfoChanged"/>
        }
        else
        {
            <div class="alert alert-warning">
                No sections found. Click '+' to add a new section.
            </div>
        }
    }
    
</div>
<DialogModal IsVisible="@_modalService.IsModalVisible"
             Modal="@_modalService.CurrentModal"
             OnCloseModal="CloseModal"
             OnConfirmModal="ConfirmModal" />

@code {
    [Parameter]
    public string? SongId { get; set; }
    const int MAX_SECTIONS = 25;
    private string? SongTitle = "My New Song";
    private int SongNumber = 1;
    private Dictionary<int, List<SegmentCreateDto>> AllPartsSegments =
    new() { [1] = new List<SegmentCreateDto>() };
    private List<TabsComponent.TabsComponentItem> initialPartsItems = new();
    private TabsComponent.TabsComponentItem? activeTabItem;
    private bool isLoading = true;

    private RenderFragment RenderVerseTab(int id) => @<SongSectionBoard SectionId="@id"
                  Segments="@AllPartsSegments.GetValueOrDefault(id, new List<SegmentCreateDto>())"
                  ActiveTab="activeTabItem"
                  OnSegmentsUpdate="segments => HandleVerseUpdate(id, segments)" />
;



    protected override async Task OnInitializedAsync()
    {
        try
        {
            var uri = _navManager.ToAbsoluteUri(_navManager.Uri);
            var query = QueryHelpers.ParseQuery(uri.Query);
            if (query.TryGetValue("songId", out var songIdValues))
            {
                SongId = songIdValues.FirstOrDefault();
            }
            if (string.IsNullOrEmpty(SongId))
            {
                // Initialize new song
                initialPartsItems = new List<TabsComponent.TabsComponentItem>
                {
                    new TabsComponent.TabsComponentItem
                    {
                        Id = 1,
                        SectionName = nameof(SongSection.Verse),
                        SectionNumber = 1,
                        Content = builder =>
                        {
                            builder.OpenComponent<SongSectionBoard>(0);
                            builder.AddAttribute(1, "SectionId", 1);
                            builder.AddAttribute(2, "OnSegmentsUpdate",
                                EventCallback.Factory.Create<List<SegmentCreateDto>>(
                                    this, segments => HandleVerseUpdate(1, segments)));
                            builder.AddAttribute(3, "Segments", AllPartsSegments[1]);
                            builder.AddAttribute(4, "ActiveTab", activeTabItem);
                            builder.CloseComponent();
                        }
                    }
                };
                AllPartsSegments[1] = new List<SegmentCreateDto>();
            }
            else
            {
                var response = await _songsApi.GetSongWithChordsById(SongId);
                if (response.IsSuccessStatusCode)
                {
                    var song = response.Content!;
                    SongTitle = song.Title;
                    SongNumber = song.SongNumber ?? 0;
                    initialPartsItems = new List<TabsComponent.TabsComponentItem>();
                    AllPartsSegments = new Dictionary<int, List<SegmentCreateDto>>();

                    // Process parts
                    foreach (var part in song.SongParts!.OrderBy(v => v.PartNumber))
                    {
                        var verseSegments = new List<SegmentCreateDto>();
                        foreach (var line in part.LyricLines!.OrderBy(ll => ll.LyricLineOrder))
                        {
                            foreach (var segment in line.LyricSegments!.OrderBy(ls => ls.LyricOrder))
                            {
                                verseSegments.Add(new SegmentCreateDto
                                    {
                                        Id = segment.Id.ToString(),
                                        Lyric = segment.Lyric,
                                        ChordId = segment.ChordId?.ToString(),
                                        ChordName = segment.Chord?.ChordName,
                                        ChordAlignment = segment.ChordAlignment,
                                        LineNumber = line.LyricLineOrder,
                                        PartNumber = part.PartNumber,
                                        PartName = part.PartName ?? SongSection.Verse,
                                        LyricOrder = segment.LyricOrder
                                    });
                            }
                        }

                        AllPartsSegments[part.PartNumber] = verseSegments;

                        initialPartsItems.Add(new TabsComponent.TabsComponentItem
                            {
                                Id = part.PartNumber,
                                SectionName = part.PartName.ToString() ?? nameof(SongSection.Verse),
                                SectionNumber = part.PartNumber,
                                Content = builder =>
                                {
                                    builder.OpenComponent<SongSectionBoard>(0);
                                    builder.AddAttribute(1, "SectionId", part.PartNumber);
                                    builder.AddAttribute(2, "OnSegmentsUpdate",
                                        EventCallback.Factory.Create<List<SegmentCreateDto>>(
                                            this, segments => HandleVerseUpdate(part.PartNumber, segments)));
                                    builder.AddAttribute(3, "Segments", AllPartsSegments[part.PartNumber]);
                                    builder.AddAttribute(4, "ActiveTab", activeTabItem);
                                    builder.CloseComponent();
                                }
                            });
                    }
                }
                else
                {
                    var errorMessage = _apiResponseHandler.GetApiErrorMessage(response);
                    _modalService.Show(new ModalOptionDto
                    {
                        Title = "Error",
                        Message = errorMessage,
                        ButtonText = "Close",
                        OptionType = OptionType.Error,
                        Context = new ModalContext
                        {
                            ActionType = "SongLoadError",
                            Data = response.Content?.ToString() ?? "No content"
                        }
                    });
                }
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error initializing song board");
            _modalService.Show(new ModalOptionDto
            {
                Title = "Initialization Error",
                Message = "An error occurred while initializing the song board. Please try again later.",
                ButtonText = "Close",
                OptionType = OptionType.Error,
                Context = new ModalContext
                {
                    ActionType = "InitializationError",
                    Data = ex.Message
                }
            });            
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }

    }

    private async Task HandleSongSave()
    {
        var allSegments = AllPartsSegments.Values.SelectMany(v => v).ToList();
        var songData = new SimpleSongCreateDto
        {
            Title = SongTitle,
            SongNumber = SongNumber,
            SongLyrics = allSegments
        };

        if (allSegments.Count == 0)
        {
            _modalService.Show(new ModalOptionDto
            {
                Title = "No Segments",
                Message = "Please add at least one segment to save the song.",
                ButtonText = "OK",
                OptionType = OptionType.Warning,
                Context = new ModalContext
                {
                    ActionType = "NoSegments",
                    Data = "Attempted to save song with no segments"
                }
            });

            _logger.LogWarning("No segments found to save.");
            return;
        }

        Refit.IApiResponse<SongDto> songResult;
        if (string.IsNullOrEmpty(SongId) || SongId == "new")
        {
            SongId = null;
            songResult = await _songsApi.CreateSong(songData);
        }
        else
        {
            songResult = await _songsApi.UpdateSong(SongId, songData);
        }

        if (songResult.IsSuccessStatusCode)
        {
            _modalService.Show(new ModalOptionDto
            {
                Title = "Song Saved",
                Message = $"Song '{SongTitle}' saved successfully!",
                ButtonText = "OK",
                OptionType = OptionType.Success,
                Context = new ModalContext
                {
                    ActionType = "SongSaved",
                    Data = songResult.Content?.ToString() ?? "No content"
                }
            });

            _logger.LogInformation("Song {songData} saved successfully!", songData);
        }
        else
        {
            var errorMessage = _apiResponseHandler.GetApiErrorMessage(songResult);
            _modalService.Show(new ModalOptionDto
            {
                Title = "Save Error",
                Message = errorMessage,
                ButtonText = "Close",
                OptionType = OptionType.Error,
                Context = new ModalContext
                {
                    ActionType = "SongSaveError",
                    Data = songResult.Content?.ToString() ?? "No content"
                }
            });

            _logger.LogError("Failed to save song: {Error}", errorMessage);
        }
    }

    private void HandleActiveTabInfoChanged(TabsComponent.TabsComponentItem tabItem)
    {
        activeTabItem = tabItem;

        if (AllPartsSegments.TryGetValue(tabItem.Id, out var segments))
        {
            foreach (var segment in segments)
            {
                segment.PartNumber = tabItem.SectionNumber;
                segment.PartName = tabItem.SectionEnumValue;
            }
        }
        StateHasChanged();
    }

    private void HandleVerseUpdate(int sectionId, List<SegmentCreateDto> segments)
    {
        AllPartsSegments[sectionId] = segments;
    }

    private void HandleTabAdd(int newTabId)
    {
        if (!AllPartsSegments.ContainsKey(newTabId))
        {
            AllPartsSegments[newTabId] = new List<SegmentCreateDto>();
        }
    }

    private void HandleTabSort(List<TabsComponent.TabsComponentItem> sortedItems)
    {
        // Create new segments dictionary preserving the content but updating positions
        var newAllPartsSegments = new Dictionary<int, List<SegmentCreateDto>>();

        // Copy segments to their new positions and update part numbers
        for (int i = 0; i < sortedItems.Count; i++)
        {
            var tab = sortedItems[i];
            var newPartNumber = i + 1; // Position-based part number (1, 2, 3, etc.)

            if (AllPartsSegments.TryGetValue(tab.Id, out var segments))
            {
                // Create a copy of segments and update their part numbers to match new position
                var updatedSegments = segments.Select(segment => new SegmentCreateDto
                {
                    Id = segment.Id,
                    Lyric = segment.Lyric,
                    ChordId = segment.ChordId,
                    ChordName = segment.ChordName,
                    LineNumber = segment.LineNumber,
                    PartNumber = newPartNumber, // Use position-based numbering
                    PartName = tab.SectionEnumValue,
                    LyricOrder = segment.LyricOrder,
                    AddNextSegment = segment.AddNextSegment,
                    ChordAlignment = segment.ChordAlignment
                }).ToList();

                newAllPartsSegments[tab.Id] = updatedSegments;
            }
            else
            {
                // Create empty list for new tabs
                newAllPartsSegments[tab.Id] = new List<SegmentCreateDto>();
            }
        }

        AllPartsSegments = newAllPartsSegments;

        // Force re-render of the tabs content by triggering StateHasChanged
        StateHasChanged();
    }

    private async Task ConfirmModal()
    {
        // handle specific contexts awaiting confirmation
        if (_modalService.CurrentModal.Context?.ActionType == "")
        {
           
        }
        await CloseModal();
    }

    private async Task CloseModal()
    {
        await Task.Delay(100);
        _modalService.Close();

        StateHasChanged();
    }
}