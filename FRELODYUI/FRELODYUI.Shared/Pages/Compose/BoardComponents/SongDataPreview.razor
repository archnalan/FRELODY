@using FRELODYSHRD.Dtos.SubDtos
@implements IDisposable

<div class="song-preview-overlay @(IsVisible ? "show" : "")" @onclick="HandleBackdropClick">
    <div class="song-preview-container" @onclick:stopPropagation="true">
        <div class="song-preview-header">
            <h4 class="song-preview-title">Song Preview</h4>
            <button class="btn-close" @onclick="HandleCancel" aria-label="Close"></button>
        </div>

        <div class="song-preview-content">
            <!-- Basic Song Info -->
            <div class="preview-section">
                <h6 class="section-title">Basic Information</h6>
                <div class="row g-2">
                    <div class="col-4">
                        <label class="preview-label">Song Number</label>
                        <div class="preview-value">@SongData?.SongNumber?.ToString("D3")</div>
                    </div>
                    <div class="col-8">
                        <label class="preview-label">Title</label>
                        <div class="preview-value title-value">@SongData?.Title</div>
                    </div>
                </div>
            </div>

            <!-- Songbook/Category or Artist/Album -->
            @if (HasBookCategory || HasArtistAlbum)
            {
                <div class="preview-section">
                    <h6 class="section-title">Classification</h6>
                    @if (HasBookCategory)
                    {
                        <div class="classification-item">
                            <i class="bi bi-book me-2"></i>
                            <div class="classification-details">
                                <div class="classification-main">@BookTitle</div>
                                <div class="classification-sub">@CategoryName</div>
                            </div>
                        </div>
                    }
                    else if (HasArtistAlbum)
                    {
                        <div class="classification-item">
                            <i class="bi bi-music-note me-2"></i>
                            <div class="classification-details">
                                <div class="classification-main">@ArtistName</div>
                                <div class="classification-sub">@AlbumTitle</div>
                                @if (TrackNumber > 0)
                                {
                                    <div class="classification-meta">Track @TrackNumber</div>
                                }
                            </div>
                        </div>
                    }
                </div>
            }

            <!-- Song Sections Tabs -->
            @if (HasSongSections)
            {
                <div class="preview-section">
                    <h6 class="section-title">Song Structure</h6>
                    <div class="sections-tabs">
                        <ul class="nav nav-tabs nav-tabs-preview">
                            @foreach (var sectionGroup in GroupedSections)
                            {
                                <li class="nav-item">
                                    <button class="nav-link @(activeSectionTab == sectionGroup.Key ? "active" : "")"
                                            @onclick="() => SetActiveSectionTab(sectionGroup.Key)">
                                        @sectionGroup.Key
                                    </button>
                                </li>
                            }
                        </ul>

                        <div class="section-content-preview">
                            @foreach (var sectionGroup in GroupedSections)
                            {
                                <div class="@(activeSectionTab == sectionGroup.Key ? "d-block" : "d-none")">
                                    @foreach (var part in sectionGroup.Value)
                                    {
                                        <div class="song-part-preview">
                                            <div class="part-header">
                                                <span class="part-name">@part.SectionName</span>
                                                @if (part.SectionNumber > 0)
                                                {
                                                    <span class="part-number">@part.SectionNumber</span>
                                                }
                                            </div>
                                            <div class="part-content">
                                                @foreach (var line in GetPartLines(part.Segments))
                                                {
                                                    <div class="lyric-line-preview">
                                                        @foreach (var segment in line)
                                                        {
                                                            <div class="lyric-segment-preview">
                                                                @if (!string.IsNullOrEmpty(segment.ChordName))
                                                                {
                                                                    <div class="chord-preview">
                                                                        @segment.ChordName
                                                                    </div>
                                                                }
                                                                <div class="lyric-text-preview">
                                                                    @segment.Lyric
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>

        <div class="song-preview-actions">
            <button class="btn btn-outline-secondary" @onclick="HandleCancel">
                <i class="bi bi-x-circle me-2"></i>Cancel
            </button>
            <button class="btn btn-primary" @onclick="HandleSave">
                <i class="bi bi-check-circle me-2"></i>Save Song
            </button>
        </div>
    </div>
</div>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public SimpleSongCreateDto? SongData { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback OnSave { get; set; }

    private string activeSectionTab = "Verse";
    private bool _disposed = false;

    protected override void OnInitialized()
    {
        InitializeActiveTab();
    }

    protected override void OnParametersSet()
    {
        if (IsVisible)
        {
            InitializeActiveTab();
        }
    }

    private void InitializeActiveTab()
    {
        if (GroupedSections.Any())
        {
            activeSectionTab = GroupedSections.First().Key;
        }
    }

    private bool HasBookCategory => SongData?.BookCategory != null &&
        (!string.IsNullOrEmpty(SongData.BookCategory.SongBookId) ||
         !string.IsNullOrEmpty(SongData.BookCategory.CategoryId));

    private bool HasArtistAlbum => SongData?.ArtistAlbum != null &&
        (!string.IsNullOrEmpty(SongData.ArtistAlbum.ArtistId) ||
         !string.IsNullOrEmpty(SongData.ArtistAlbum.AlbumId));

    private bool HasSongSections => SongData?.SongLyrics?.Any() == true;

    private string BookTitle => SongData?.BookCategory?.BookTitle ?? "Unknown Book";
    private string CategoryName => SongData?.BookCategory?.CategoryName ?? "Uncategorized";
    private string ArtistName => SongData?.ArtistAlbum?.ArtistName ?? "Unknown Artist";
    private string AlbumTitle => SongData?.ArtistAlbum?.AlbumTitle ?? "Unknown Album";
    private int TrackNumber => SongData?.ArtistAlbum?.TrackNumber ?? 0;

    private Dictionary<string, List<SongPartPreview>> GroupedSections
    {
        get
        {
            if (SongData?.SongLyrics == null)
                return new Dictionary<string, List<SongPartPreview>>();

            var parts = SongData.SongLyrics
                .GroupBy(s => s.PartName.ToString() ?? "Verse")
                .ToDictionary(
                    g => g.Key,
                    g => g.GroupBy(s => s.PartNumber)
                         .Select(group => new SongPartPreview
                         {
                             SectionName = g.Key,
                             SectionNumber = group.Key,
                             Segments = group.OrderBy(s => s.LineNumber)
                                           .ThenBy(s => s.LyricOrder)
                                           .ToList()
                         })
                         .OrderBy(p => p.SectionNumber)
                         .ToList()
                );

            // Ensure common sections order
            var orderedSections = new Dictionary<string, List<SongPartPreview>>();
            var preferredOrder = new[] { "Intro", "Verse", "Chorus", "Bridge", "Outro", "Coda" };

            foreach (var section in preferredOrder)
            {
                if (parts.ContainsKey(section))
                {
                    orderedSections[section] = parts[section];
                }
            }

            // Add any remaining sections
            foreach (var section in parts.Keys)
            {
                if (!orderedSections.ContainsKey(section))
                {
                    orderedSections[section] = parts[section];
                }
            }

            return orderedSections;
        }
    }

    private List<List<SegmentCreateDto>> GetPartLines(List<SegmentCreateDto> segments)
    {
        return segments.GroupBy(s => s.LineNumber)
                      .OrderBy(g => g.Key)
                      .Select(g => g.OrderBy(s => s.LyricOrder).ToList())
                      .ToList();
    }

    private void SetActiveSectionTab(string sectionName)
    {
        activeSectionTab = sectionName;
        StateHasChanged();
    }

    private async Task HandleCancel()
    {
        if (OnCancel.HasDelegate)
        {
            await OnCancel.InvokeAsync();
        }
    }

    private async Task HandleSave()
    {
        if (OnSave.HasDelegate)
        {
            await OnSave.InvokeAsync();
        }
    }

    private async Task HandleBackdropClick()
    {
        await HandleCancel();
    }

    public void Dispose()
    {
        if (!_disposed)
        {
            _disposed = true;
        }
    }
}
