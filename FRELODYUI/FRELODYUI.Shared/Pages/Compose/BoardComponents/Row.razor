@inject ILogger<Row> _logger

<div tabindex="0" 
     class="@($"w-100 position-relative d-flex flex-wrap gap-3 bg-white" + 
            $" {(Focused ? "border border-primary" : "border border-secondary")}")"
     style="@(Focused ? "padding:2.5rem" : "padding:1.75rem");border-radius:1rem; border-bottom-right-radius:0.5rem"
     @onfocus="OnFocusRow">
    <span class="@($"position-absolute top-0 start-0 badge {(Focused ? "bg-primary mt-2 ms-2" : "mt-1 ms-3")}")">
        Lyric Line @Line.ToString("00")
    </span>

    <SortableList Id="@($"sortable-segments-{Line}")"
                  Items="filteredSegments"
                  OnUpdate="@SortSegments"
                  Context="segment"
                  Class="d-flex flex-wrap w-100 gap-1">
        <SortableItemTemplate>
            <div class="d-flex align-items-end gap-2" @ondblclick="() => HandleDoubleClick(segment)">
                <Segment Content="segment"
                         Chords="Chords"
                         Editing="@(EditModeSegmentId == segment.Id)"
                         Focused="Focused"
                         OnSave="HandleSave"
                         OnCancel="HandleCancel"
                         OnDragStart="HandleDragStart" />
            </div>
        </SortableItemTemplate>
        <ActionItemTemplate>
            <DropIndicator LineNumber="Line" />
            
            <AddSegment Chords="Chords"
                        FormOpen="addFormOpen"
                        OnFormOpenChanged="SetAddFormOpen"
                        OnSegmentAdded="HandleSegmentAdded"
                        Focused="Focused"/>
        </ActionItemTemplate>
    </SortableList>
</div>

@code {
    [Parameter] public int Line { get; set; }
    [Parameter] public bool Focused { get; set; }
    [Parameter] public List<SegmentCreateDto> Segments { get; set; }
    [Parameter] public List<ChordSimpleDto> Chords { get; set; }
    [Parameter] public string EditModeSegmentId { get; set; }
    [Parameter] public EventCallback OnFocusRow { get; set; }
    [Parameter] public EventCallback<List<SegmentCreateDto>> OnSegmentsUpdate { get; set; }
    [Parameter] public EventCallback<List<ChordSimpleDto>> OnChordsUpdate { get; set; }
    [Parameter] public EventCallback<string> OnEditModeSegmentIdChanged { get; set; }
    [Parameter] public TabsComponent.TabsComponentItem? ActiveTab { get; set; }

    private bool addFormOpen = false;
    private SegmentCreateDto editSegment;
    private SegmentCreateDto editedSegment;
    private ChordSimpleDto editedChord;
    private List<SegmentCreateDto> filteredSegments =>
        Segments?.Where(s => s.LineNumber == Line).OrderBy(s => s.LyricOrder).ToList() ?? new();

    protected override void OnParametersSet()
    {
        if (!Focused && editSegment != null)
        {
            HandleSave();
        }

        if (EditModeSegmentId != null)
        {
            editSegment = Segments?.FirstOrDefault(s => s.Id == EditModeSegmentId);
            editedSegment = editSegment;
            editedChord = Chords?.FirstOrDefault(c => c.Id == editSegment?.ChordId);
        }
    }

    private void SortSegments((int oldIndex, int newIndex) indices)
    {
        var (oldIndex, newIndex) = indices;

        if (oldIndex == newIndex) return;

        var lineSegments = filteredSegments.ToList();
        var itemToMove = lineSegments[oldIndex];
        lineSegments.RemoveAt(oldIndex);

        if (newIndex < lineSegments.Count)
        {
            lineSegments.Insert(newIndex, itemToMove);
        }
        else
        {
            lineSegments.Add(itemToMove);
        }

        // Update LyricOrder to match new positions
        for (int i = 0; i < lineSegments.Count; i++)
        {
            lineSegments[i].LyricOrder = i + 1;
        }

        // Update the main segments list
        var updatedSegments = Segments.Where(s => s.LineNumber != Line)
                                    .Concat(lineSegments)
                                    .ToList();

        OnSegmentsUpdate.InvokeAsync(updatedSegments);
    }

    private async Task HandleDragStart(SegmentCreateDto segment)
    {
        await JsRt.InvokeVoidAsync("setDragData", "segmentId", segment.Id);
    }

    private void HandleDragOver()
    {
        // Highlight logic would go here
    }

    private void HandleDragLeave()
    {
        // Unhighlight logic
    }

    private async Task HandleDrop()
    {
        var segmentId = await JsRt.InvokeAsync<string>("getDragData", "segmentId");
        var segment = Segments.First(s => s.Id == segmentId);
        segment.LineNumber = Line;

        // Assign new LyricOrder based on current segments in this line
        var maxOrder = filteredSegments.Any() ? filteredSegments.Max(s => s.LyricOrder) : 0;
        segment.LyricOrder = maxOrder + 1;

        await OnSegmentsUpdate.InvokeAsync(Segments);
    }

    private void HandleDoubleClick(SegmentCreateDto segment)
    {
        if (editSegment != null)
        {
            HandleSave();
        }
        OnEditModeSegmentIdChanged.InvokeAsync(segment.Id);
    }

    private void HandleSave()
    {
        if (editedSegment != null)
        {
            if (string.IsNullOrWhiteSpace(editedSegment.Lyric) && editedChord == null)
            {
                Segments.RemoveAll(s => s.Id == editedSegment.Id);
            }
            else
            {
                var index = Segments.FindIndex(s => s.Id == editedSegment.Id);
                Segments[index] = editedSegment;
            }
            OnSegmentsUpdate.InvokeAsync(Segments);
        }
        editSegment = null;
        OnEditModeSegmentIdChanged.InvokeAsync(null);
    }

    private void HandleCancel()
    {
        editSegment = null;
        OnEditModeSegmentIdChanged.InvokeAsync(null);
    }

    private void SetAddFormOpen(bool open)
    {
        addFormOpen = open;
    }

    private void HandleSegmentAdded(SegmentCreateDto newSegment)
    {
        try
        {
            // Set the LyricOrder for the new segment
            var maxOrder = filteredSegments.Any()
                            ? filteredSegments.Max(s => s.LyricOrder)
                            : 0;
            newSegment.LyricOrder = maxOrder + 1;
            newSegment.LineNumber = Line;
            newSegment.PartNumber = ActiveTab != null
                                    ? ActiveTab.SectionNumber
                                    : 1;
            newSegment.PartName = ActiveTab != null
                                    ? ActiveTab.SectionEnumValue
                                    : SongSection.Verse;

            Segments.Add(newSegment);
            OnSegmentsUpdate.InvokeAsync(Segments);
        }
        catch (Exception ex)
        {
            _logger.LogError("Error adding segment: {Error}", ex);
        }       
    }
}