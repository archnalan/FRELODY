@using FRELODYUI.Shared.Pages.Compose.ChordComponents

@if (FormOpen)
{
    <div class="d-flex rounded bg-dark p-2" style="@TextBoxSize">
        <form class="d-flex position-relative m-2" @onsubmit="HandleSubmit">
            <div class="d-flex flex-column gap-2 me-2">                
               <ChordsDropdown TabIndex="@(_baseTabIndex + 1)"
                               SelectedChord="SelectedChord" 
                               SelectedChordChanged="HandleChordSelected" />
                <input @ref="lyricInput"
                       type="text"
                       tabindex="@_baseTabIndex"
                       class="form-control form-control-sm"
                       @bind-Value="_segmentText"
                       @bind-Value:event="oninput"
                       placeholder="Enter lyric segment..." />
            </div>
            <div tabindex="@(_baseTabIndex + 5)"
                 class="position-absolute top-0 start-100 translate-middle badge rounded-circle bg-white"
                 style="display:flex; justify-content:center; align-items:center; width:1.5rem;height:1.5rem"
                 @onclick="CloseForm">
                <i class="bi bi-x text-danger"></i>
            </div>
            <button type="submit" tabindex="@(_baseTabIndex + 4)" 
                class="btn btn-primary btn-sm">
                Save
            </button>
        </form>
    </div>
}
else
{
    <button class="@($"btn btn-sm px-3 {(FocusedLine ? "btn-outline-dark" : "btn-outline-secondary")}")"
            style="@TextBoxSize"
            @onclick="OpenForm">
        <i class="bi bi-plus"></i>
        Add a segment
    </button>
}

@code {
    [Parameter] public EventCallback<SegmentCreateDto> OnSegmentAdded { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public string TextBoxSize { get; set; } = "width:8rem;";
    [Parameter] public ChordDto SelectedChord { get; set; } = new();
    [Parameter] public EventCallback<ChordDto> SelectedChordChanged { get; set; } 
    [Parameter] public string SegmentText { get; set; } = string.Empty;
    [Parameter] public bool IsMidSegments { get; set; } 
    [Parameter] public bool FormOpen { get; set; }
    [Parameter] public EventCallback<bool> FormOpenChanged{ get; set; }
    [Parameter] public bool FocusedLine { get; set; }
    [Parameter] public EventCallback ClosePrevForm { get; set; }

    private ElementReference lyricInput;
    public bool shouldFocusInput = true;
    private int _baseTabIndex = 0;
    private SegmentCreateDto _newSegment = new();
    private string _segmentText = string.Empty;
    private bool isInitialized = false;

    protected override void OnParametersSet()
    {
        if (FormOpen && !isInitialized)
        {
            if (!string.IsNullOrWhiteSpace(SegmentText) && string.IsNullOrEmpty(_segmentText))
            {
                _segmentText = SegmentText;
            }
            isInitialized = true;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (FormOpen)
            {
                await lyricInput.FocusAsync();
            }           
        }
        if (shouldFocusInput && FormOpen)
        {
            shouldFocusInput = false;
            await lyricInput.FocusAsync();

            _baseTabIndex = await JsRt.InvokeAsync<int>("getTabIndexOrDefault", lyricInput);
            StateHasChanged();
        }
    }

    public async Task OpenForm()
    {
        if (ClosePrevForm.HasDelegate)
        {
            await ClosePrevForm.InvokeAsync();
        }
        FormOpen = true;
        shouldFocusInput = true;
        _ = FormOpenChanged.InvokeAsync(FormOpen);
    }

    public async Task CloseForm()
    {
        if (OnCancel.HasDelegate)
        {
            await OnCancel.InvokeAsync();
        }
        _segmentText = "";
        var cleared = new ChordDto();
        SelectedChord = cleared;
        await SelectedChordChanged.InvokeAsync(cleared);
        FormOpen = false;
        await FormOpenChanged.InvokeAsync(_newSegment.AddNextSegment);
    }

    private async Task HandleSubmit()
    {
        _newSegment = new SegmentCreateDto
        {
            Id = Guid.NewGuid().ToString(),
            Lyric = GetLyric(_segmentText),
            ChordId = SelectedChord.Id,
            ChordName = SelectedChord.ChordName,
            AddNextSegment = true
        };

        await OnSegmentAdded.InvokeAsync(_newSegment);
        _segmentText = "";

        var cleared = new ChordDto();
        SelectedChord = cleared;
        await SelectedChordChanged.InvokeAsync(cleared);

        await CloseForm();
    } 

    private Task HandleChordSelected(ChordDto chord)
    {
        SelectedChord = chord;
        return SelectedChordChanged.InvokeAsync(chord);
    }

    private string GetLyric(string SegmentText)
        => string.IsNullOrEmpty(SegmentText?.Trim()) ? "-" : SegmentText.Trim();

    public async Task SubmitAndExitAsync()
    {        
        _newSegment = new SegmentCreateDto
        {
            Id = Guid.NewGuid().ToString(),
            Lyric = GetLyric(_segmentText),
            ChordId = SelectedChord.Id,
            ChordName = SelectedChord.ChordName,
            AddNextSegment = false
        };

        if (_newSegment.Lyric != "-" || !string.IsNullOrEmpty(_newSegment.ChordName))
        {
            await OnSegmentAdded.InvokeAsync(_newSegment);
            _segmentText = "";
            var cleared = new ChordDto();
            SelectedChord = cleared;
            await SelectedChordChanged.InvokeAsync(cleared);
        }
        else
        {
            if (IsMidSegments)
                await OnSegmentAdded.InvokeAsync(null);
        }

        FormOpen = false;
        await FormOpenChanged.InvokeAsync(false);      
    }

    public void SubmitAndExit()
    {
        _ = SubmitAndExitAsync();
    }
}