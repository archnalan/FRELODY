@using FRELODYUI.Shared.Pages.Compose.ChordComponents

@if (FormOpen)
{
    <div class="d-flex align-items-center p-2 rounded">
        <form class="d-flex position-relative" @onsubmit="HandleSubmit">
            <div class="d-flex flex-column gap-2 me-2">                
               <ChordsDropdown TabIndex="@(_baseTabIndex + 1)"
                               SelectedChord="SelectedChord" 
                               SelectedChordChanged="HandleChordSelected" />
                <input @ref="lyricInput"
                       type="text"
                       tabindex="@_baseTabIndex"
                       class="form-control form-control-sm"
                       @bind="SegmentText"
                       placeholder="Enter lyric segment..." />
            </div>
            <div tabindex="@(_baseTabIndex + 5)"
                 class="position-absolute top-0 start-100 translate-middle badge rounded-circle bg-white"
                 style="display:flex; justify-content:center; align-items:center; width:1.5rem;height:1.5rem"
                 @onclick="CloseForm">
                <i class="bi bi-x text-danger"></i>
            </div>
            <button type="submit" tabindex="@(_baseTabIndex + 4)" 
                class="btn btn-primary btn-sm">
                Save
            </button>
        </form>
    </div>
}
else
{
    <button class="@($"btn btn-sm px-3 {(Focused ? "btn-outline-dark" : "btn-outline-secondary")}")"
            style="@TextBoxSize"
            @onclick="OpenForm">
        <i class="bi bi-plus"></i>
        Add a segment
    </button>
}

@code {
    [Parameter] public EventCallback<SegmentCreateDto> OnSegmentAdded { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public string TextBoxSize { get; set; } = "width:8rem;";
    [Parameter] public ChordDto SelectedChord { get; set; } = new();
    [Parameter] public string SegmentText { get; set; } = string.Empty;
    [Parameter] public bool IsMidSegments { get; set; } 
    [Parameter] public bool FormOpen { get; set; } 
    [Parameter] public bool Focused { get; set; }

    private List<ChordDto>? Chords { get; set; }
    private ElementReference lyricInput =default!;
    public bool shouldFocusInput = true;
    private int _baseTabIndex = 0;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            if (FormOpen)
            {
                await lyricInput.FocusAsync();
            }           
        }
        if (shouldFocusInput && FormOpen)
        {
            shouldFocusInput = false;
            await lyricInput.FocusAsync();

            _baseTabIndex = await JsRt.InvokeAsync<int>(
           "getTabIndexOrDefault",
           lyricInput);
            StateHasChanged();
        }
    }


    public void OpenForm()
    {
        FormOpen = true;
        Focused = false;
        shouldFocusInput = true;        
    }

    public void CloseForm()
    {
        if(OnCancel.HasDelegate)
        {
            OnCancel.InvokeAsync();
        }
        FormOpen = false;
        Focused = false;
    }

    private void HandleSubmit()
    {
        var newSegment = new SegmentCreateDto
            {
                Id = Guid.NewGuid().ToString(),
                Lyric = GetLyric(SegmentText),
                ChordId = SelectedChord.Id,
                ChordName = SelectedChord.ChordName,
            };

        OnSegmentAdded.InvokeAsync(newSegment);
        SegmentText = "";
        SelectedChord = new ChordDto(); 
        CloseForm();
    } 

    private async Task HandleChordSelected(ChordDto chord)
    {
        SelectedChord = chord;
    }

    private string GetLyric(string SegmentText)
    
    {
        return string.IsNullOrEmpty(SegmentText?.Trim()) 
        ? "-" 
        : SegmentText.Trim();
    }
}