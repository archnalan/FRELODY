@using FRELODYUI.Shared.Pages.Compose.ChordComponents
@inject ILogger<Segment> _logger

<div class="@($"d-flex align-items-center p-2 rounded cursor-pointer {(Focused ? "bg-dark" : "bg-secondary")}")">
    @if (Editing)
    {
        <AddSegment @ref="addSegmentRef"
                    FormOpen="Editing"
                    Focused="Focused"
                    SelectedChord="@selectedChord"
                    SegmentText="@Content.Lyric"
                    OnSegmentAdded="HandleSegmentAdded"/>
    }
    else
    {
        <div class="d-flex flex-column justify-content-between">
            <div>
                <p class="small text-white m-0">@ChordName</p>
            </div>
            <div>
                <p class="small text-white m-0">@Content.Lyric</p>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public SegmentCreateDto Content { get; set; } = default!;
    [Parameter] public bool Editing { get; set; }
    [Parameter] public bool Focused { get; set; }
    [Parameter] public EventCallback<SegmentCreateDto> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback<SegmentCreateDto> OnDragStart { get; set; }
    
    private ChordDto selectedChord = new();
    private string ChordName = string.Empty;
    private bool isInitialized = false;
    private AddSegment addSegmentRef = default!;

    protected async override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if(!isInitialized)
            {
                if (!string.IsNullOrEmpty(Content.Id))
                {
                    ChordName = Content.ChordName ?? string.Empty;
                    if (string.IsNullOrEmpty(ChordName)
                    && !string.IsNullOrEmpty(Content.ChordId))
                    {
                        selectedChord = await GetChord(Content.ChordId);
                    }
                }
                isInitialized = true;
                StateHasChanged();
            }
        }
    }

    private async Task HandleDragStart()
    {
        await OnDragStart.InvokeAsync(Content);
    }

    // private void SetAddFormOpen(bool open)
    // {
    //     if (!open)
    //     {
    //         OnCancel.InvokeAsync();
    //     }
    // }

    private void HandleSegmentAdded(SegmentCreateDto editedSegment)
    {
        // Update the current Content with the edited values
        Content.Lyric = editedSegment.Lyric;
        Content.ChordId = editedSegment.ChordId;
        Content.ChordName = editedSegment.ChordName;

        // Update the local ChordName for display
        ChordName = editedSegment.ChordName ?? string.Empty;

        // Notify parent that save is complete
        OnSave.InvokeAsync(editedSegment);
    }

    public void SetSelectedChord(ChordDto chord)
    {
        selectedChord = chord;
        Content.ChordId = chord.Id;
        Content.ChordName = chord.ChordName;
        ChordName = chord.ChordName ?? string.Empty;
        StateHasChanged();
    }

    public async Task<ChordDto> GetChord(string chordId)
    {
        try
        {
            var response = await _chordsApi.GetChordById(chordId);
            if (response.IsSuccessStatusCode)
            {
                return response.Content!;
            }
            else
            {
                var errorMessage = _apiResponseHandler.GetApiErrorMessage(response);
                _logger.LogError("Error getting chord: {Error}", errorMessage);
                return new ChordDto();
            }
        }
        catch (Exception ex)
        {
            _logger.LogError("Error getting chord: {Error}", ex);
            return new ChordDto();
        }
    }
}