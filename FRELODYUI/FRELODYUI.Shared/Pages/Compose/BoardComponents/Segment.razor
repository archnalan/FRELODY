@using FRELODYUI.Shared.Pages.Compose.ChordComponents
@inject ILogger<Segment> _logger

<div class="@($"d-flex align-items-center p-2 rounded cursor-pointer {(Focused ? "bg-dark" : "bg-secondary")}")">
    @if (Editing)
    {
        <AddSegment Chords="Chords"
                    FormOpen="Editing"
                    Focused="Focused"
                    OnFormOpenChanged="SetAddFormOpen"
                    OnSegmentAdded="HandleSegmentAdded"/>
    }
    else
    {
        <div class="d-flex flex-column justify-content-between">
            <div>
                <p class="small text-white m-0">@ChordName</p>
            </div>
            <div>
                <p class="small text-white m-0">@Content.Lyric</p>
            </div>
        </div>
    }
</div>

@code {
    [Parameter] public SegmentCreateDto Content { get; set; } = default!;
    [Parameter] public List<ChordSimpleDto> Chords { get; set; } = default!;
    [Parameter] public bool Editing { get; set; }
    [Parameter] public bool Focused { get; set; }
    [Parameter] public EventCallback OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }
    [Parameter] public EventCallback<SegmentCreateDto> OnDragStart { get; set; }

    private string ChordName = string.Empty;
    private bool isInitialized = false;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            if(!isInitialized)
            {
                if (!string.IsNullOrEmpty(Content.Id))
                {
                    ChordName = Content.ChordName ?? string.Empty;
                }
                else
                {
                    ChordName = Chords?.FirstOrDefault(c =>
                        c.Id == Content.ChordId)?.ChordName ?? "";
                }
                isInitialized = true;
                StateHasChanged();
            }
        }
    }

    private async Task HandleDragStart()
    {
        await OnDragStart.InvokeAsync(Content);
    }

    private void SetAddFormOpen(bool open)
    {
        if (!open)
        {
            OnCancel.InvokeAsync();
        }
    }

    private void HandleSegmentAdded(SegmentCreateDto editedSegment)
    {
        // Update the current Content with the edited values
        Content.Lyric = editedSegment.Lyric;
        Content.ChordId = editedSegment.ChordId;
        Content.ChordName = editedSegment.ChordName;
        
        // Update the local ChordName for display
        ChordName = editedSegment.ChordName ?? string.Empty;
        
        // Notify parent that save is complete
        OnSave.InvokeAsync();
    }
}