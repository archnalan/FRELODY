@page "/songbooks"
@using FRELODYUI.Shared.Services
@inject IFormFactor FormFactor

<PageTitle>Song Books</PageTitle>

<h3 class="mb-4">Song Books</h3>
@if (songBooks != null)
{
    @foreach (var songbook in songBooks)
    {
        <div class="card mb-3 p-2 shadow" style="width: 18rem;">
            <img height="100" src="..." class="card-img-top border p-2" alt="...">
            <div class="card-body">
                <h5 class="card-title">@songbook.Title</h5>
                <p class="card-text">@songbook.Description</p>
                <a href="@($"songbooks/{songbook.Id}")" class="btn btn-primary">Categories</a>
            </div>
        </div>
    }

}

<!--Welcome to your new app running on <em>@factor</em> using <em>@platform</em>-->
@if (_modalService.IsModalVisible)
{
    <DialogModal IsVisible="true"
                 Modal="@_modalService.CurrentModal"
                 OnCloseModal="CloseModal"
                 OnConfirmModal="ConfirmModal" />
}


@code {
    private string factor => FormFactor.GetFormFactor();
    private string platform => FormFactor.GetPlatform();
    private List<SongBookDto> songBooks = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadSongs();
    }

    private async Task LoadSongs()
    {
        var songBookResult = await _songsBooksApi.GetAllSongBooks();
        if (songBookResult.IsSuccessStatusCode)
        {
            songBooks = songBookResult.Content!;
            StateHasChanged();
        }
        else
        {
            var errorMessage = _apiResponseHandler.GetApiErrorMessage(songBookResult);
            _modalService.Show(new ModalOptionDto
            {
                Title = "Error",
                Message = errorMessage,
                OptionType = OptionType.Error,
                ButtonText = "OK"
            });
        }
    }

    private async Task ConfirmModal()
    {
        //Handle Confirmation
        await CloseModal();
    }

    private async Task CloseModal()
    {
        await Task.Delay(100);
        _modalService.Close();
        StateHasChanged();
    }
}

