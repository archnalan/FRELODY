@page "/"
@using FRELODYUI.Shared.Services
@inject IFormFactor FormFactor

<PageTitle>Song Books</PageTitle>

<h3 class="mb-4">Song With Chords App</h3>

Welcome to your new app running on <em>@factor</em> using <em>@platform</em>

<h3 class="mb-3">Upload Song PDF</h3>

<InputFile OnChange="HandleFileSelected" class="form-control mb-3" />
@if (Song != null)
{
    <div class="song-container p-3">
        <h3 class="fw-bold text-center mb-3">@Song.SongNumber - @Song.Title</h3>
        @if (Song.SongLyrics != null)
    {
        @foreach (var lineGroup in Song.SongLyrics
            .GroupBy(s => s.LineNumber)
            .OrderBy(g => g.Key))
        {
            <div class="d-flex flex-row flex-wrap mb-2">
                @foreach (var seg in lineGroup.OrderBy(s => s.LyricOrder))
                {
                    <div class="d-flex flex-column justify-content-between py-2 m-2"
                         style="min-width: 60px; text-align: center;">

                        <div class="d-flex align-items-center position-relative @GetChordAlignmentClass(seg)">
                            @if (!string.IsNullOrEmpty(seg.ChordName))
                            {
                                <h6 class="fw-bolder text-primary m-0">@seg.ChordName</h6>
                            }
                            <button class="btn btn-sm btn-link text-success"
                                    @onclick="() => AddChord(seg)">
                                +Chord
                            </button>
                        </div>

                        <div>
                            <input class="form-control form-control-sm text-center"
                                   value="@seg.Lyric"
                                   @onchange="e => HandleLyricEdit(seg, e.Value?.ToString())" />
                        </div>
                    </div>
                }
            </div>
        }

        }
        <button class="btn btn-primary mt-3" @onclick="CustomizeSong">
            Customize
        </button>
    </div>
}
else
{
    <p>No song loaded.</p>
}


<DialogModal IsVisible="@_modalService.IsModalVisible"
             Modal="@_modalService.CurrentModal"
             OnCloseModal="CloseModal"
             OnConfirmModal="ConfirmModal" />

@code {
    private string factor => FormFactor.GetFormFactor();
    private string platform => FormFactor.GetPlatform();
    private SimpleSongCreateDto? Song;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var path = Path.Combine(Path.GetTempPath(), file.Name);

        using (var stream = file.OpenReadStream())
        using (var fs = new FileStream(path, FileMode.Create))
        {
            await stream.CopyToAsync(fs);
        }

        Song = Parser.ExtractSong(path);
    }

    private string GetChordAlignmentClass(SegmentCreateDto seg)
    {
        return seg.ChordAlignment switch
        {
            Alignment.Center => "justify-content-center",
            Alignment.Right => "justify-content-end",
            _ => "justify-content-start"
        };
    }
    private void HandleLyricEdit(SegmentCreateDto seg, string? newText)
    {
        if (string.IsNullOrWhiteSpace(newText)) return;

        // Split by pipe or space for now
        var parts = newText.Split('|', StringSplitOptions.RemoveEmptyEntries);

        if (parts.Length > 1)
        {
            // Replace this segment with the first part
            seg.Lyric = parts[0].Trim();
            if (Song !=null && Song?.SongLyrics!= null)
            {
                var lyricsList = Song.SongLyrics.ToList();
                int insertIndex = lyricsList.IndexOf(seg);

                foreach (var extra in parts.Skip(1))
                {
                    lyricsList.Insert(++insertIndex, new SegmentCreateDto
                    {
                        Id = Guid.NewGuid().ToString(),
                        Lyric = extra.Trim(),
                        LineNumber = seg.LineNumber,
                        PartNumber = seg.PartNumber,
                        PartName = seg.PartName,
                        LyricOrder = seg.LyricOrder + insertIndex
                    });
                }

                // Reassign the modified list back to SongLyrics
                Song.SongLyrics = lyricsList;
            }

        }
        else
        {
            seg.Lyric = newText.Trim();
        }
    }

    private void AddChord(SegmentCreateDto seg)
    {
        seg.ChordName = "NewChord";
    }

    private async void CustomizeSong()
    {
        string? songId = null;
        if (Song != null)
        {
            songId = Guid.NewGuid().ToString();

            var response = await _songsApi.CreateSong(Song);
            if (response.IsSuccessStatusCode)
            {
                var createdSong = response.Content!;
                songId = createdSong.Id;
            }
            else
            {
                var errorMessage = _apiResponseHandler.GetApiErrorMessage(response);
                _modalService.Show(new ModalOptionDto
                {
                    Title = "Error Creating Song",
                    Message = errorMessage,
                    Context = new ModalContext { ActionType = "CreateSongError",Data = Song },
                    ButtonText = "OK",
                    SubTitle = "",
                    OptionType = OptionType.Error,                    
                });
            }
        }
        // store Song in some shared SongStateService for retrieval
        // SongStateService.CurrentSong = Song;

        _navManager.NavigateTo($"/compose?songId={songId}");
    }

    private async Task ConfirmModal()
    {
        // handle specific contexts awaiting confirmation
        if (_modalService.CurrentModal.Context?.ActionType == "")
        {

        }
        await CloseModal();
    }

    private async Task CloseModal()
    {
        await Task.Delay(100);
        _modalService.Close();

        StateHasChanged();
    }
}
