@using System.Threading
@inject ILogger<ChordCard> _logger

<div class="row g-4">
    <Virtualize Context="chord"
                ItemsProvider="ProvideChordsAsync"
                ItemSize="170"
                OverscanCount="3"
                @ref="_virtualize">
                <ItemContent>
            <div class="col-12 col-md-6 col-lg-3">
                <div class="card h-100 shadow-sm" style="border-radius:.75rem;">
                    <div class="card-img-top">
                        <ChordCarousel Chord="chord"/>                      
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">@chord.ChordName</h5>
                        <p class="card-text mb-1">
                            Difficulty: <span class="text-muted">@GetDifficultyText(chord.Difficulty)</span>
                        </p>

                        <div class="card-actions d-flex justify-content-center mt-3">
                            <button class="btn btn-sm btn-info me-2"
                                    data-bs-toggle="tooltip"
                                    title="View Chord Details" 
                                    @onclick="() => NavigateToDetails(chord.Id)">
                                <i class="bi bi-list"></i>
                            </button>

                            <button class="btn btn-sm btn-primary me-2"
                                    data-bs-toggle="tooltip"
                                    title="Edit Chord"
                                    @onclick="async () => await HandleEditChord(chord)">
                                <i class="bi bi-pen"></i>
                            </button>

                            <button class="btn btn-sm btn-danger"
                                    data-bs-toggle="tooltip"
                                    title="Delete Chord"
                                    @onclick="() => HandleDeleteChord(chord)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
                </ItemContent>
    </Virtualize>
        
</div>

@code {

    [Parameter]
    public EventCallback<ChordDto> OnSetToDelete { get; set; }

    [Parameter]
    public EventCallback<bool> OnSetOpenConfirm { get; set; }

    [Parameter]
    public EventCallback<ChordDto> OnSetOpenChordEdit { get; set; }

    private string _searchTerm { get; set; } = string.Empty;
    private Virtualize<ChordDto>? _virtualize;
    private string error = string.Empty;

    private const string PlaceholderImagePath = "/_content/FRELODYUI.Shared/images/no_image_placeholder.png";

    private string Theme = "light";
    private int currentIndex = 0;
    private Timer? carouselTimer;


    public async Task Refresh(string? searchTerm = null)
    {
        _searchTerm = searchTerm ?? string.Empty;

        if (_virtualize is not null)
        {
            await _virtualize.RefreshDataAsync();
        }
    }

    private async ValueTask<ItemsProviderResult<ChordDto>> ProvideChordsAsync(ItemsProviderRequest request)
    {
        try
        {
            error = string.Empty;

            var offset = request.StartIndex;
            var limit = request.Count <= 0 ? 10 : request.Count;

            if (!string.IsNullOrWhiteSpace(_searchTerm))
            {
                var response = await _chordsApi.SearchChords(_searchTerm, offset, limit);
                var page = response?.Content;
                var items = page?.Data ?? new List<ChordDto>();
                var total = page?.TotalSize ?? 0;
                return new ItemsProviderResult<ChordDto>(items, total);
            }
            else
            {
                var response = await _chordsApi.GetChords(offset, limit);
                var page = response?.Content;
                var items = page?.Data ?? new List<ChordDto>();
                var total = page?.TotalSize ?? 0;
                return new ItemsProviderResult<ChordDto>(items, total);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error fetching songs during virtualization.");
            error = $"Error fetching songs: {ex.Message}";
            return new ItemsProviderResult<ChordDto>(Array.Empty<ChordDto>(), 0);
        }
    }

    private async Task HandleEditChord(ChordDto chord)
    {
        await OnSetOpenChordEdit.InvokeAsync(chord);
    }

    private void HandleDeleteChord(ChordDto chord)
    {
        OnSetToDelete.InvokeAsync(chord);
        OnSetOpenConfirm.InvokeAsync(true);
    }

    private void NavigateToDetails(string? chordId)
    {
        // Navigation would be implemented based on your routing
        _logger.LogInformation($"Navigating to chord details: {chordId}");
        _navManager.NavigateTo($"/chords/{chordId}");
    }

    private string GetDifficultyText(ChordDifficulty? difficulty)
    {
        return difficulty switch
        {
            ChordDifficulty.Easy => "Beginner",
            ChordDifficulty.Medium => "Intermediate",
            ChordDifficulty.Advanced => "Advanced",
            _ => "Unknown"
        };
    }

    public void Dispose()
    {
        carouselTimer?.Dispose();
    }
}