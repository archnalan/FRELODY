@using System.Threading
@inject ILogger<ChordCard> _logger

<div class="row g-4">
    <Virtualize Context="chord"
                ItemsProvider="ProvideChordsAsync"
                ItemSize="170"
                OverscanCount="3"
                @ref="_virtualize">
                <ItemContent>
            @{var chordCharts = Charts.Where(c => c.ChordId == chord.Id).ToList();}
            <div class="col-12 col-md-6 col-lg-3">
                <div class="card h-100 shadow-sm" style="border-radius:.75rem;">
                    <div class="card-img-top">
                        @if (Charts.Count > 0)
                        {
                            <div class="carousel slide" data-bs-ride="carousel">
                                <div class="carousel-inner">
                                    @for (int i = 0; i < Charts.Count; i++)
                                    {
                                        var chart = Charts[i];
                                        <div class="carousel-item @(i == 0 ? "active" : "")" key="@chart.Id">
                                            <div class="d-flex justify-content-center align-items-center position-relative">
                                                <img src="@DisplayChart(chart)"
                                                     alt="@chord?.ChordName"
                                                     class="img-thumbnail bg-light"
                                                     style="max-height: 15rem; border-radius: 0.5em; object-fit: contain; background-color: @(Theme == "dark" ? "#ddd" : "")" />
                                            </div>
                                        </div>
                                        <!--Add, Edit, Delete chart buttons, only icons-->
                                        <div class="carousel-indicators text-center mt-2">
                                            <button class="btn btn-sm btn-outline-primary"
                                                    @onclick="@(() => EditChart(chart.Id))">
                                                <i class="bi bi-plus me-1"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-secondary mx-2"
                                                    @onclick="@(() => _logger.LogInformation($"Edit chart {chart.Id} clicked"))">
                                                <i class="bi bi-pencil"></i>
                                            </button>
                                            <button class="btn btn-sm btn-outline-danger"
                                                    @onclick="@(() => DeleteChart(chart.Id))">
                                                <i class="bi bi-trash"></i>
                                            </button>
                                        </div>
                                    }
                                </div>
                                <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="prev">
                                    <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                    <span class="visually-hidden">Previous</span>
                                </button>
                                <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide="next">
                                    <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                    <span class="visually-hidden">Next</span>
                                </button>
                            </div>
                        }
                        else
                        {
                            <div class="carousel slide">
                                <div class="d-flex justify-content-center my-2">
                                    <img src="@PlaceholderImagePath"
                                         alt="No chord image to show"
                                         class="img-thumbnail bg-light"
                                         style="max-height: 15rem; border-radius: 0.5em; object-fit: contain; background-color: @(Theme == "dark" ? "#ddd" : "")" />
                                </div>
                                <div class="carousel-indicators text-center mb-2">
                                    <button class="btn btn-sm btn-outline-secondary"
                                            @onclick="@(() => NavigateToAddChart(chord.Id))">
                                        <i class="bi bi-plus me-1"></i> Add Chart
                                    </button>
                                </div>
                            </div>

                        }

                    </div>
                    <div class="card-body">
                        <h5 class="card-title">@chord.ChordName</h5>
                        <p class="card-text mb-1">
                            Difficulty: <span class="text-muted">@GetDifficultyText(chord.Difficulty)</span>
                        </p>
                        <small class="text-muted">@chordCharts.Count chart(s)</small>

                        <div class="card-actions d-flex justify-content-center mt-3">
                            <button class="btn btn-sm btn-info me-2" @onclick="() => NavigateToDetails(chord.Id)">
                                <i class="bi bi-list"></i>
                            </button>

                            <button class="btn btn-sm btn-primary me-2"
                                    @onclick="async () => await HandleEditChord(chord)">
                                <i class="bi bi-pencil"></i>
                            </button>

                            <button class="btn btn-sm btn-danger"
                                    @onclick="() => HandleDeleteChord(chord)">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
                </ItemContent>
    </Virtualize>
        
</div>

@code {
    [Parameter]
    public List<ChordChartEditDto> Charts { get; set; } = new();

    [Parameter]
    public List<ChordDto> CurrentChords { get; set; } = new();

    [Parameter]
    public EventCallback<ChordDto> OnSetToDelete { get; set; }

    [Parameter]
    public EventCallback<bool> OnSetOpenConfirm { get; set; }

    [Parameter]
    public EventCallback<ChordDto> OnSetOpenChordEdit { get; set; }

    private string _searchTerm { get; set; } = string.Empty;
    private Virtualize<ChordDto>? _virtualize;
    private string error = string.Empty;

    private const string PlaceholderImagePath = "/_content/FRELODYUI.Shared/images/no_image_placeholder.png";

    private string Theme = "light";
    private int currentIndex = 0;
    private Timer? carouselTimer;


    public async Task Refresh(string? searchTerm = null)
    {
        _searchTerm = searchTerm ?? string.Empty;

        if (_virtualize is not null)
        {
            await _virtualize.RefreshDataAsync();
        }
    }

    private async ValueTask<ItemsProviderResult<ChordDto>> ProvideChordsAsync(ItemsProviderRequest request)
    {
        try
        {
            error = string.Empty;

            var offset = request.StartIndex;
            var limit = request.Count <= 0 ? 10 : request.Count;

            if (!string.IsNullOrWhiteSpace(_searchTerm))
            {
                var response = await _chordsApi.SearchChords(_searchTerm, offset, limit);
                var page = response?.Content;
                var items = page?.Data ?? new List<ChordDto>();
                var total = page?.TotalSize ?? 0;
                return new ItemsProviderResult<ChordDto>(items, total);
            }
            else
            {
                var response = await _chordsApi.GetChords(offset, limit);
                var page = response?.Content;
                var items = page?.Data ?? new List<ChordDto>();
                var total = page?.TotalSize ?? 0;
                return new ItemsProviderResult<ChordDto>(items, total);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Error fetching songs during virtualization.");
            error = $"Error fetching songs: {ex.Message}";
            return new ItemsProviderResult<ChordDto>(Array.Empty<ChordDto>(), 0);
        }
    }

    private async Task HandleEditChord(ChordDto chord)
    {
        await OnSetOpenChordEdit.InvokeAsync(chord);
    }

    private void HandleDeleteChord(ChordDto chord)
    {
        OnSetToDelete.InvokeAsync(chord);
        OnSetOpenConfirm.InvokeAsync(true);
    }

    private void NavigateToDetails(string? chordId)
    {
        // Navigation would be implemented based on your routing
        _logger.LogInformation($"Navigating to chord details: {chordId}");
    }

    private void NavigateToAddChart(string? chordId)
    {
        _navManager.NavigateTo($"/chord-charts/create/{chordId}");
    }

    private void EditChart(string chartId)
    {
        _navManager.NavigateTo($"/chord-charts/edit/{chartId}");
    }

    private string GetDifficultyText(ChordDifficulty? difficulty)
    {
        return difficulty switch
        {
            ChordDifficulty.Easy => "Beginner",
            ChordDifficulty.Medium => "Intermediate",
            ChordDifficulty.Advanced => "Advanced",
            _ => "Unknown"
        };
    }

    private string DisplayChart(ChordChartEditDto chart)
    {
        if (!string.IsNullOrEmpty(chart.FilePath))
        {
            return chart.FilePath;
        }
        return PlaceholderImagePath;
    }

    private async Task DeleteChart(string chartId)
    {
        var chartToRemove = Charts.FirstOrDefault(c => c.Id == chartId);
        if (chartToRemove != null)
        {
            var response = await _chordChartsApi.DeleteChordChart(chartId);
            Charts.Remove(chartToRemove);
            if (currentIndex >= Charts.Count)
            {
                currentIndex = Charts.Count - 1;
            }
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        carouselTimer?.Dispose();
    }
}